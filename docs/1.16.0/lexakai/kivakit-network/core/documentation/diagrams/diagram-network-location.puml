
@startuml

    !include lexakai.theme
    
    title "Network Locations"
    
    abstract BaseReadableResource
    
    interface NetworkResource
    interface Comparable
    interface GlobalRepeater
    interface Validatable
    interface StringFormattable
    
    BaseReadableResource <|-- BaseNetworkResource
    NetworkResource <|-- BaseNetworkResource
    abstract class BaseNetworkResource
    {
        --(constructors)--
        #BaseNetworkResource(BaseReadableResource)
        #BaseNetworkResource(NetworkLocation)
        --(network)--
        +URI asUri()
        +URL asUrl()
    }
    
    Validatable <|-- NetworkAccessConstraints
    NetworkAccessConstraints o-- Duration
    NetworkAccessConstraints o-- UserName
    NetworkAccessConstraints o-- Password
    NetworkAccessConstraints o-- Count
    NetworkAccessConstraints o-- Duration
    class NetworkAccessConstraints
    {
        --
        +void password(Password)
        +Password password()
        --(collection)--
        +Count retries()
        --(naming)--
        +void userName(UserName)
        +UserName userName()
        --(network)--
        +NetworkAccessConstraints defaultNetworkAccessConstraints()
        +NetworkAccessConstraints pauseBetweenRetries(Duration pauseBetweenRetries)
        +NetworkAccessConstraints retries(Count retries)
        +Duration timeout()
        +NetworkAccessConstraints timeout(Duration timeout)
        --(time)--
        +Duration pauseBetweenRetries()
    }
    
    StringFormattable <|-- NetworkLocation
    Comparable <|-- NetworkLocation
    GlobalRepeater <|-- NetworkLocation
    NetworkLocation o-- NetworkAccessConstraints
    NetworkLocation o-- NetworkPath
    NetworkLocation o-- Port
    NetworkLocation o-- QueryParameters : "optional"
    class NetworkLocation
    {
        --(constructors)--
        +NetworkLocation(NetworkLocation)
        +NetworkLocation(NetworkPath)
        --
        +void constraints(NetworkAccessConstraints)
        +void reference(String fragment)
        +String reference()
        --(checks)--
        +boolean isChildOf(NetworkLocation that)
        --(network)--
        +URI asUri()
        +URL asUrl()
        +NetworkAccessConstraints constraints()
        +Host host()
        +NetworkLocation networkLocation(Listener, URI)
        +NetworkPath networkPath()
        +NetworkLocation parseNetworkLocation(Listener, String text)
        +Port port()
        +Protocol protocol()
        +NetworkLocation withPath(NetworkPath)
        +NetworkLocation withQueryParameters(QueryParameters)
        --(search)--
        +QueryParameters queryParameters()
        +void queryParameters(QueryParameters)
    }
    
    FilePath <|-- NetworkPath
    class NetworkPath
    {
        --(constructors)--
        #NetworkPath(NetworkPath)
        #NetworkPath(Port, String, List<String>)
        #NetworkPath(Port, StringPath)
        --(network)--
        +NetworkPath networkPath(Listener, Port, String path)
        +NetworkPath networkPath(Listener, URI)
        +NetworkPath networkPath(Port, String path)
        +SwitchParser.Builder<NetworkPath> networkPathSwitchParser(Listener, String name, String description)
        +NetworkPath parseNetworkPath(Listener, String text)
        +Port port()
    }
    
    interface Resource
    Resource <|-- NetworkResource
    NetworkResource --> NetworkLocation : "located at"
    interface NetworkResource
    {
        --(network)--
        +NetworkLocation location()
    }
    
    class QueryParameters
    {
        --(constructors)--
        #QueryParameters(String)
        +QueryParameters(VariableMap<String>)
        --(collection)--
        +VariableMap<String> asVariableMap()
        +boolean isEmpty()
        --(search)--
        +QueryParameters parseQueryParameters(Listener, String text)
    }
    
@enduml

