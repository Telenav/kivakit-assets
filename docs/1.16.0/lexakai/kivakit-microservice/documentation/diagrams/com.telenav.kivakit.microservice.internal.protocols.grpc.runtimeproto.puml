
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.microservice.internal.protocols.grpc.runtimeproto"
    
    interface ProtoGenerator
    
    class ArrayObject
    {
    }
    
    enum RuntimeProtoGenerator.ClassNameComparator
    {
        INSTANCE
    }
    
    class Constants
    {
    }
    
    class DynamicObject
    {
    }
    
    class RuntimeProtoGenerator.EnumObj
    {
    }
    
    class EnumObject
    {
    }
    
    class Generators
    {
        --(factory)--
        +ProtoGenerator newProtoGenerator(Schema<?>)
    }
    
    interface ProtostuffThreadLocal.Instantiator<T>
    {
        --(factory)--
        +T newInstance()
    }
    
    class JavaObject
    {
    }
    
    class MapEntryObjectObject
    {
    }
    
    class MapEntryStringObject
    {
    }
    
    class MapEntryStringString
    {
    }
    
    class MapObjectObject
    {
    }
    
    class MapStringObject
    {
    }
    
    class MapStringString
    {
    }
    
    class RuntimeProtoGenerator.Message
    {
    }
    
    
    interface ProtoGenerator
    {
        --
        +String generate()
        --(naming)--
        +ProtoGenerator setJavaOuterClassName(String outerClassName)
        +ProtoGenerator setJavaPackageName(String javaPackageName)
        +ProtoGenerator setPackageName(String packageName)
    }
    
    class ProtostuffThreadLocal
    {
        --(primitive)--
        +T fromBytes(byte[] protobuf, Class<T> schemaCls)
        +T fromBytes(byte[] protobuf, Class<T> schemaCls, Instantiator<T> instantiatorOptional)
        +T fromBytes(byte[] protobuf, Schema<T>, Instantiator<T> instantiatorOptional)
        +byte[] toBytes(Class<T> schemaCls, T obj)
        +byte[] toBytes(T obj)
        +byte[] toBytes(Schema<T>, T obj)
    }
    
    class ReflectionUtil
    {
        --
        +String getClassHierarchy(Class<?> cls)
        +Pair<RuntimeFieldType,Class<?>> normalizeFieldClass(com.dyuproject.protostuff.runtime.MappedSchema.Field<?>)
        +Pair<RuntimeSchemaType,Class<?>> normalizeSchemaClass(Class<?> schemaClass)
        --(collection)--
        +Pair<Type,Type> getMapGenericTypes(Type)
    }
    
    enum RuntimeFieldType
    {
        RuntimeMapField
        RuntimeMessageField
        RuntimeObjectField
    }
    
    ProtoGenerator <|-- RuntimeProtoGenerator
    class RuntimeProtoGenerator
    {
        --(constructors)--
        +RuntimeProtoGenerator(Schema<?>)
        --
        +void generateInternal()
        #void doGenerateEnum(Class<?> enumClass)
        --(messaging)--
        #void doGenerateMessage(Schema<?>)
    }
    
    enum RuntimeSchemaType
    {
        ArraySchema
        MapSchema
        ObjectSchema
        PolymorphicEnumSchema
    }
    
    class UUID
    {
    }
    
@enduml

