<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2422.9167px" preserveAspectRatio="none" style="width:956px;height:2422px;background:#333333;" version="1.1" viewBox="0 0 956 2422" width="956.25px" zoomAndPan="magnify"><defs/><g><rect fill="#48494B" height="41.2028" rx="8.3333" ry="8.3333" style="stroke:#545454;stroke-width:1.0416666666666667;" width="258.3333" x="341.9271" y="2.0833"/><text fill="#C0C0C0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="20.8333" lengthAdjust="spacing" textLength="235.4167" x="353.3854" y="30.5583">com.telenav.kivakit.test</text><!--MD5=[9967d26dffcce59a1a2d039e92c629e7]
cluster UnitTest--><polygon fill="#333333" points="756.7708,52.6611,824.4792,52.6611,831.7708,79.8828,939.0625,79.8828,939.0625,214.1195,756.7708,214.1195,756.7708,52.6611" style="stroke:#333333;stroke-width:2.0833333333333335;"/><line style="stroke:#333333;stroke-width:2.0833333333333335;" x1="756.7708" x2="831.7708" y1="79.8828" y2="79.8828"/><text fill="#C8AC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="55.2083" x="764.0625" y="69.9544">UnitTest</text><!--MD5=[980ac5d3ee417f6e97fdb0c98462c4e6]
class UnitTest.Repeats--><rect codeLine="8" fill="#282828" height="87.5448" id="UnitTest.Repeats" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="112.5" x="801.5625" y="101.6195"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="112.5" x="801.5625" y="101.6195"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="112.5" x="801.5625" y="124.6745"/><rect codeLine="8" fill="none" height="87.5448" id="UnitTest.Repeats" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="112.5" x="801.5625" y="101.6195"/><ellipse cx="826.9271" cy="117.3136" fill="#CF6300" rx="10.4167" ry="10.4167" style="stroke:#EF8300;stroke-width:1.0416666666666667;"/><path d="M829.9829,122.0011 L824.3066,122.0011 L824.3066,112.8886 L829.9829,112.8886 L829.9829,114.4755 L826.1072,114.4755 L826.1072,116.4408 L829.6167,116.4408 L829.6167,118.0278 L826.1072,118.0278 L826.1072,120.4142 L829.9829,120.4142 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="51.0417" x="845.9896" y="122.0378">Repeats</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="802.6042" x2="913.0208" y1="133.0078" y2="133.0078"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="93.75" x="810.9375" y="151.3774">ALLOW_REPEATS</text><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="71.875" x="810.9375" y="171.1222">NO_REPEATS</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="802.6042" x2="913.0208" y1="180.8309" y2="180.8309"/><!--MD5=[085076096658226fe7d3ac7a26d9b629]
class Listener--><rect codeLine="6" fill="#282828" height="48.055" id="Listener" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="89.5833" x="198.4375" y="303.182"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="89.5833" x="198.4375" y="303.182"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="89.5833" x="198.4375" y="326.237"/><rect codeLine="6" fill="none" height="48.055" id="Listener" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="89.5833" x="198.4375" y="303.182"/><ellipse cx="213.0208" cy="318.8761" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M210.4248,316.038 L210.4248,314.4511 L215.8508,314.4511 L215.8508,316.038 L214.0381,316.038 L214.0381,321.9767 L215.8508,321.9767 L215.8508,323.5636 L210.4248,323.5636 L210.4248,321.9767 L212.2375,321.9767 L212.2375,316.038 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="52.0833" x="229.6875" y="323.6003">Listener</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="199.4792" x2="286.9792" y1="334.5703" y2="334.5703"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="199.4792" x2="286.9792" y1="342.9036" y2="342.9036"/><!--MD5=[b5200ea67374d4881b46d20c0bf2076b]
class TestWatcher--><rect fill="#282828" height="48.055" id="TestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="116.6667" x="331.7708" y="121.4111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="116.6667" x="331.7708" y="121.4111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="116.6667" x="331.7708" y="144.4661"/><rect fill="none" height="48.055" id="TestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="116.6667" x="331.7708" y="121.4111"/><ellipse cx="346.3542" cy="137.1053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M348.2646,141.5304 Q347.8373,141.7501 347.3674,141.8599 Q346.8974,141.9698 346.3786,141.9698 Q344.5353,141.9698 343.5649,140.7552 Q342.5944,139.5406 342.5944,137.2457 Q342.5944,134.9447 343.5649,133.7301 Q344.5353,132.5155 346.3786,132.5155 Q346.8974,132.5155 347.3735,132.6253 Q347.8495,132.7352 348.2646,132.9549 L348.2646,134.9569 Q347.8007,134.5296 347.3643,134.3313 Q346.9279,134.1329 346.464,134.1329 Q345.4753,134.1329 344.9717,134.9172 Q344.4682,135.7015 344.4682,137.2457 Q344.4682,138.7838 344.9717,139.5681 Q345.4753,140.3524 346.464,140.3524 Q346.9279,140.3524 347.3643,140.154 Q347.8007,139.9556 348.2646,139.5284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="79.1667" x="363.0208" y="141.8294">TestWatcher</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="332.8125" x2="447.3958" y1="152.7995" y2="152.7995"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="332.8125" x2="447.3958" y1="161.1328" y2="161.1328"/><!--MD5=[9a622fad8a13b5b20e3ac43fd2b84d0a]
class JUnitFailureReporter--><rect fill="#282828" height="48.055" id="JUnitFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="168.75" x="133.8542" y="2368.2861"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="168.75" x="133.8542" y="2368.2861"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="168.75" x="133.8542" y="2391.3411"/><rect fill="none" height="48.055" id="JUnitFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="168.75" x="133.8542" y="2368.2861"/><ellipse cx="148.4375" cy="2383.9803" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M150.3479,2388.4054 Q149.9207,2388.6251 149.4507,2388.7349 Q148.9807,2388.8448 148.4619,2388.8448 Q146.6187,2388.8448 145.6482,2387.6302 Q144.6777,2386.4156 144.6777,2384.1207 Q144.6777,2381.8197 145.6482,2380.6051 Q146.6187,2379.3905 148.4619,2379.3905 Q148.9807,2379.3905 149.4568,2379.5003 Q149.9329,2379.6102 150.3479,2379.8299 L150.3479,2381.8319 Q149.884,2381.4046 149.4476,2381.2063 Q149.0112,2381.0079 148.5474,2381.0079 Q147.5586,2381.0079 147.0551,2381.7922 Q146.5515,2382.5765 146.5515,2384.1207 Q146.5515,2385.6588 147.0551,2386.4431 Q147.5586,2387.2274 148.5474,2387.2274 Q149.0112,2387.2274 149.4476,2387.029 Q149.884,2386.8306 150.3479,2386.4034 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="131.25" x="165.1042" y="2388.7044">JUnitFailureReporter</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="134.8958" x2="301.5625" y1="2399.6745" y2="2399.6745"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="134.8958" x2="301.5625" y1="2408.0078" y2="2408.0078"/><!--MD5=[48199313adf418ae9233b27dfacc45fd]
class RandomValueFactory--><rect fill="#282828" height="48.055" id="RandomValueFactory" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="172.9167" x="382.8125" y="2368.2861"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="172.9167" x="382.8125" y="2368.2861"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="172.9167" x="382.8125" y="2391.3411"/><rect fill="none" height="48.055" id="RandomValueFactory" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="172.9167" x="382.8125" y="2368.2861"/><ellipse cx="397.3958" cy="2383.9803" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M399.3062,2388.4054 Q398.879,2388.6251 398.409,2388.7349 Q397.939,2388.8448 397.4202,2388.8448 Q395.577,2388.8448 394.6065,2387.6302 Q393.6361,2386.4156 393.6361,2384.1207 Q393.6361,2381.8197 394.6065,2380.6051 Q395.577,2379.3905 397.4202,2379.3905 Q397.939,2379.3905 398.4151,2379.5003 Q398.8912,2379.6102 399.3062,2379.8299 L399.3062,2381.8319 Q398.8424,2381.4046 398.406,2381.2063 Q397.9696,2381.0079 397.5057,2381.0079 Q396.5169,2381.0079 396.0134,2381.7922 Q395.5098,2382.5765 395.5098,2384.1207 Q395.5098,2385.6588 396.0134,2386.4431 Q396.5169,2387.2274 397.5057,2387.2274 Q397.9696,2387.2274 398.406,2387.029 Q398.8424,2386.8306 399.3062,2386.4034 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="135.4167" x="414.0625" y="2388.7044">RandomValueFactory</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="383.8542" x2="554.6875" y1="2399.6745" y2="2399.6745"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="383.8542" x2="554.6875" y1="2408.0078" y2="2408.0078"/><!--MD5=[1c1e497a52719d36c77368d67b52be7b]
class UnitTest--><rect codeLine="18" fill="#282828" height="1814.7705" id="UnitTest" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="667.7083" x="9.375" y="468.2861"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="667.7083" x="9.375" y="468.2861"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="667.7083" x="9.375" y="491.3411"/><rect codeLine="18" fill="none" height="1814.7705" id="UnitTest" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="667.7083" x="9.375" y="468.2861"/><ellipse cx="308.3333" cy="483.9803" fill="#C8AC00" rx="10.4167" ry="10.4167" style="stroke:#D8BC00;stroke-width:1.0416666666666667;"/><path d="M307.9264,480.6824 L307.078,484.4116 L308.7809,484.4116 Z M306.8278,479.0344 L309.0312,479.0344 L311.4909,488.147 L309.6903,488.147 L309.1288,485.8948 L306.7179,485.8948 L306.1686,488.147 L304.3681,488.147 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="55.2083" x="331.25" y="488.7044">UnitTest</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="10.4167" x2="676.0417" y1="499.6745" y2="499.6745"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="676.0417" y1="508.0078" y2="508.0078"/><ellipse cx="20.8333" cy="519.4661" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="138.5417" x="32.2917" y="526.3774">void testBeforeUnitTest()</text><ellipse cx="20.8333" cy="539.211" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="87.5" x="32.2917" y="546.1222">void testSetup()</text><polygon fill="#FFFF44" points="20.8333,553.7476,25,557.9142,20.8333,562.0809,16.6667,557.9142" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="32.2917" y="565.8671">boolean ensure(boolean condition)</text><polygon fill="#FFFF44" points="20.8333,573.4924,25,577.6591,20.8333,581.8258,16.6667,577.6591" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="382.2917" x="32.2917" y="585.612">void ensure(boolean condition, String message, Object... arguments)</text><polygon fill="#FFFF44" points="20.8333,593.2373,25,597.404,20.8333,601.5706,16.6667,597.404" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="333.3333" x="32.2917" y="605.3569">void ensureBetween(double actual, double low, double high)</text><polygon fill="#FFFF44" points="20.8333,612.9822,25,617.1488,20.8333,621.3155,16.6667,617.1488" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="212.5" x="32.2917" y="625.1017">void ensureEqual(T given, T expected)</text><polygon fill="#FFFF44" points="20.8333,632.7271,25,636.8937,20.8333,641.0604,16.6667,636.8937" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="419.7917" x="32.2917" y="644.8466">void ensureEqual(T given, T expected, String message, Object... arguments)</text><polygon fill="#FFFF44" points="20.8333,652.4719,25,656.6386,20.8333,660.8053,16.6667,656.6386" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="203.125" x="32.2917" y="664.5915">void ensureFalse(boolean condition)</text><polygon fill="#FFFF44" points="20.8333,672.2168,25,676.3835,20.8333,680.5501,16.6667,676.3835" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="410.4167" x="32.2917" y="684.3363">void ensureFalse(boolean condition, String message, Object... arguments)</text><polygon fill="#FFFF44" points="20.8333,691.9617,25,696.1283,20.8333,700.295,16.6667,696.1283" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="164.5833" x="32.2917" y="704.0812">void ensureNotEqual(T a, T b)</text><polygon fill="#FFFF44" points="20.8333,711.7065,25,715.8732,20.8333,720.0399,16.6667,715.8732" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="132.2917" x="32.2917" y="723.8261">void ensureNull(Object)</text><polygon fill="#FFFF44" points="20.8333,731.4514,25,735.6181,20.8333,739.7847,16.6667,735.6181" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="197.9167" x="32.2917" y="743.571">void ensureThrows(Runnable code)</text><polygon fill="#FFFF44" points="20.8333,751.1963,25,755.363,20.8333,759.5296,16.6667,755.363" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="442.7083" x="32.2917" y="763.3158">void ensureWithin(double expected, double actual, double maximumDifference)</text><polygon fill="#FFFF44" points="20.8333,770.9412,25,775.1078,20.8333,779.2745,16.6667,775.1078" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="177.0833" x="32.2917" y="783.0607">void ensureZero(Number value)</text><polygon fill="#FFFF44" points="20.8333,790.686,25,794.8527,20.8333,799.0194,16.6667,794.8527" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="231.25" x="32.2917" y="802.8056">void iterateIndexes(Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,810.4309,25,814.5976,20.8333,818.7642,16.6667,814.5976" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="179.1667" x="32.2917" y="822.5505">void iterations(Count iterations)</text><polygon fill="#FFFF44" points="20.8333,830.1758,25,834.3424,20.8333,838.5091,16.6667,834.3424" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="159.375" x="32.2917" y="842.2953">void iterations(int iterations)</text><polygon fill="#FFFF44" points="20.8333,849.9207,25,854.0873,20.8333,858.254,16.6667,854.0873" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="297.9167" x="32.2917" y="862.0402">String randomAsciiString(int minimum, int maximum)</text><polygon fill="#FFFF44" points="20.8333,869.6655,25,873.8322,20.8333,877.9989,16.6667,873.8322" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="148.9583" x="32.2917" y="881.7851">String randomAsciiString()</text><polygon fill="#FFFF44" points="20.8333,889.4104,25,893.5771,20.8333,897.7437,16.6667,893.5771" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="330.2083" x="32.2917" y="901.5299">void randomIndexes(Repeats, Count, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,909.1553,25,913.3219,20.8333,917.4886,16.6667,913.3219" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="289.5833" x="32.2917" y="921.2748">void randomIndexes(Repeats, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,928.9001,25,933.0668,20.8333,937.2335,16.6667,933.0668" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="409.375" x="32.2917" y="941.0197">void randomIndexes(Repeats, Count, int maximum, Consumer&lt;Integer&gt;)</text><ellipse cx="20.8333" cy="977.7649" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="135.4167" x="32.2917" y="984.6761">boolean isRandomTest()</text><polygon fill="#FFFF44" points="20.8333,992.3014,25,996.4681,20.8333,1000.6348,16.6667,996.4681" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="317.7083" x="32.2917" y="1004.421">boolean ensureClose(Duration given, Duration expected)</text><polygon fill="#FFFF44" points="20.8333,1012.0463,25,1016.213,20.8333,1020.3796,16.6667,1016.213" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="143.75" x="32.2917" y="1024.1659">T ensureNotNull(T object)</text><polygon fill="#FFFF44" points="20.8333,1031.7912,25,1035.9578,20.8333,1040.1245,16.6667,1035.9578" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="121.875" x="32.2917" y="1043.9107">boolean isQuickTest()</text><polygon fill="#FFFF44" points="20.8333,1051.5361,25,1055.7027,20.8333,1059.8694,16.6667,1055.7027" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="114.5833" x="32.2917" y="1063.6556">boolean isWindows()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="316.6667" y1="960.6008" y2="960.6008"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="46.875" x="319.7917" y="964.4104">(checks)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="369.7917" x2="676.0417" y1="960.6008" y2="960.6008"/><polygon fill="#FFFF44" points="20.8333,1095.1925,25,1099.3591,20.8333,1103.5258,16.6667,1099.3591" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="192.7083" x="32.2917" y="1107.312">void ensureEqualArray(T[] a, T[] b)</text><polygon fill="#FFFF44" points="20.8333,1114.9373,25,1119.104,20.8333,1123.2707,16.6667,1119.104" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="215.625" x="32.2917" y="1127.0569">void ensureEqualArray(byte[] a, byte[])</text><polygon fill="#FFFF44" points="20.8333,1134.6822,25,1138.8489,20.8333,1143.0155,16.6667,1138.8489" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="57.2917" x="32.2917" y="1146.8018">int index()</text><polygon fill="#FFFF44" points="20.8333,1154.4271,25,1158.5938,20.8333,1162.7604,16.6667,1158.5938" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="98.9583" x="32.2917" y="1166.5466">Count iterations()</text><polygon fill="#FFFF44" points="20.8333,1174.172,25,1178.3386,20.8333,1182.5053,16.6667,1178.3386" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="101.0417" x="32.2917" y="1186.2915">int randomIndex()</text><polygon fill="#FFFF44" points="20.8333,1193.9168,25,1198.0835,20.8333,1202.2502,16.6667,1198.0835" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="94.7917" x="32.2917" y="1206.0364">void resetIndex()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="308.8542" y1="1083.2367" y2="1083.2367"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="311.9792" y="1087.0463">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="377.6042" x2="676.0417" y1="1083.2367" y2="1083.2367"/><polygon fill="#FFFF44" points="20.8333,1237.5732,25,1241.7399,20.8333,1245.9066,16.6667,1241.7399" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="265.625" x="32.2917" y="1249.6928">T newRandomValueFactory(Source&lt;T&gt; factory)</text><polygon fill="#FFFF44" points="20.8333,1257.3181,25,1261.4848,20.8333,1265.6514,16.6667,1261.4848" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="244.7917" x="32.2917" y="1269.4377">RandomValueFactory randomValueFactory()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="316.1458" y1="1225.6175" y2="1225.6175"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="47.9167" x="319.2708" y="1229.4271">(factory)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="370.3125" x2="676.0417" y1="1225.6175" y2="1225.6175"/><polygon fill="#FFFF44" points="20.8333,1300.9745,25,1305.1412,20.8333,1309.3079,16.6667,1305.1412" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="470.8333" x="32.2917" y="1313.0941">void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="330.7292" y1="1289.0188" y2="1289.0188"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="18.75" x="333.8542" y="1292.8284">(io)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="355.7292" x2="676.0417" y1="1289.0188" y2="1289.0188"/><polygon fill="#FFFF44" points="20.8333,1344.6309,25,1348.7976,20.8333,1352.9643,16.6667,1348.7976" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="141.6667" x="32.2917" y="1356.7505">void loop(Loopable code)</text><polygon fill="#FFFF44" points="20.8333,1364.3758,25,1368.5425,20.8333,1372.7091,16.6667,1368.5425" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="196.875" x="32.2917" y="1376.4954">void loop(int times, Runnable code)</text><polygon fill="#FFFF44" points="20.8333,1384.1207,25,1388.2874,20.8333,1392.454,16.6667,1388.2874" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="296.875" x="32.2917" y="1396.2402">void loop(int minimum, int maximum, Loopable code)</text><polygon fill="#FFFF44" points="20.8333,1403.8656,25,1408.0322,20.8333,1412.1989,16.6667,1408.0322" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="297.9167" x="32.2917" y="1415.9851">void loop(int minimum, int maximum, Runnable code)</text><polygon fill="#FFFF44" points="20.8333,1423.6104,25,1427.7771,20.8333,1431.9438,16.6667,1427.7771" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="142.7083" x="32.2917" y="1435.73">void loop(Runnable code)</text><polygon fill="#FFFF44" points="20.8333,1443.3553,25,1447.522,20.8333,1451.6886,16.6667,1447.522" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="32.2917" y="1455.4749">void loop(int times, Loopable code)</text><polygon fill="#FFFF44" points="20.8333,1463.1002,25,1467.2668,20.8333,1471.4335,16.6667,1467.2668" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="82.2917" x="32.2917" y="1475.2197">int nextIndex()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="312.5" y1="1332.6752" y2="1332.6752"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="55.2083" x="315.625" y="1336.4848">(iteration)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="373.9583" x2="676.0417" y1="1332.6752" y2="1332.6752"/><polygon fill="#FFFF44" points="20.8333,1506.7566,25,1510.9233,20.8333,1515.0899,16.6667,1510.9233" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="200" x="32.2917" y="1518.8761">void iterateBytes(Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1526.5015,25,1530.6681,20.8333,1534.8348,16.6667,1530.6681" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="233.3333" x="32.2917" y="1538.621">void iterateIntegers(Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1546.2463,25,1550.413,20.8333,1554.5797,16.6667,1550.413" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="210.4167" x="32.2917" y="1558.3659">void iterateLongs(Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,1565.9912,25,1570.1579,20.8333,1574.3245,16.6667,1570.1579" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="214.5833" x="32.2917" y="1578.1108">void iterateShorts(Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="20.8333,1585.7361,25,1589.9028,20.8333,1594.0694,16.6667,1589.9028" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="134.375" x="32.2917" y="1597.8556">char randomAsciiChar()</text><polygon fill="#FFFF44" points="20.8333,1605.481,25,1609.6476,20.8333,1613.8143,16.6667,1609.6476" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="377.0833" x="32.2917" y="1617.6005">List&lt;Byte&gt; randomByteList(Repeats, byte minimum, byte maximum)</text><polygon fill="#FFFF44" points="20.8333,1625.2258,25,1629.3925,20.8333,1633.5592,16.6667,1629.3925" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="203.125" x="32.2917" y="1637.3454">List&lt;Byte&gt; randomByteList(Repeats)</text><polygon fill="#FFFF44" points="20.8333,1644.9707,25,1649.1374,20.8333,1653.304,16.6667,1649.1374" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="601.0417" x="32.2917" y="1657.0903">void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1664.7156,25,1668.8822,20.8333,1673.0489,16.6667,1668.8822" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="298.9583" x="32.2917" y="1676.8351">void randomBytes(Repeats, Count, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1684.4604,25,1688.6271,20.8333,1692.7938,16.6667,1688.6271" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="258.3333" x="32.2917" y="1696.58">void randomBytes(Repeats, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1704.2053,25,1708.372,20.8333,1712.5387,16.6667,1708.372" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="560.4167" x="32.2917" y="1716.3249">void randomBytes(Repeats, byte minimum, byte maximum, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1723.9502,25,1728.1169,20.8333,1732.2835,16.6667,1728.1169" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="386.4583" x="32.2917" y="1736.0697">void randomBytes(Repeats, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="20.8333,1743.6951,25,1747.8617,20.8333,1752.0284,16.6667,1747.8617" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="378.125" x="32.2917" y="1755.8146">int randomInt(int minimum, int maximum, Predicate&lt;Integer&gt; filter)</text><polygon fill="#FFFF44" points="20.8333,1763.4399,25,1767.6066,20.8333,1771.7733,16.6667,1767.6066" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="233.3333" x="32.2917" y="1775.5595">int randomInt(int minimum, int maximum)</text><polygon fill="#FFFF44" points="20.8333,1783.1848,25,1787.3515,20.8333,1791.5181,16.6667,1787.3515" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="84.375" x="32.2917" y="1795.3044">int randomInt()</text><polygon fill="#FFFF44" points="20.8333,1802.9297,25,1807.0964,20.8333,1811.263,16.6667,1807.0964" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="366.6667" x="32.2917" y="1815.0492">List&lt;Integer&gt; randomIntList(Repeats, int minimum, int maximum)</text><polygon fill="#FFFF44" points="20.8333,1822.6746,25,1826.8412,20.8333,1831.0079,16.6667,1826.8412" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="211.4583" x="32.2917" y="1834.7941">List&lt;Integer&gt; randomIntList(Repeats)</text><polygon fill="#FFFF44" points="20.8333,1842.4194,25,1846.5861,20.8333,1850.7528,16.6667,1846.5861" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="407.2917" x="32.2917" y="1854.539">List&lt;Integer&gt; randomIntList(Repeats, Count, int minimum, int maximum)</text><polygon fill="#FFFF44" points="20.8333,1862.1643,25,1866.331,20.8333,1870.4976,16.6667,1866.331" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="566.6667" x="32.2917" y="1874.2839">void randomInts(Repeats, int minimum, int maximum, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1881.9092,25,1886.0758,20.8333,1890.2425,16.6667,1886.0758" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="266.6667" x="32.2917" y="1894.0287">void randomInts(Repeats, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1901.6541,25,1905.8207,20.8333,1909.9874,16.6667,1905.8207" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="307.2917" x="32.2917" y="1913.7736">void randomInts(Repeats, Count, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1921.3989,25,1925.5656,20.8333,1929.7323,16.6667,1925.5656" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="607.2917" x="32.2917" y="1933.5185">void randomInts(Repeats, Count, int minimum, int maximum, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1941.1438,25,1945.3105,20.8333,1949.4771,16.6667,1945.3105" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="411.4583" x="32.2917" y="1953.2633">void randomInts(Repeats, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="20.8333,1960.8887,25,1965.0553,20.8333,1969.222,16.6667,1965.0553" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="213.5417" x="32.2917" y="1973.0082">List&lt;Long&gt; randomLongList(Repeats)</text><polygon fill="#FFFF44" points="20.8333,1980.6335,25,1984.8002,20.8333,1988.9669,16.6667,1984.8002" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="389.5833" x="32.2917" y="1992.7531">List&lt;Long&gt; randomLongList(Repeats, long minimum, long maximum)</text><polygon fill="#FFFF44" points="20.8333,2000.3784,25,2004.5451,20.8333,2008.7118,16.6667,2004.5451" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="309.375" x="32.2917" y="2012.498">void randomLongs(Repeats, Count, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,2020.1233,25,2024.29,20.8333,2028.4566,16.6667,2024.29" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="578.125" x="32.2917" y="2032.2428">void randomLongs(Repeats, long minimum, long maximum, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,2039.8682,25,2044.0348,20.8333,2048.2015,16.6667,2044.0348" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="268.75" x="32.2917" y="2051.9877">void randomLongs(Repeats, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,2059.613,25,2063.7797,20.8333,2067.9464,16.6667,2063.7797" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="618.75" x="32.2917" y="2071.7326">void randomLongs(Repeats, Count, long minimum, long maximum, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,2079.3579,25,2083.5246,20.8333,2087.6912,16.6667,2083.5246" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="402.0833" x="32.2917" y="2091.4775">void randomLongs(Repeats, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="20.8333,2099.1028,25,2103.2694,20.8333,2107.4361,16.6667,2103.2694" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="217.7083" x="32.2917" y="2111.2223">List&lt;Short&gt; randomShortList(Repeats)</text><polygon fill="#FFFF44" points="20.8333,2118.8477,25,2123.0143,20.8333,2127.181,16.6667,2123.0143" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="404.1667" x="32.2917" y="2130.9672">List&lt;Short&gt; randomShortList(Repeats, short minimum, short maximum)</text><polygon fill="#FFFF44" points="20.8333,2138.5925,25,2142.7592,20.8333,2146.9259,16.6667,2142.7592" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="272.9167" x="32.2917" y="2150.7121">void randomShorts(Repeats, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="20.8333,2158.3374,25,2162.5041,20.8333,2166.6707,16.6667,2162.5041" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="313.5417" x="32.2917" y="2170.4569">void randomShorts(Repeats, Count, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="20.8333,2178.0823,25,2182.2489,20.8333,2186.4156,16.6667,2182.2489" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="635.4167" x="32.2917" y="2190.2018">void randomShorts(Repeats, Count, short minimum, short maximum, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="20.8333,2197.8271,25,2201.9938,20.8333,2206.1605,16.6667,2201.9938" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="408.3333" x="32.2917" y="2209.9467">void randomShorts(Repeats, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="20.8333,2217.572,25,2221.7387,20.8333,2225.9054,16.6667,2221.7387" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="594.7917" x="32.2917" y="2229.6916">void randomShorts(Repeats, short minimum, short maximum, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="311.4583" y1="1494.8008" y2="1494.8008"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="57.2917" x="314.5833" y="1498.6104">(primitive)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="375" x2="676.0417" y1="1494.8008" y2="1494.8008"/><polygon fill="#FFFF44" points="20.8333,2261.2284,25,2265.3951,20.8333,2269.5618,16.6667,2265.3951" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="253.125" x="32.2917" y="2273.348">void fail(String message, Object... arguments)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="10.4167" x2="318.75" y1="2249.2727" y2="2249.2727"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="42.7083" x="321.875" y="2253.0823">(status)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="367.7083" x2="676.0417" y1="2249.2727" y2="2249.2727"/><!--MD5=[79d378210367c0c6ec62ef762ddfbd1b]
class Project--><rect fill="#282828" height="48.055" id="Project" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="81.25" x="647.3958" y="121.4111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="81.25" x="647.3958" y="121.4111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="81.25" x="647.3958" y="144.4661"/><rect fill="none" height="48.055" id="Project" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="81.25" x="647.3958" y="121.4111"/><ellipse cx="661.9792" cy="137.1053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M663.8896,141.5304 Q663.4623,141.7501 662.9924,141.8599 Q662.5224,141.9698 662.0036,141.9698 Q660.1603,141.9698 659.1899,140.7552 Q658.2194,139.5406 658.2194,137.2457 Q658.2194,134.9447 659.1899,133.7301 Q660.1603,132.5155 662.0036,132.5155 Q662.5224,132.5155 662.9985,132.6253 Q663.4745,132.7352 663.8896,132.9549 L663.8896,134.9569 Q663.4257,134.5296 662.9893,134.3313 Q662.5529,134.1329 662.089,134.1329 Q661.1003,134.1329 660.5967,134.9172 Q660.0932,135.7015 660.0932,137.2457 Q660.0932,138.7838 660.5967,139.5681 Q661.1003,140.3524 662.089,140.3524 Q662.5529,140.3524 662.9893,140.154 Q663.4257,139.9556 663.8896,139.5284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="43.75" x="678.6458" y="141.8294">Project</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="648.4375" x2="727.6042" y1="152.7995" y2="152.7995"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="648.4375" x2="727.6042" y1="161.1328" y2="161.1328"/><!--MD5=[dc64f663999cae2a8978cf17123f8a0b]
class UnitTestProject--><rect codeLine="112" fill="#282828" height="111.4563" id="UnitTestProject" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="146.875" x="614.5833" y="271.4111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="146.875" x="614.5833" y="271.4111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="146.875" x="614.5833" y="294.4661"/><rect codeLine="112" fill="none" height="111.4563" id="UnitTestProject" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="146.875" x="614.5833" y="271.4111"/><ellipse cx="633.8542" cy="287.1053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M635.7646,291.5304 Q635.3373,291.7501 634.8674,291.8599 Q634.3974,291.9698 633.8786,291.9698 Q632.0353,291.9698 631.0649,290.7552 Q630.0944,289.5406 630.0944,287.2457 Q630.0944,284.9447 631.0649,283.7301 Q632.0353,282.5155 633.8786,282.5155 Q634.3974,282.5155 634.8735,282.6253 Q635.3495,282.7352 635.7646,282.9549 L635.7646,284.9569 Q635.3007,284.5296 634.8643,284.3313 Q634.4279,284.1329 633.964,284.1329 Q632.9753,284.1329 632.4717,284.9172 Q631.9682,285.7015 631.9682,287.2457 Q631.9682,288.7838 632.4717,289.5681 Q632.9753,290.3524 633.964,290.3524 Q634.4279,290.3524 634.8643,290.154 Q635.3007,289.9556 635.7646,289.5284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="98.9583" x="651.5625" y="291.8294">UnitTestProject</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="615.625" x2="760.4167" y1="302.7995" y2="302.7995"/><polygon fill="#FFFF44" points="626.0417,332.961,630.2083,337.1277,626.0417,341.2944,621.875,337.1277" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="93.75" x="637.5" y="345.0806">UnitTestProject()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="615.625" x2="644.2708" y1="321.0052" y2="321.0052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="647.3958" y="324.8149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="731.7708" x2="760.4167" y1="321.0052" y2="321.0052"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="615.625" x2="760.4167" y1="354.7892" y2="354.7892"/><ellipse cx="626.0417" cy="366.2476" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="114.5833" x="637.5" y="373.1588">UnitTestProject get()</text><!--MD5=[0a1b7af288e15ace6ac643bcac805833]
class UnitTestWatcher--><rect codeLine="122" fill="#282828" height="83.3781" id="UnitTestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="179.1667" x="398.4375" y="285.4736"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="179.1667" x="398.4375" y="285.4736"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="179.1667" x="398.4375" y="308.5286"/><rect codeLine="122" fill="none" height="83.3781" id="UnitTestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="179.1667" x="398.4375" y="285.4736"/><ellipse cx="428.9583" cy="301.1678" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M430.8687,305.5929 Q430.4415,305.8126 429.9715,305.9224 Q429.5015,306.0323 428.9827,306.0323 Q427.1395,306.0323 426.169,304.8177 Q425.1986,303.6031 425.1986,301.3082 Q425.1986,299.0072 426.169,297.7926 Q427.1395,296.578 428.9827,296.578 Q429.5015,296.578 429.9776,296.6878 Q430.4537,296.7977 430.8687,297.0174 L430.8687,299.0194 Q430.4049,298.5921 429.9685,298.3938 Q429.5321,298.1954 429.0682,298.1954 Q428.0794,298.1954 427.5759,298.9797 Q427.0723,299.764 427.0723,301.3082 Q427.0723,302.8463 427.5759,303.6306 Q428.0794,304.4149 429.0682,304.4149 Q429.5321,304.4149 429.9685,304.2165 Q430.4049,304.0181 430.8687,303.5909 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="106.25" x="449.1667" y="305.8919">UnitTestWatcher</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="399.4792" x2="576.5625" y1="316.862" y2="316.862"/><ellipse cx="409.8958" cy="352.2319" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="146.875" x="421.3542" y="359.1431">UnitTestWatcher(UnitTest)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="399.4792" x2="444.2708" y1="335.0677" y2="335.0677"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="447.3958" y="338.8774">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="531.7708" x2="576.5625" y1="335.0677" y2="335.0677"/><!--MD5=[d6b3a6e0532d2fae8e8d79d7367f1965]
reverse link TestWatcher to UnitTest--><path codeLine="14" d="M385.9167,190.1715 C383.7604,214.1507 381.2604,244.3903 379.6875,271.4111 C375.9688,335.3799 372.5938,401.4528 369.5521,467.9945 " fill="none" id="TestWatcher-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="378.6563,189.4945,387.8333,169.4215,393.1771,190.8382,378.6563,189.4945" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[863c56546d36886e13c506b8229b01f0]
reverse link Listener to UnitTest--><path codeLine="15" d="M247.4583,372.4632 C249.75,396.4424 252.875,429.1507 256.6042,468.1715 " fill="none" id="Listener-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="240.1771,372.932,245.4583,351.5049,254.6979,371.5465,240.1771,372.932" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[99270df24ca43f779150328e3699accb]
link UnitTest to JUnitFailureReporter--><path codeLine="16" d="M217.3438,2282.9111 C216.5521,2293.3695 215.8125,2303.7757 215.1042,2314.1195 C214,2330.307 214.6458,2348.432 215.625,2363.0361 " fill="none" id="UnitTest-to-JUnitFailureReporter" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#545454" points="216,2368.2445,219.4881,2358.5964,215.6289,2363.0494,211.176,2359.1902,216,2368.2445" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="201.0417" x="219.2708" y="2330.3711">reports validation failures with</text><!--MD5=[6e51e05319cfef764cb163df1beb41b3]
link UnitTest to RandomValueFactory--><path codeLine="17" d="M455.8438,2283.109 C459.9896,2316.5049 463.3646,2343.6403 465.6875,2362.3695 " fill="none" id="UnitTest-to-RandomValueFactory" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#545454" points="466.375,2367.9111,469.3571,2358.0949,465.7345,2362.7423,461.087,2359.1197,466.375,2367.9111" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="30.2083" x="465.1042" y="2330.3711">uses</text><!--MD5=[4fbb26e5015f83a776e85bea30a75e0c]
reverse link Project to UnitTestProject--><path codeLine="111" d="M688.0208,190.6924 C688.0208,215.0674 688.0208,245.5257 688.0208,271.3799 " fill="none" id="Project-backto-UnitTestProject" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="680.7292,190.3695,688.0208,169.5361,695.3125,190.3695,680.7292,190.3695" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[e61d0cd2b87cd82b1ebef6380084820f]
reverse link TestWatcher to UnitTestWatcher--><path codeLine="120" d="M412.7604,187.984 C428.6979,217.2236 449.9167,256.1611 465.7604,285.2445 " fill="none" id="TestWatcher-backto-UnitTestWatcher" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="406.2708,191.3174,402.7083,169.5361,419.0729,184.3382,406.2708,191.3174" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[652a750b4ee846095a9b28266edb574e]
reverse link UnitTestWatcher to UnitTest--><path codeLine="121" d="M480.5,382.5361 C477.3542,405.234 473.3438,434.234 468.6771,467.9424 " fill="none" id="UnitTestWatcher-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#333333" points="482.3854,368.8799,477.4003,374.4988,480.6696,381.2616,485.6547,375.6427,482.3854,368.8799" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="144.7917" x="480.7292" y="430.3711">watches for failures in</text><!--MD5=[bfcb30ffbf137682517fe18fe51e4574]
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.test"
    
    interface Listener
    
    enum UnitTest.Repeats
    {
        ALLOW_REPEATS
        NO_REPEATS
    }
    
    TestWatcher <|- - UnitTest
    Listener <|- - UnitTest
    UnitTest - -> JUnitFailureReporter : "reports validation failures with"
    UnitTest - -> RandomValueFactory : "uses"
    abstract class UnitTest
    {
        - -
        +void testBeforeUnitTest()
        +void testSetup()
        #boolean ensure(boolean condition)
        #void ensure(boolean condition, String message, Object... arguments)
        #void ensureBetween(double actual, double low, double high)
        #void ensureEqual(T given, T expected)
        #void ensureEqual(T given, T expected, String message, Object... arguments)
        #void ensureFalse(boolean condition)
        #void ensureFalse(boolean condition, String message, Object... arguments)
        #void ensureNotEqual(T a, T b)
        #void ensureNull(Object)
        #void ensureThrows(Runnable code)
        #void ensureWithin(double expected, double actual, double maximumDifference)
        #void ensureZero(Number value)
        #void iterateIndexes(Consumer<Integer>)
        #void iterations(Count iterations)
        #void iterations(int iterations)
        #String randomAsciiString(int minimum, int maximum)
        #String randomAsciiString()
        #void randomIndexes(Repeats, Count, Consumer<Integer>)
        #void randomIndexes(Repeats, Consumer<Integer>)
        #void randomIndexes(Repeats, Count, int maximum, Consumer<Integer>)
        - -(checks)- -
        +boolean isRandomTest()
        #boolean ensureClose(Duration given, Duration expected)
        #T ensureNotNull(T object)
        #boolean isQuickTest()
        #boolean isWindows()
        - -(collection)- -
        #void ensureEqualArray(T[] a, T[] b)
        #void ensureEqualArray(byte[] a, byte[])
        #int index()
        #Count iterations()
        #int randomIndex()
        #void resetIndex()
        - -(factory)- -
        #T newRandomValueFactory(Source<T> factory)
        #RandomValueFactory randomValueFactory()
        - -(io)- -
        #void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)
        - -(iteration)- -
        #void loop(Loopable code)
        #void loop(int times, Runnable code)
        #void loop(int minimum, int maximum, Loopable code)
        #void loop(int minimum, int maximum, Runnable code)
        #void loop(Runnable code)
        #void loop(int times, Loopable code)
        #int nextIndex()
        - -(primitive)- -
        #void iterateBytes(Consumer<Byte>)
        #void iterateIntegers(Consumer<Integer>)
        #void iterateLongs(Consumer<Long>)
        #void iterateShorts(Consumer<Short>)
        #char randomAsciiChar()
        #List<Byte> randomByteList(Repeats, byte minimum, byte maximum)
        #List<Byte> randomByteList(Repeats)
        #void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Count, Consumer<Byte>)
        #void randomBytes(Repeats, Consumer<Byte>)
        #void randomBytes(Repeats, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Predicate<Byte> filter, Consumer<Byte>)
        #int randomInt(int minimum, int maximum, Predicate<Integer> filter)
        #int randomInt(int minimum, int maximum)
        #int randomInt()
        #List<Integer> randomIntList(Repeats, int minimum, int maximum)
        #List<Integer> randomIntList(Repeats)
        #List<Integer> randomIntList(Repeats, Count, int minimum, int maximum)
        #void randomInts(Repeats, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Consumer<Integer>)
        #void randomInts(Repeats, Count, Consumer<Integer>)
        #void randomInts(Repeats, Count, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Predicate<Integer> filter, Consumer<Integer>)
        #List<Long> randomLongList(Repeats)
        #List<Long> randomLongList(Repeats, long minimum, long maximum)
        #void randomLongs(Repeats, Count, Consumer<Long>)
        #void randomLongs(Repeats, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Consumer<Long>)
        #void randomLongs(Repeats, Count, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Predicate<Long> filter, Consumer<Long>)
        #List<Short> randomShortList(Repeats)
        #List<Short> randomShortList(Repeats, short minimum, short maximum)
        #void randomShorts(Repeats, Consumer<Short>)
        #void randomShorts(Repeats, Count, Consumer<Short>)
        #void randomShorts(Repeats, Count, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        - -(status)- -
        #void fail(String message, Object... arguments)
    }
    
    Project <|- - UnitTestProject
    class UnitTestProject
    {
        - -(constructors)- -
        #UnitTestProject()
        - -
        +UnitTestProject get()
    }
    
    TestWatcher <|- - UnitTestWatcher
    UnitTestWatcher o- - UnitTest : "watches for failures in"
    class UnitTestWatcher
    {
        - -(constructors)- -
        +UnitTestWatcher(UnitTest)
    }
    
@enduml

@startuml









skinparam backgroundColor #333333






skinparam  {
    defaultFontName   "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
    defaultFontSize   12
    defaultTextAlignment left
    shadowing false
    RoundCorner 10
    TitleFontSize 18
}

skinparam defaultFontName       "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
skinparam defaultFontSize       12
skinparam dpi                   100
skinparam shadowing             false
skinparam roundcorner           16
skinparam ParticipantPadding    40
skinparam BoxPadding            40
skinparam Padding               3
skinparam ArrowColor            #545454
skinparam stereotype {
    CBackgroundColor #0066cf
    CBorderColor #0086ef
    ABackgroundColor #C8Ac00
    ABorderColor #D8Bc00
    IBackgroundColor #008400
    IBorderColor #239c23
    EBackgroundColor #cf6300
    EBorderColor #ef8300
    NBackgroundColor #3380b9
    NBorderColor #004d86
}
skinparam title {
	FontColor	                 #c0c0c0
 	BorderColor                  #545454
	FontSize	    	         20
	BorderRoundCorner            16
	BorderThickness 	         1
	BackgroundColor              #48494b
}


skinparam legend {
	BackgroundColor #303030
	BorderColor #404040
	FontColor #a0a0a0
}

	skinparam swimlane {
	BorderColor #5e5e5e
	BorderThickness 2
	TitleBackgroundColor  #6d6d6d-#484848
	TitleFontColor #303030
}

skinparam activity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BarColor #00FF00
	StartColor #0060a8
	EndColor #0060a8
	DiamondBackgroundColor #6d6d6d-#3a3a3a
  	DiamondBorderColor #3a3a3a
  	DiamondFontColor #fefefe
}


skinparam participant {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	ParticipantBorderThickness 2
}


skinparam actor {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam arrow {
	Thickness 1.5
	Color #545454
	FontColor #a0a0a0
    FontStyle bold
    MessageAlignment center
}



skinparam sequence {
	BorderColor #303030
	TitleFontColor #303030
	BackgroundColor #333333
	StartColor #303030
	EndColor #303030
	BoxBackgroundColor #333333
	BoxBorderColor #484848
	BoxFontColor #484848
	LifeLineBorderColor #484848
	LifeLineBorderThickness 2
	LifeLineBackgroundColor #3a3a3a
	GroupBorderColor #484848
	GroupFontColor #484848
	GroupHeaderFontColor #0060a8
	GroupBackgroundColor #484848
	GroupHeaderBackgroundColor #333333
	DividerBackgroundColor #484848
    DividerBorderColor #484848
    DividerBorderThickness 2
    DividerFontColor #D8Bc00
	ReferenceBackgroundColor #333333
	ReferenceBorderColor #484848
	ReferenceFontColor #fefefe
	ReferenceHeaderBackgroundColor #484848
}


skinparam partition {
	BorderColor #303030
	FontColor #333333
	BackgroundColor #333333
}


skinparam collections {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam control {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam entity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam boundary {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam agent {
	BackgroundColor #ff8000
	BorderColor #ff9933
	FontColor #484848
}


skinparam note {
	BorderThickness 1
	BackgroundColor #1b1b1a
	BorderColor #5e5e5e
	FontSize 11
	FontColor #a0a0a0
}


skinparam artifact {
	BorderThickness 10
	BorderColor #5e5e5e
	BackgroundColor #1b1b1a
	FontColor #D8Bc00
}


skinparam component {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam interface {
	BackgroundColor  #008400
	BorderColor  #007F00
	FontColor #484848
}


skinparam storage {
	BackgroundColor #ff8000
  	BorderColor #cc6600
	FontColor #222222
}


skinparam node {
	BackgroundColor #333333
	BorderColor #333333
	FontColor #C8Ac00
}


skinparam cloud {
	BackgroundColor #484848-black
	BorderColor #484848
	FontColor #D8Bc00
}


skinparam database {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor  #333333
}


skinparam class {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	HeaderBackgroundColor #1b1b1a
    BackgroundColor #282828
    BorderColor #5e5e5e
 	StereotypeFontColor #a0a0a0
    StereotypeFontStyle bold
	BorderThickness 1
	AttributeFontColor #D8Bc00
	AttributeFontSize 11
    FontColor #D8Bc00
    FontStyle bold
}


skinparam object {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StereotypeFontColor #484848
	BorderThickness 1
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam usecase {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam rectangle {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam package {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
}


skinparam folder {
	BackgroundColor #6d6d6d
  	BorderColor #ff8000
	FontColor #ff8000
	BorderThickness 2
}


skinparam frame {
	BackgroundColor #6d6d6d
  	BorderColor #0060a8
	FontColor #0060a8
	BorderThickness 2
}


skinparam state {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StartColor #0060a8
	EndColor #0060a8
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam queue {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam card {
	BackgroundColor #0060a8
	BorderColor #004d86
	FontColor $INFO_TEXT
}


skinparam file {
	BackgroundColor #6d6d6d-#484848
	BorderColor #0060a8
	FontColor #fefefe
}


skinparam stack {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}

    
    title "com.telenav.kivakit.test"
    
    interface Listener
    
    enum UnitTest.Repeats
    {
        ALLOW_REPEATS
        NO_REPEATS
    }
    
    TestWatcher <|- - UnitTest
    Listener <|- - UnitTest
    UnitTest - -> JUnitFailureReporter : "reports validation failures with"
    UnitTest - -> RandomValueFactory : "uses"
    abstract class UnitTest
    {
        - -
        +void testBeforeUnitTest()
        +void testSetup()
        #boolean ensure(boolean condition)
        #void ensure(boolean condition, String message, Object... arguments)
        #void ensureBetween(double actual, double low, double high)
        #void ensureEqual(T given, T expected)
        #void ensureEqual(T given, T expected, String message, Object... arguments)
        #void ensureFalse(boolean condition)
        #void ensureFalse(boolean condition, String message, Object... arguments)
        #void ensureNotEqual(T a, T b)
        #void ensureNull(Object)
        #void ensureThrows(Runnable code)
        #void ensureWithin(double expected, double actual, double maximumDifference)
        #void ensureZero(Number value)
        #void iterateIndexes(Consumer<Integer>)
        #void iterations(Count iterations)
        #void iterations(int iterations)
        #String randomAsciiString(int minimum, int maximum)
        #String randomAsciiString()
        #void randomIndexes(Repeats, Count, Consumer<Integer>)
        #void randomIndexes(Repeats, Consumer<Integer>)
        #void randomIndexes(Repeats, Count, int maximum, Consumer<Integer>)
        - -(checks)- -
        +boolean isRandomTest()
        #boolean ensureClose(Duration given, Duration expected)
        #T ensureNotNull(T object)
        #boolean isQuickTest()
        #boolean isWindows()
        - -(collection)- -
        #void ensureEqualArray(T[] a, T[] b)
        #void ensureEqualArray(byte[] a, byte[])
        #int index()
        #Count iterations()
        #int randomIndex()
        #void resetIndex()
        - -(factory)- -
        #T newRandomValueFactory(Source<T> factory)
        #RandomValueFactory randomValueFactory()
        - -(io)- -
        #void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)
        - -(iteration)- -
        #void loop(Loopable code)
        #void loop(int times, Runnable code)
        #void loop(int minimum, int maximum, Loopable code)
        #void loop(int minimum, int maximum, Runnable code)
        #void loop(Runnable code)
        #void loop(int times, Loopable code)
        #int nextIndex()
        - -(primitive)- -
        #void iterateBytes(Consumer<Byte>)
        #void iterateIntegers(Consumer<Integer>)
        #void iterateLongs(Consumer<Long>)
        #void iterateShorts(Consumer<Short>)
        #char randomAsciiChar()
        #List<Byte> randomByteList(Repeats, byte minimum, byte maximum)
        #List<Byte> randomByteList(Repeats)
        #void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Count, Consumer<Byte>)
        #void randomBytes(Repeats, Consumer<Byte>)
        #void randomBytes(Repeats, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Predicate<Byte> filter, Consumer<Byte>)
        #int randomInt(int minimum, int maximum, Predicate<Integer> filter)
        #int randomInt(int minimum, int maximum)
        #int randomInt()
        #List<Integer> randomIntList(Repeats, int minimum, int maximum)
        #List<Integer> randomIntList(Repeats)
        #List<Integer> randomIntList(Repeats, Count, int minimum, int maximum)
        #void randomInts(Repeats, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Consumer<Integer>)
        #void randomInts(Repeats, Count, Consumer<Integer>)
        #void randomInts(Repeats, Count, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Predicate<Integer> filter, Consumer<Integer>)
        #List<Long> randomLongList(Repeats)
        #List<Long> randomLongList(Repeats, long minimum, long maximum)
        #void randomLongs(Repeats, Count, Consumer<Long>)
        #void randomLongs(Repeats, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Consumer<Long>)
        #void randomLongs(Repeats, Count, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Predicate<Long> filter, Consumer<Long>)
        #List<Short> randomShortList(Repeats)
        #List<Short> randomShortList(Repeats, short minimum, short maximum)
        #void randomShorts(Repeats, Consumer<Short>)
        #void randomShorts(Repeats, Count, Consumer<Short>)
        #void randomShorts(Repeats, Count, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        - -(status)- -
        #void fail(String message, Object... arguments)
    }
    
    Project <|- - UnitTestProject
    class UnitTestProject
    {
        - -(constructors)- -
        #UnitTestProject()
        - -
        +UnitTestProject get()
    }
    
    TestWatcher <|- - UnitTestWatcher
    UnitTestWatcher o- - UnitTest : "watches for failures in"
    class UnitTestWatcher
    {
        - -(constructors)- -
        +UnitTestWatcher(UnitTest)
    }
    
@enduml

PlantUML version 1.2021.01(Tue Feb 02 00:55:08 MST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>