@startuml

    !include lexakai.theme
    
    title "Messaging"
    
    interface Named
    
    Level <|-- Importance
    class Importance
    {
        --
        +Importance importance(double level)
        +Importance importance(Class<? extends Message> type)
        --(lookup)--
        +Importance register(Class<? extends Message> low, Class<? extends Message> high)
    }
    
    interface Named
    interface Transmittable
    interface Triaged
    Transmittable <|-- Message
    Triaged <|-- Message
    Named <|-- Message
    Message --> Importance : "message importance"
    Message --> Message.OperationStatus : "operation status"
    Message --> Severity : "message severity"
    Message --> Message.Status : "message status"
    interface Message
    {
        --
        +Throwable cause()
        +CodeContext context()
        +String description()
        +String escape(String text)
        +String format(String message, Object... arguments)
        +String formatted(MessageFormatter.Format)
        +String formatted()
        +Importance importance()
        +void println(String message, Object... arguments)
        +String text()
        +^Severity severity()
        --(command line parsing)--
        +Object[] arguments()
        --(conversion)--
        +RuntimeException asException()
        --(messaging)--
        +OperationStatus operationStatus()
        +Message parseMessageName(Listener, String name)
        +StackTrace stackTrace()
        +Status status()
        --(time)--
        +Time created()
        +Frequency maximumFrequency()
    }
    
    interface Filter
    Filter <|-- MessageFilter
    interface MessageFilter
    {
        --(filtering)--
        +boolean accepts(Message)
    }
    
    class MessageFormatter
    {
        --
        +String format(String message, Object... arguments)
        --(collection)--
        +String formatArray(String message, Object[] arguments)
    }
    
    enum Message.OperationStatus
    {
        FAILED
        HALTED
        NOT_APPLICABLE
        RUNNING
        STARTED
        SUCCEEDED
    }
    
    Result --> Message : "failure reason"
    class Result<T>
    {
        --
        +boolean failed()
        +T get()
        +boolean has()
        +Result<T> set(T result)
        +Result<T> with(Result<T> that, BiFunction<T,T,T> combiner)
        --(functional)--
        +Result<T> failed(Result<?>, String message, Object... arguments)
        +Result<T> failed(Throwable cause, String message, Object... arguments)
        +Result<T> failed(String message, Object... arguments)
        +Result<T> failed(Message)
        +Result<T> succeeded(T value)
        --(messaging)--
        +Result<T> problem(String message, Object... arguments)
        +Result<T> problem(Throwable cause, String message, Object... arguments)
        +Message why()
        --(status)--
        +boolean succeeded()
    }
    
    Level <|-- Severity
    Named <|-- Severity
    class Severity
    {
        --(constructors)--
        +Severity(String, double)
        --(parsing)--
        +Severity parseSeverity(Listener, String name)
    }
    
    enum Message.Status
    {
        COMPLETED
        FAILED
        NOT_APPLICABLE
        PROBLEM
        RESULT_COMPROMISED
        RESULT_INCOMPLETE
        SUCCEEDED
    }
    
    interface Transmittable
    {
    }
    
    Transmitter --> Transmittable : "transmits"
    interface Transmitter
    {
        --(checks)--
        +boolean isTransmitting()
        --(functional)--
        +T withoutTransmitting(Code<T>)
        --(messaging)--
        +void onTransmit(Transmittable message)
        +M transmit(M message)
    }
    
    Triaged --> Severity : "has"
    interface Triaged
    {
        --
        +Severity severity()
    }
    
@enduml

