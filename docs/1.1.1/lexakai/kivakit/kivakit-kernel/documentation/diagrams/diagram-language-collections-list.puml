@startuml

    !include lexakai.theme
    
    title "Language - Collections - Lists"
    
    abstract BaseList
    
    class Arrays
    {
        --
        +long[] reverse(long[] elements)
        +int[] reverse(int[] elements)
        +void reverseRange(long[] array, int fromIndex, int toIndex)
    }
    
    abstract class BaseList<Element>
    {
        --(constructors)--
        #BaseList()
        #BaseList(List<Element>)
        #BaseList(Maximum)
        #BaseList(Maximum, List<Element>)
        --
        +String bulleted()
        +String bulleted(int indent)
        +long[] quantized()
        +void reverse()
        #void onOutOfRoom()
        #String separator()
        --(checks)--
        +boolean endsWith(BaseList<Element> that)
        +boolean startsWith(BaseList<Element> that)
        --(collection)--
        +boolean addAll(Element[] elements)
        +boolean addIfNotNull(Element)
        +BaseList<Element> appendAll(Element[] elements)
        +Element[] asArray(Class<Element> type)
        +StringList asStringList()
        +BaseList<Element> copy()
        +BaseList<Element> first(int count)
        +BaseList<Element> first(Count)
        +BaseList<Element> leftOf(int index)
        +BaseList<Target> mapped(Function<Element,Target> mapper)
        +BaseList<Element> matching(Matcher<Element>)
        +Maximum maximumSize()
        +BaseList<Element> maybeReversed(boolean reverse)
        +Element pop()
        +void push(Element)
        +Element removeLast()
        +BaseList<Element> reversed()
        +BaseList<Element> rightOf(int index)
        +BaseList<Element> sorted(Comparator<Element>)
        +BaseList<Element> sorted()
        +BaseList<Element> uniqued()
        +BaseList<Element> without(Matcher<Element>)
        #boolean checkSizeIncrease(int increase)
        --(lifecycle)--
        +String join()
    }
    
    class LinkedObjectList<T>
    {
        --
        +boolean replace(T object, T replacement)
        --(collection)--
        +Iterator<T> matching(Matcher<T>)
        +Collection<T> remove(Matcher<T>)
    }
    
    class Lists
    {
        --(collection)--
        +ArrayList<T> arrayList(T... objects)
    }
    
    BaseList <|-- ObjectList
    class ObjectList<Element>
    {
        --(constructors)--
        +ObjectList()
        +ObjectList(List<Element>)
        +ObjectList(Maximum)
        --(collection)--
        +StringList asStringList(StringConverter<Element>)
        +ObjectList<T> emptyList()
        +ObjectList<T> objectList(Iterable<T> values)
        +ObjectList<T> objectList(Maximum maximumSize, T... objects)
        +ObjectList<T> objectList(Iterable<Quantizable> values, LongMapFactory<T>)
        +ObjectList<T> objectList(T... objects)
        +ObjectList<T> objectListFromArray(T[] objects)
        +ObjectList<T> objectListFromInts(IntMapFactory<T>, int... values)
        +ObjectList<T> objectListFromLongs(LongMapFactory<T>, long... values)
        +ObjectList<ObjectList<Element>> partition(Count partitions)
        +ObjectList<T> with(T value)
    }
    
@enduml

