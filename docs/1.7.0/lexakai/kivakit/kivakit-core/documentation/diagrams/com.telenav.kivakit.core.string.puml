
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.core.string"
    
    interface Sized
    
    class Align
    {
        --
        +String center(String text, int length, char)
        +String left(String, int length, char)
        +String right(String text, int length, char)
    }
    
    interface Stringable
    Stringable <|-- AsIndentedString
    interface AsIndentedString
    {
        --(conversion)--
        +String asString(Format)
        +String asString()
        +AsStringIndenter asString(Format, AsStringIndenter)
    }
    
    interface Stringable
    Stringable <|-- AsString
    AsString --> Stringable.Format : "formats with"
    interface AsString
    {
        --(conversion)--
        +String asString(Format)
    }
    
    class AsStringIndenter
    {
        --(constructors)--
        +AsStringIndenter(Stringable.Format)
        +AsStringIndenter(Stringable.Format, int)
        +AsStringIndenter(Stringable.Format, int, PropertyFilter)
        --
        +boolean haveVisited(Object)
        +int indentationLevel()
        +void visited(Object)
        --(checks)--
        +boolean canExplore(Object value)
        +boolean isLeaf(Object)
        --(collection)--
        +void add(String line, Object... arguments)
        --(conversion)--
        +AsStringIndenter asString(Object)
        +AsStringIndenter bracketed(Iterable<?>, Consumer<Object>)
        +AsStringIndenter indented(String label, Runnable code)
        +AsStringIndenter indented(Runnable code)
        +AsStringIndenter label(String label)
        +AsStringIndenter labeled(String label, Object)
        +AsStringIndenter levels(Maximum levels)
        +AsStringIndenter pruneAt(Class<?> leaf)
        +AsStringIndenter text(String label)
    }
    
    class AsciiArt
    {
        --
        +String banner(String message)
        +String bottomLine(int width)
        +String bottomLine()
        +String bottomLine(String message, Object... arguments)
        +String bottomLine(int extraWidth, String message, Object... arguments)
        +String box(String message, Object... arguments)
        +String box(String message, char horizontal, char vertical)
        +String bullet()
        +String bulleted(Collection<?> values, String bullet)
        +String bulleted(Collection<?> values)
        +String bulleted(int indent, Collection<?> values)
        +String bulleted(int indent, Collection<?> values, String bullet)
        +String clip(String text, int)
        +String line(String message)
        +String line(int length)
        +String line()
        +String repeat(int times, char)
        +String repeat(int times, String)
        +String spaces(int count)
        +String textBox(String title, String message, Object... arguments)
        +String topLine(String title, Object... arguments)
        +String topLine(int extraWidth, String title, Object... arguments)
        +int widestLine(String text)
        --(collection)--
        +int lineCount(String)
    }
    
    class CaseFormat
    {
        --
        +String camelCaseToHyphenated(String text)
        +String capitalize(String text)
        +String decapitalize(String text)
        +String hyphenatedToCamel(String)
        +String lowerHyphenToUpperUnderscore(String)
        +String upperUnderscoreToLowerHyphen(String)
        --(checks)--
        +boolean isCapitalized(String text)
        +boolean isHyphenated(String text)
        +boolean isLowercase(String text)
        --(collection)--
        +String capitalizeOnlyFirstLetter(String text)
        --(naming)--
        +String hyphenatedName(Class<?> type)
    }
    
    Sized <|-- Differences
    Differences o-- StringList
    class Differences
    {
        --
        +boolean compare(String description, Iterable<T>, Iterable<T>)
        +boolean compare(String description, T a, T b)
        --(checks)--
        +boolean isDifferent()
        +boolean isIdentical()
        --(collection)--
        +void add(String description)
        +void add(Differences that)
    }
    
    class Escape
    {
        --
        +String javaScriptString(String text)
        +String sqlString(String text)
        +String unescapeXml(String xml)
        +String xml(String xml)
    }
    
    enum Formatter.Format
    {
        WITHOUT_EXCEPTION
        WITH_EXCEPTION
    }
    
    class Formatter
    {
        --
        +String format(String message, Object... arguments)
    }
    
    class Indent
    {
        --
        +String by(int spaces, String text)
        +String with(String indentation, String text)
    }
    
    class IndentingStringBuilder.Indentation
    {
        --(constructors)--
        #Indentation(int)
        --(building)--
        +Indentation of(int spaces)
        --(primitive)--
        +int asInt()
    }
    
    class IndentingStringBuilder
    {
        --(constructors)--
        +IndentingStringBuilder()
        +IndentingStringBuilder(Indentation)
        +IndentingStringBuilder(Style, Indentation)
        --
        +int indentationLevel()
        --(building)--
        +IndentingStringBuilder appendLine(String value)
        +IndentingStringBuilder appendLines(String value)
        +IndentingStringBuilder defaultTextIndenter()
        +IndentingStringBuilder indent()
        +IndentingStringBuilder level(int level)
        +IndentingStringBuilder numbered()
        +IndentingStringBuilder removeLastLine()
        +IndentingStringBuilder unindent()
        --(checks)--
        +boolean isIndented()
        --(collection)--
        +boolean containsLine(String line)
        +Count lines()
    }
    
    class Join
    {
        --(lifecycle)--
        +String join(Collection<T> values, String separator, Function<T,String> toString)
        +String join(Iterable<T> values, String separator)
    }
    
    class Packages
    {
        --
        +String packagePrefix(String type)
        --(path)--
        +String toPath(String packaged)
    }
    
    class Paths
    {
        --
        +String concatenate(String head, String... tails)
        +String head(String path, String separator)
        +String head(String path, char separator)
        +String optionalHead(String path, String separator)
        +String optionalHead(String path, char separator)
        +String optionalSuffix(String path, char separator)
        +String tail(String, String separator)
        +String tail(String text, char separator)
        +String withoutOptionalSuffix(String path, char separator)
        +String withoutSuffix(String path, char separator)
        --(conversion)--
        +String toPackage(String path)
    }
    
    class Plural
    {
        --
        +String pluralize(int size, String text)
        +String pluralize(String text)
    }
    
    class Separators
    {
        --(constructors)--
        +Separators()
        +Separators(String, String, int)
        +Separators(String)
        --
        +String child(int relativeLevel)
        +Separators child()
        +String current()
    }
    
    class Split
    {
        --(collection)--
        +List<String> split(String text, String delimiter)
        +String[] splitOnFirst(String text, char separator)
        +List<String> words(String text)
    }
    
    class StringSimilarity
    {
        --
        +int compare(String a, String b)
        +int levenshteinDistance(String source, String target)
        --(math)--
        +Percent levenshteinDifference(String a, String b)
        +Percent levenshteinSimilarity(String a, String b)
    }
    
    class StringTo
    {
        --
        +String binary(int value, int bits)
        +String debug(Object)
        +String display(Enum<?> enumValue)
        +String html(String text)
        +String nonNullString(Object value)
        +String string(Object, String defaultValue)
        +String string(Object)
    }
    
    class Strings
    {
        --
        +int digits(String text)
        +String extract(String text, String pattern)
        +String format(String message, Object... arguments)
        +String leading(String text, int)
        +String notNull(String value)
        +int nth(String text, int, char)
        +int occurrences(String text, char character)
        +String replace(String, int start, int end, String replacement)
        +String replaceAll(String, String searchFor, String replaceWith)
        +String trailing(String, int)
        --(checks)--
        +String ensureEndsWith(String text, String terminator)
        +boolean isAllBytes(String text)
        +boolean isAscii(String text)
        +boolean isEmpty(String text)
        +boolean isExtendedAscii(String value)
        +boolean isJavaIdentifier(String text)
        +boolean isLowerCase(String text)
        +boolean isNaturalNumber(String)
        +boolean isOneOf(String value, String... options)
        +boolean startsWithIgnoreCase(String text, String prefix)
        --(collection)--
        +boolean containsAnyOf(String text, String characters)
        +boolean containsIgnoreCase(String a, String b)
        +String remove(String text, int start, int end)
        +String removeAll(String, char remove)
        --(primitive)--
        +String doubleQuoted(String)
        +int nthCharacter(String text, int, char)
    }
    
    class Strip
    {
        --
        +String ending(String text, String ending)
        +String leading(String text, String leading)
        +String quotes(String text)
        +String trailing(String text, String trailer)
    }
    
    enum IndentingStringBuilder.Style
    {
        HTML
        TEXT
    }
    
    class Wrap
    {
        --
        +String wrap(String text, int width)
        +String wrapRegion(String text, int width)
    }
    
@enduml

