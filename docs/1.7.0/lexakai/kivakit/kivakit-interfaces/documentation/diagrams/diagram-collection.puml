
@startuml

    !include lexakai.theme
    
    title "diagram-collection"
    
    interface Addable<Value>
    {
        --(collection)--
        +boolean add(Value)
        +boolean addAll(Iterator<? extends Value> values)
        +boolean addAll(Iterable<? extends Value> values)
        +boolean addIfNotNull(Value)
    }
    
    interface Appendable<T>
    {
        --
        +Appendable<T> append(T value)
        +Appendable<T> appendAll(Iterator<? extends T> values)
        +Appendable<T> appendAll(Iterable<? extends T> values)
    }
    
    interface Contains<T>
    {
        --(collection)--
        +boolean contains(T value)
    }
    
    interface Sequence
    interface Sized
    Sized <|-- Indexable
    Sequence <|-- Indexable
    interface Indexable<Element>
    {
        --
        +Element get(int index)
        +Element getOrDefault(int index, Element defaultValue)
        --(checks)--
        +boolean isEqualTo(Indexable<Element> that)
        --(collection)--
        +Element last()
    }
    
    interface Quantizable
    interface QuantumComparable
    Quantizable <|-- Indexed
    QuantumComparable <|-- Indexed
    interface Indexed
    {
        --(collection)--
        +int index()
    }
    
    interface Quantizable
    Quantizable <|-- LongKeyed
    interface LongKeyed
    {
        --(collection)--
        +long key()
    }
    
    interface Prependable<T>
    {
        --
        +Prependable<T> prepend(T value)
    }
    
    interface Iterable<Element>
    interface Joinable
    Iterable <|-- Sequence
    Joinable <|-- Sequence
    interface Sequence<Element>
    {
        --
        +Set<Element> asSet()
        +Element head()
        --(checks)--
        +boolean isEqualTo(Sequence<Element> that)
        --(collection)--
        +int asHashCode()
        +Iterable<Element> asIterable(Matcher<Element>)
        +Iterable<Element> asIterable()
        +Iterator<Element> asIterator(Matcher<Element>)
        +Iterator<Element> asIterator()
        +List<Element> asList()
        +Element first()
        +int indexOfFirst(Matcher<Element>)
        +int indexOfFirst(Element value)
        +List<Element> tail()
        --(matching)--
        +boolean allMatch(Matcher<Element>)
        +boolean anyMatch(Matcher<Element>)
        +boolean noneMatch(Matcher<Element>)
        --(search)--
        +Element find(Matcher<Element>)
        +Element find(Class<? extends Element> type)
    }
    
@enduml

