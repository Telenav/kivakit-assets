
@startuml

    !include lexakai.theme
    
    title "File System - Files"
    
    abstract BaseRepeater
    abstract BaseReadableResource
    abstract BaseResourceList
    abstract BaseWritableResource
    
    interface WritableResource
    interface FileSystemObject
    interface Iterable
    interface Resource
    
    BaseRepeater <|-- BaseReadableResource
    Resource <|-- BaseReadableResource
    abstract class BaseReadableResource
    {
        --(constructors)--
        #BaseReadableResource()
        #BaseReadableResource(BaseReadableResource)
        #BaseReadableResource(ResourcePath)
        --
        +BaseReadableResource codec(Codec)
        #void charset(Charset)
    }
    
    BaseReadableResource <|-- BaseWritableResource
    WritableResource <|-- BaseWritableResource
    abstract class BaseWritableResource
    {
        --(constructors)--
        #BaseWritableResource()
        #BaseWritableResource(BaseWritableResource)
        #BaseWritableResource(ResourcePath)
        --
        +Resource print(String text)
        +Resource println(String text)
        --(filesystem)--
        +void copyFrom(Resource, CopyMode, ProgressReporter)
        --(write)--
        +void save(InputStream, ProgressReporter)
    }
    
    BaseWritableResource <|-- File
    FileSystemObject <|-- File
    File o-- FileService : "delegates to"
    class File
    {
        --(checks)--
        +boolean isNewerThan(File that)
        +boolean isNewerThan(Duration)
        +boolean isNonEmpty()
        +boolean isOlderThan(Duration)
        +boolean isOlderThan(File that)
        --(filesystem)--
        +File absolute()
        +Folder asFolder()
        +java.nio.file.Path asJavaPath()
        +boolean chmod(PosixFilePermission... permissions)
        +File ensureReadable()
        +File ensureWritable()
        +File file(java.io.File)
        +File file(Listener, URI)
        +File file(FilePath)
        +ArgumentParser.Builder<File> fileArgumentParser(Listener, String description)
        +ArgumentParser.Builder<FileList> fileListArgumentParser(Listener, String description, Extension)
        +SwitchParser.Builder<FileList> fileListSwitchParser(Listener, String name, String description, Extension)
        +SwitchParser.Builder<FilePath> filePathSwitchParser(Listener, String name, String description)
        +SwitchParser.Builder<File> fileSwitchParser(Listener, String name, String description)
        +SwitchParser.Builder<File> inputFileSwitchParser(Listener)
        +boolean isFile()
        +boolean isFolder()
        +File normalized()
        +SwitchParser.Builder<File> outputFile(Listener)
        +File parseFile(Listener, String path, VariableMap<String> variables)
        +File parseFile(Listener, String path)
        +Folder root()
        +void safeCopyFrom(Resource, CopyMode, ProgressReporter)
        +File temporary(Extension)
        +File withBaseName(String name)
        +File withCharset(Charset)
        +File withCodec(Codec)
        +File withExtension(Extension)
        +File withoutExtension()
        +File withoutOverwriting()
    }
    
    BaseResourceList <|-- FileList
    Iterable <|-- FileList
    class FileList
    {
        --(constructors)--
        #FileList(Iterable<File>)
        +FileList()
        --(filesystem)--
        +FileList fileList(File... files)
        +FileList fileList(Iterable<File> files)
    }
    
    interface CreatedAt
    interface ModifiedAt
    ModifiedAt <|-- FileSystemObject
    CreatedAt <|-- FileSystemObject
    interface FileSystemObject
    {
    }
    
    interface Readable
    Readable <|-- ReadableResource
    ReadableResource --> ResourceReader : "provides"
    interface ReadableResource
    {
        --
        +Charset charset()
        +Resource resource()
        --(conversion)--
        +StringResource asStringResource()
        --(filesystem)--
        +void copyTo(WritableResource destination, CopyMode, ProgressReporter)
        --(read)--
        +ResourceReader reader(ProgressReporter)
        +ResourceReader reader(ProgressReporter, Charset)
        +ResourceReader reader()
    }
    
    interface ByteSized
    interface CreatedAt
    interface Deletable
    interface Modifiable
    interface ModifiedAt
    interface ReadableResource
    interface Repeater
    interface ResourcePathed
    interface Resourceful
    interface StringSource
    interface UriIdentified
    ResourcePathed <|-- Resource
    Modifiable <|-- Resource
    ModifiedAt <|-- Resource
    CreatedAt <|-- Resource
    Deletable <|-- Resource
    ByteSized <|-- Resource
    StringSource <|-- Resource
    ReadableResource <|-- Resource
    Repeater <|-- Resource
    Resourceful <|-- Resource
    UriIdentified <|-- Resource
    Resource --> Codec : "uses"
    interface Resource
    {
        --
        +ObjectSet<Can> can()
        +boolean can(Can ability)
        +Codec codec()
        +void dematerialize()
        +Resource relativeTo(ResourceFolder<?>)
        +Resource resolve(Listener, ResourcePath)
        +Resource resolve(Listener, String identifier)
        +Resource resolve(Listener, ResourceIdentifier)
        --(checks)--
        +boolean endsWith(String end)
        +boolean hasParent()
        +boolean isEmpty()
        +boolean isLocal()
        +boolean isMaterializable()
        +boolean isOlderThan(Resource that)
        +boolean isPackaged()
        +boolean isRemote()
        +boolean isSame(Resource that)
        --(command line parsing)--
        +ArgumentParser.Builder<Resource> argumentParser(Listener, String description)
        +SwitchParser.Builder<Resource> resourceSwitchParser(Listener, String name, String description)
        --(conversion)--
        +WritableResource asWritable()
        --(filesystem)--
        +void ensureExists()
        +boolean exists()
        +ResourceFolder<?> parent()
        +boolean renameTo(Resource that)
        +void safeCopyTo(ResourceFolder<?> destination, CopyMode)
        +void safeCopyTo(WritableResource destination, CopyMode)
        +void safeCopyTo(WritableResource destination, CopyMode, ProgressReporter)
        +void safeCopyTo(ResourceFolder<?> destination, CopyMode, ProgressReporter)
        --(functional)--
        +Resource materialized(ProgressReporter)
        --(identity)--
        +ResourceIdentifier identifier(String identifier)
    }
    
    class ResourceReader
    {
        --(constructors)--
        +ResourceReader(Resource, ProgressReporter, Charset)
        --
        +Set<T> objectSet(Converter<String,T>, ProgressReporter)
        +String string(ProgressReporter)
        --(collection)--
        +Iterable<String> lines(ProgressReporter)
        +Iterable<String> lines()
        +StringList linesAsStringList()
        +StringList linesAsStringList(ProgressReporter)
        +List<T> objectList(Converter<String,T>, ProgressReporter)
        +Iterable<T> objects(Converter<String,T>, ProgressReporter)
        --(primitive)--
        +byte[] bytes()
        --(read)--
        +Reader textReader()
    }
    
    class ResourceWriter
    {
        --(constructors)--
        +ResourceWriter(WritableResource)
        +ResourceWriter(WritableResource, Charset)
        --
        +Charset charset()
        --(write)--
        +PrintWriter printWriter()
        +void save(String)
        +Writer textWriter()
    }
    
    interface Resource
    interface Writable
    Resource <|-- WritableResource
    Writable <|-- WritableResource
    WritableResource --> ResourceWriter : "provides"
    interface WritableResource
    {
        --(write)--
        +PrintWriter printWriter()
        +ResourceWriter writer()
        +ResourceWriter writer(Charset)
    }
    
@enduml

