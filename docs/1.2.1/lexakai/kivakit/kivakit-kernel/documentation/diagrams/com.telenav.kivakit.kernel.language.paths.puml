@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.kernel.language.paths"
    
    interface Sized
    interface Comparable
    interface Iterable
    
    class Nio
    {
        --(filesystem)--
        +List<Path> filesAndFolders(Listener, Path)
        +FileSystem filesystem(Listener, URI)
        +FileSystem filesystem(Listener, URI, Map<String,String> variables)
        --(io)--
        +void close(FileSystem)
    }
    
    StringPath <|-- PackagePath
    class PackagePath
    {
        --
        +Class<?> packageType()
        +ModuleResource resource(String relativePath)
        --(collection)--
        +boolean contains(ModuleResource)
        +boolean containsNested(ModuleResource)
        +List<ModuleResource> nestedResources(Matcher<ModuleResource>)
        +List<ModuleResource> nestedResources()
        +List<ModuleResource> resources()
        --(path)--
        +Set<PackagePath> directorySubPackages()
        +boolean isPackagePath(String path)
        +Set<PackagePath> jarSubPackages()
        +PackagePath packagePath(Class<?> type, StringPath)
        +PackagePath packagePath(StringPath)
        +PackagePath packagePath(Class<?> type)
        +PackagePath parsePackagePath(Listener, String path)
        +PackagePath parsePackagePath(Listener, Class<?> type, String relativePath)
        +Set<PackagePath> subPackages()
        +PackagePath withPackageType(Class<?> type)
        --(read)--
        +InputStream resourceStream(String path)
    }
    
    interface PackagePathTrait
    {
        --(path)--
        +PackagePath packagePath()
    }
    
    Iterable <|-- Path
    Comparable <|-- Path
    Sized <|-- Path
    abstract class Path<Element>
    {
        --(constructors)--
        #Path(Element, List<Element>)
        #Path(Path<Element>)
        --
        +Element get(int index)
        +Element rootElement()
        +Stream<Element> stream()
        --(checks)--
        +boolean endsWith(Path<Element> suffix)
        +boolean isAbsolute()
        +boolean isRelative()
        +boolean isRoot()
        +boolean startsWith(Path<Element> prefix)
        --(collection)--
        +List<Element> elements()
        +Element first()
        +Element last()
        +Element pop()
        +void push(Element)
        --(path)--
        +Path<Element> copy()
        +Path<Element> emptyPath()
        +Path<Element> first(int)
        +Path<Element> last(int)
        +Path<Element> parent()
        +Path<Element> root()
        +Path<Element> subpath(int start, int end)
        +Path<Element> transformed(Function<Element,Element>)
        +Path<Element> withChild(Path<Element> that)
        +Path<Element> withChild(Element)
        +Path<Element> withParent(Path<Element> that)
        +Path<Element> withParent(Element)
        +Path<Element> withRoot(Element root)
        +Path<Element> withoutFirst()
        +Path<Element> withoutLast()
        +Path<Element> withoutOptionalPrefix(Path<Element> prefix)
        +Path<Element> withoutOptionalSuffix(Path<Element> suffix)
        +Path<Element> withoutPrefix(Path<Element> prefix)
        +Path<Element> withoutRoot()
        +Path<Element> withoutSuffix(Path<Element> suffix)
        #Path<Element> onCopy(Element root, List<Element> elements)
    }
    
    Path <|-- StringPath
    class StringPath
    {
        --(constructors)--
        #StringPath(List<String>)
        #StringPath(String, List<String>)
        #StringPath(StringPath)
        --
        +String separator()
        --(checks)--
        +boolean endsWith(String suffix)
        +boolean startsWith(String prefix)
        --(conversion)--
        +String asContraction(int maximumLength)
        +String asString()
        --(lifecycle)--
        +String join(String separator)
        +String join()
        --(path)--
        +java.nio.file.Path asJavaPath()
        +StringPath parseStringPath(Listener, String path, String rootPattern, String separatorPattern)
        +StringPath parseStringPath(Listener, String path, String separatorPattern)
        +StringPath stringPath(java.nio.file.Path)
        +StringPath stringPath(URI)
        +StringPath stringPath(String first, String... rest)
        +StringPath stringPath(List<String> elements)
        +StringPath withSeparator(String separator)
    }
    
@enduml

