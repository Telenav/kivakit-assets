@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.commandline"
    
    interface Named
    interface Iterable
    
    interface Versioned
    Versioned <|-- ApplicationMetadata
    interface ApplicationMetadata
    {
        --
        +String description()
        --(status)--
        +boolean callSystemExitOnUnrecoverableError()
    }
    
    Argument --> ArgumentParser : "gets value with"
    class Argument
    {
        --(constructors)--
        +Argument(String)
        --(collection)--
        +String value()
        --(command line parsing)--
        +T get(ArgumentParser<T>)
    }
    
    ArgumentList "1" o-- "*" Argument
    class ArgumentList
    {
        --(collection)--
        +void add(Argument)
        --(command line parsing)--
        +Argument first()
        +Argument get(int index)
    }
    
    ArgumentParser --> ArgumentParser.Builder : "creates"
    ArgumentParser o-- Quantifier
    ArgumentParser o-- Converter : "converts values with"
    class ArgumentParser<T>
    {
        --
        +String description()
        +String help()
        +Quantifier quantifier()
        --(checks)--
        +boolean isAllowedMultipleTimes()
        +boolean isOptional()
        +boolean isRequired()
        --(parsing)--
        +Builder<Boolean> booleanArgumentParser(Listener, String description)
        +Builder<T> builder(Class<T> type)
        +boolean canParse(String argument)
        +Builder<Integer> integerArgumentParser(Listener, String description)
        +Builder<Long> longArgumentParser(Listener, String description)
        +Builder<String> stringArgumentParser(Listener, String description)
        +Builder<Version> versionArgumentParser(Listener, String description)
    }
    
    ArgumentParser.Builder --> ArgumentParser : "creates"
    class ArgumentParser.Builder<T>
    {
        --(command line parsing)--
        +ArgumentParser<T> build()
        +Builder<T> converter(Converter<String,T>)
        +Builder<T> description(String description)
        +Builder<T> oneOrMore()
        +Builder<T> optional()
        +Builder<T> required()
        +Builder<T> twoOrMore()
        +Builder<T> type(Class<T> type)
        +Builder<T> zeroOrMore()
    }
    
    SwitchParser.Builder --> SwitchParser : "creates"
    class SwitchParser.Builder<T>
    {
        --(command line parsing)--
        +SwitchParser<T> build()
        +Builder<T> converter(Converter<String,T>)
        +Builder<T> defaultValue(T defaultValue)
        +Builder<T> description(String description)
        +Builder<T> name(String name)
        +Builder<T> optional()
        +Builder<T> quantifier(Quantifier)
        +Builder<T> required()
        +Builder<T> type(Class<T> type)
        +Builder<T> validValues(Set<T> validValues)
    }
    
    Iterable <|-- CommandLine
    CommandLine --> T : "gets arguments"
    CommandLine --> T : "gets switches"
    CommandLine o-- ArgumentList
    CommandLine o-- SwitchList
    CommandLine --> CommandLineParser : "parses with"
    note top of CommandLine
        See Application for easy access to switches and arguments
    endnote
    class CommandLine
    {
        --(constructors)--
        +CommandLine(CommandLineParser, String[])
        --(command line parsing)--
        +T argument(int index, ArgumentParser<T>)
        +T argument(ArgumentParser<T>)
        +List<T> arguments(ArgumentParser<T>)
        +ArgumentList arguments()
        +T get(SwitchParser<T>, T defaultValue)
        +T get(SwitchParser<T>)
        +boolean has(SwitchParser<T>)
        --(lifecycle)--
        +void exit(String error, Object... arguments)
    }
    
    CommandLineParser --> ArgumentList : "validates"
    CommandLineParser --> CommandLine : "creates"
    CommandLineParser o-- ArgumentParserList
    CommandLineParser o-- SwitchParserList
    class CommandLineParser
    {
        --(constructors)--
        +CommandLineParser(ApplicationMetadata)
        --(command line parsing)--
        +CommandLineParser add(ArgumentParser<T>)
        +CommandLineParser add(SwitchParser<T>)
        +CommandLine parse(String[] arguments)
        --(lifecycle)--
        #void exit(String message, Object... arguments)
    }
    
    Project <|-- CommandLineProject
    class CommandLineProject
    {
        --(constructors)--
        #CommandLineProject()
        --(command line parsing)--
        +CommandLineProject get()
    }
    
    enum Quantifier
    {
        ONE_OR_MORE
        OPTIONAL
        REQUIRED
        TWO_OR_MORE
        ZERO_OR_MORE
    }
    
    Argument <|-- Switch
    Named <|-- Switch
    Switch --> SwitchParser : "gets value with"
    class Switch
    {
        --(constructors)--
        +Switch(String, String)
        --(command line parsing)--
        +T get(SwitchParser<T>)
    }
    
    SwitchParser --> SwitchParser.Builder : "creates"
    SwitchParser --> T : "gets"
    SwitchParser o-- Quantifier
    SwitchParser o-- Converter : "converts values with"
    SwitchParser o-- T : "default value"
    class SwitchParser<T>
    {
        --
        +T defaultValue()
        +T get(Switch _switch)
        +String help()
        --(checks)--
        +boolean isRequired()
        --(collection)--
        +Set<T> validValues()
        --(command line parsing)--
        +Builder<Boolean> booleanSwitchParser(Listener, String name, String description)
        +Builder<T> builder(Class<T> type)
        +Builder<Bytes> bytesSwitchParser(Listener, String name, String description)
        +Builder<Count> countSwitchParser(Listener, String name, String description)
        +Builder<Double> doubleSwitchParser(Listener, String name, String description)
        +Builder<Duration> durationSwitchParser(Listener, String name, String description)
        +Builder<E> enumSwitchParser(Listener, String name, String description, Class<E> type)
        +Builder<Integer> integerSwitchParser(Listener, String name, String description)
        +Builder<ObjectList<E>> listSwitchParser(Listener, String name, String description, StringConverter<E> elementConverter, Class<E> elementType, String delimiter)
        +Builder<LocalTime> localDateSwitchParser(Listener, String name, String description)
        +Builder<LocalTime> localDateTimeSwitchParser(Listener, String name, String description)
        +Builder<Long> longSwitchParser(Listener, String name, String description)
        +Builder<Maximum> maximumSwitchParser(Listener, String name, String description)
        +Builder<Minimum> minimumSwitchParser(Listener, String name, String description)
        +Builder<Pattern> patternSwitchParser(Listener, String name, String description)
        +Builder<Percent> percentSwitchParser(Listener, String name, String description)
        +Builder<T> quantizableSwitchParser(Listener, String name, String description, Class<T> type, MapFactory<Long,T>)
        +Builder<ObjectSet<E>> setSwitchParser(Listener, String name, String description, StringConverter<E> elementConverter, Class<E> elementType, String delimiter)
        +Builder<String> stringSwitchParser(Listener, String name, String description)
        +SwitchParser<Count> threadCountSwitchParser(Listener, Count maximum)
        +Builder<Version> versionSwitchParser(Listener, String name, String description)
    }
    
@enduml

