@startuml

    !include lexakai.theme
    
    title "Microservices"
    
    abstract BaseComponent
    
    interface Startable
    interface Named
    interface Initializable
    interface ComponentMixin
    interface Stoppable
    
    Application <|-- Microservice
    Startable <|-- Microservice
    Stoppable <|-- Microservice
    Microservice --> MicroserviceMetadata : "has"
    Microservice --> MicroserviceSettings : "has"
    abstract class Microservice
    {
        --(constructors)--
        +Microservice(Project)
        --
        +MicroserviceSettings settings()
        +WebApplication webApplication()
        #void onMountJettyPlugins(JettyServer)
        --(extension points)--
        +MicroserviceWebApplication onCreateWebApplication()
        --(filesystem)--
        #ResourceFolder openApiAssetsFolder()
        #ResourceFolder staticAssetsFolder()
        --(lifecycle)--
        +void onInitialize()
        --(metadata)--
        +MicroserviceMetadata metadata()
        --(service)--
        +MicroserviceGrpcService grpcService()
        +MicroserviceGrpcService onNewGrpcService()
        +MicroserviceRestService onNewRestService()
        +MicroserviceRestService restService()
    }
    
    GsonFactory <|-- MicroserviceGsonFactory
    ComponentMixin <|-- MicroserviceGsonFactory
    class MicroserviceGsonFactory
    {
        --(collection)--
        #void onAddSerializers(GsonBuilder)
    }
    
    class MicroserviceMetadata
    {
        --(constructors)--
        #MicroserviceMetadata(MicroserviceMetadata)
        +MicroserviceMetadata()
        --
        +String description()
        --(functional)--
        +MicroserviceMetadata withDescription(String description)
        +MicroserviceMetadata withName(String name)
        +MicroserviceMetadata withVersion(Version)
        --(identity)--
        +Version version()
        --(naming)--
        +String name()
    }
    
    BaseComponent <|-- MicroserviceRestService
    Initializable <|-- MicroserviceRestService
    MicroserviceRestService --> MicroserviceGsonFactory : "creates"
    MicroserviceRestService --> Microservlet : "mounts"
    MicroserviceRestService o-- Microservice
    abstract class MicroserviceRestService
    {
        --(constructors)--
        +MicroserviceRestService(Microservice)
        --
        +Microservice microservice()
        +void mount(String path, HttpMethod, Class<Request> requestType, Version)
        +void mount(MicroservletRestPath, Microservlet<?,?>)
        +void mount(String path, HttpMethod, Class<Request> requestType)
        +void mountAll(MicroservletMountTarget)
        +void onRequestStatistics(MicroservletRequestStatistics)
        +void onRequested(MicroservletRequest, HttpMethod)
        +void onRequesting(MicroservletRequest, HttpMethod)
        --(factory)--
        +MicroserviceGsonFactory gsonFactory()
        --(messaging)--
        +Info openApiInfo()
    }
    
    class MicroserviceSettings
    {
        --(network)--
        +int grpcPort()
        +MicroserviceSettings grpcPort(int grpcPort)
        +int port()
        +MicroserviceSettings port(int port)
    }
    
    BaseComponent <|-- Microservlet
    Named <|-- Microservlet
    Microservlet --> JettyMicroservletRequestCycle : "attaches"
    Microservlet --> MicroservletRequest : "references sub-class"
    Microservlet --> MicroservletResponse : "references sub-class"
    abstract class Microservlet<Request, Response>
    {
        --(constructors)--
        +Microservlet(Class<? extends Request>, Class<? extends Response>)
        --
        +String description()
        +Response request(MicroservletRequest)
        +Class<? extends Request> requestType()
        +Class<? extends Response> responseType()
        #String get(String key)
        --(collection)--
        #PropertyMap parameters()
        --(conversion)--
        #int asInt(String key)
        #long asLong(String key)
        #T asObject(String key, Class<Converter<String,T>> converterType)
        #T asObject(String key, Converter<String,T>)
        --(extension points)--
        +Response onRequest(Request)
    }
    
@enduml

