@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.collections.map"
    
    abstract BaseMap
    abstract BaseIndexedMap
    
    interface Indexable
    
    BaseMap <|-- BaseIndexedMap
    Indexable <|-- BaseIndexedMap
    class BaseIndexedMap<Key, Value>
    {
        --(constructors)--
        +BaseIndexedMap(Maximum)
        --(collection)--
        +int indexOf(Value)
        +void sort(Comparator<Value>)
    }
    
    class ConcurrentCountMap<Key>
    {
        --
        +void mergeIn(ConcurrentCountMap<Key> that)
        +long total()
        --(collection)--
        +ConcurrentCountMap<Key> add(Key, Count value)
        +ConcurrentCountMap<Key> add(Key, Countable value)
        +Count add(Key, long value)
        +boolean contains(Key)
        +Count count(Key)
        +ConcurrentCountMap<Key> decrement(Key)
        +List<Map.Entry<Key,AtomicLong>> descendingEntries(Count maximum, Comparator<Map.Entry<Key,AtomicLong>>)
        +ConcurrentCountMap<Key> increment(Key)
        +Collection<Key> keySet()
        +Key minimum()
        +ConcurrentCountMap<Key> prune(Count minimum)
        +void remove(Key)
        +int size()
        +List<Key> sortedByDescendingCount()
        +List<Key> sortedKeys(Comparator<Key>)
        +List<Key> sortedKeys()
        +ConcurrentCountMap<Key> top(Count maximum)
        +ConcurrentCountMap<Key> top(Count maximum, Comparator<Map.Entry<Key,AtomicLong>>)
    }
    
    BaseIndexedMap <|-- IndexedNameMap
    class IndexedNameMap<T>
    {
        --(constructors)--
        +IndexedNameMap()
        +IndexedNameMap(Maximum)
        --(collection)--
        +void put(T value)
        --(naming)--
        +T forName(String name)
    }
    
    BaseMap <|-- MultiMap
    class MultiMap<Key, Value>
    {
        --(constructors)--
        +MultiMap()
        +MultiMap(Map<Key, ObjectList<Value>>)
        +MultiMap(Maximum, Maximum)
        +MultiMap(Maximum, Maximum, Map<Key, ObjectList<Value>>)
        --(collection)--
        +void add(Key, Value)
        +void addAll(Key, Collection<? extends Value>)
        +void addAll(Collection<? extends Key> keys, Value)
        +boolean addIfNotNull(Key, Value)
        +ObjectList<Value> flatValues()
        +ObjectList<Value> list(Key)
        +Count maximumListSize()
        +void sort(Comparator<? super Value>)
        +int totalValues()
    }
    
    class ReferenceCountMap<Key>
    {
        --
        +void dereference(Key object)
        +void reference(Key)
        --(checks)--
        +boolean isReferenced(Key object)
        --(collection)--
        +void count(Key object, Count)
        +Count count(Key object)
    }
    
    BaseMap <|-- TwoWayMap
    class TwoWayMap<Key, Value>
    {
        --(constructors)--
        +TwoWayMap()
        +TwoWayMap(Maximum)
        --(collection)--
        +Key key(Value)
    }
    
@enduml

