@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.core.value.count"
    
    abstract BaseCount
    
    interface Countable
    interface Comparable
    interface Contains
    interface ByteSized
    interface IntegerNumeric
    interface Source
    interface Stringable
    
    IntegerNumeric <|-- BaseCount
    Countable <|-- BaseCount
    Source <|-- BaseCount
    abstract class BaseCount<SubClass>
    {
        --(constructors)--
        #BaseCount(long)
        +BaseCount()
        --
        +void forEach(Consumer<SubClass>)
        +SubClass inRange(long value)
        +SubClass offset(long offset)
        +SubClass powerOfTenCeiling(int digits)
        +SubClass powerOfTenFloor(int digits)
        +SubClass powerOfTwoCeiling()
        --(checks)--
        +boolean isBetweenExclusive(BaseCount<?> minimum, BaseCount<?> exclusiveMaximum)
        +boolean isBetweenInclusive(BaseCount<?> minimum, BaseCount<?> inclusiveMaximum)
        +boolean isGreaterThan(Quantizable that)
        +boolean isGreaterThanOrEqualTo(Quantizable that)
        +boolean isLessThan(Quantizable that)
        +boolean isLessThanOrEqualTo(Quantizable that)
        --(collection)--
        +BitCount asBitCount()
        +Count asCount()
        +BitCount bitsToRepresent()
        +float[] newFloatArray()
        +Element[] newObjectArray()
        +String[] newStringArray()
        --(conversion)--
        +Estimate asEstimate()
        +Range<SubClass> toExclusive(SubClass maximum)
        +Range<SubClass> toInclusive(SubClass maximum)
        --(factory)--
        +SubClass newInstance(long count)
        --(iteration)--
        +void loop(LoopBody<SubClass>)
        +void loop(Runnable code)
        +void loop(FilteredLoopBody<SubClass>)
        +void loopInclusive(LoopBody<SubClass> code)
        +SubClass nextPrime()
        --(math)--
        +Maximum asMaximum()
        +Minimum asMinimum()
        +SubClass decremented()
        +SubClass dividedBy(Quantizable divisor)
        +SubClass dividedBy(long divisor)
        +boolean dividesEvenlyBy(Quantizable value)
        +SubClass incremented()
        +boolean isMaximum()
        +boolean isMinimum()
        +SubClass minus(Quantizable count)
        +SubClass minus(long count)
        +SubClass percent(Percent percentage)
        +Percent percentOf(Quantizable total)
        +SubClass plus(long count)
        +SubClass plus(Quantizable count)
        +SubClass times(Quantizable count)
        +SubClass times(double multiplier)
        +SubClass times(long multiplier)
        +SubClass times(Percent percentage)
        --(primitive)--
        +int asInt()
        +long asLong()
        +void forEachByte(Consumer<Byte>)
        +void forEachInteger(Consumer<Integer>)
        +void forEachLong(Consumer<Long>)
        +void forEachShort(Consumer<Short>)
        +byte[] newByteArray()
        +char[] newCharArray()
        +double[] newDoubleArray()
        +int[] newIntArray()
        +long[] newLongArray()
        +short[] newShortArray()
    }
    
    BaseCount <|-- BitCount
    class BitCount
    {
        --(constructors)--
        #BitCount()
        #BitCount(long)
        --
        +long mask()
        --(collection)--
        +BitCount bitCount(long count)
        +BitCount bitCount(T[] values)
        +BitCount bitsToRepresent(int value)
        +BitCount bitsToRepresent(long value)
        +BitCount perByte()
        +BitCount perCharacter()
        +BitCount perInteger()
        +BitCount perLong()
        +BitCount perShort()
        +BitCount toRepresent(long value)
        +long values()
        --(math)--
        +long maximumSigned()
        +long maximumUnsigned()
        +long minimumSigned()
    }
    
    interface ByteSized
    {
        --(math)--
        +boolean isLargerThan(ByteSized that)
        +boolean isSmallerThan(ByteSized that)
        --(primitive)--
        +Bytes sizeInBytes()
    }
    
    BaseCount <|-- Bytes
    ByteSized <|-- Bytes
    class Bytes
    {
        --
        +void reverse(byte[] array)
        +void reverse(byte[] array, int fromIndex, int toIndex)
        --(conversion)--
        +double asGigabytes()
        +double asKilobytes()
        +double asMegabytes()
        +double asTerabytes()
        --(primitive)--
        +long asBytes()
        +Bytes bytes(int[] array)
        +Bytes bytes(long[] array)
        +Bytes bytes(byte[] array)
        +Bytes bytes(long bytes)
        +Bytes bytes(Count)
        +Bytes bytes(double bytes)
        +Bytes gigabytes(double gigabytes)
        +Bytes gigabytes(long gigabytes)
        +Bytes kilobytes(long kilobytes)
        +Bytes kilobytes(double kilobytes)
        +Bytes megabytes(double megabytes)
        +Bytes megabytes(long megabytes)
        +Bytes parseBytes(Listener, String value)
        +Bytes primitiveSize(Object)
        +Bytes terabytes(long terabytes)
        +Bytes terabytes(double terabytes)
    }
    
    Countable <|-- ConcurrentMutableCount
    class ConcurrentMutableCount
    {
        --(constructors)--
        +ConcurrentMutableCount()
        +ConcurrentMutableCount(long)
        --
        +long get()
        +void set(long count)
        --(checks)--
        +boolean isGreaterThan(ConcurrentMutableCount that)
        +boolean isLessThan(ConcurrentMutableCount that)
        +boolean isZero()
        --(collection)--
        +void clear()
        --(conversion)--
        +Count asCount()
        +int asInt()
        +long asLong()
        --(math)--
        +long add(BaseCount<?> that)
        +long add(long that)
        +long decrement()
        +long increment()
        +Percent percentOf(Count total)
    }
    
    BaseCount <|-- Count
    class Count
    {
        --(constructors)--
        #Count()
        #Count(long)
        --(collection)--
        +Count count(Iterable<?>, Maximum)
        +Count count(T[] values)
        +Count count(double value)
        +Count count(Collection<?>)
        +Count count(Iterator<?>, Maximum)
        +Count count(long value)
        +Count count(Iterable<?>)
        +Count count(Iterator<?>)
        +Count count(String text)
        +Count parseCount(Listener, String value)
    }
    
    interface Sized
    Sized <|-- Countable
    interface Countable
    {
        --(collection)--
        +Count count()
    }
    
    BaseCount <|-- Estimate
    Stringable <|-- Estimate
    class Estimate
    {
        --(constructors)--
        #Estimate()
        #Estimate(long)
        --
        +Estimate estimate(Collection<?>)
        +Estimate estimate(long value)
        +Estimate estimate(Iterator<?>)
        +Estimate estimate(T[] values)
        +Estimate estimate(Iterable<?>)
        --(parsing)--
        +Estimate parseEstimate(Listener, String value)
    }
    
    Contains <|-- LongRange
    class LongRange
    {
        --(constructors)--
        #LongRange()
        +LongRange(long, long)
        --
        +Long constrainTo(Long value)
        --(math)--
        +Long maximum(Long that)
        +Long maximum()
        +Long minimum(Long that)
        +Long minimum()
    }
    
    BaseCount <|-- Maximum
    class Maximum
    {
        --(constructors)--
        #Maximum()
        #Maximum(long)
        --(math)--
        +Maximum maximum(Collection<?>)
        +Maximum maximum(long value)
        +Maximum maximum(Iterator<?>)
        +Maximum maximum(Iterable<?>)
        +Maximum maximum(T[] values)
        +Maximum parseMaximum(Listener, String value)
    }
    
    BaseCount <|-- Minimum
    class Minimum
    {
        --(constructors)--
        #Minimum()
        #Minimum(long)
        --(math)--
        +Minimum minimum(long value)
        +Minimum minimum(Collection<?>)
        +Minimum minimum(Iterable<?>)
        +Minimum minimum(T[] values)
        +Minimum minimum(Iterator<?>)
        +Minimum parseMinimum(Listener, String value)
    }
    
    Countable <|-- MutableCount
    Comparable <|-- MutableCount
    class MutableCount
    {
        --(constructors)--
        +MutableCount()
        +MutableCount(long)
        --
        +long get()
        +void set(long count)
        --(checks)--
        +boolean isGreaterThan(Quantizable that)
        +boolean isLessThan(Quantizable that)
        +boolean isZero()
        --(collection)--
        +void clear()
        --(conversion)--
        +Count asCount()
        +int asInt()
        +long asLong()
        --(math)--
        +long decrement()
        +long increment()
        +long minus(long that)
        +Percent percentOf(Count total)
        +long plus(Quantizable that)
        +long plus(long that)
    }
    
    Countable <|-- Range
    class Range<Value>
    {
        --(constructors)--
        #Range(Value, Value, UpperBound)
        --
        +Range<Count> allCounts()
        +Value constrain(Value)
        +Range<Value> exclusive(Value minimum, Value exclusiveMaximum)
        +void forEach(LoopBody<Value>)
        +Range<Value> inclusive(Value minimum, Value inclusiveMaximum)
        +Value randomValue()
        +UpperBound upperBound()
        --(checks)--
        +boolean isExclusive()
        +boolean isInclusive()
        --(collection)--
        +boolean contains(Value)
        +void forCount(Count, FilteredLoopBody<Value>)
        --(iteration)--
        +void loop(Runnable body)
        --(math)--
        +Value exclusiveMaximum()
        +Value inclusiveMaximum()
        +Value minimum()
    }
    
    enum Range.UpperBound
    {
        EXCLUSIVE
        INCLUSIVE
    }
    
@enduml

