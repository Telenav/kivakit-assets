@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.core.value.level"
    
    interface Comparable
    
    Level <|-- Confidence
    class Confidence
    {
        --(constructors)--
        #Confidence()
        #Confidence(double)
        --
        +Confidence confidence(double value)
        --(parsing)--
        +Confidence parseConfidence(Listener, String value)
        --(primitive)--
        +int asUnsignedByte()
        +Confidence confidenceForByte(byte level)
        +Confidence confidenceForInt(int value)
    }
    
    class Level
    {
        --(constructors)--
        #Level()
        +Level(double)
        --
        +int compareTo(Level that)
        +Level inverse()
        +Level reciprocal()
        --(checks)--
        +boolean isClose(Level that, double margin)
        +boolean isGreaterThan(Level that)
        +boolean isGreaterThanOrEqualTo(Level that)
        +boolean isLessThan(Level that)
        +boolean isLessThanOrEqualTo(Level that)
        +boolean isZero()
        --(conversion)--
        +byte asByte()
        +Level asLevel()
        +double asZeroToOne()
        --(extension points)--
        #Level onNewInstance(double value)
        --(math)--
        +Percent asPercent()
        +Level divide(Level that)
        +Level minus(Level that)
        +Level plus(Level that)
        +Level times(Level that)
        --(parsing)--
        +Level parseLevel(Listener, String value, boolean lenient)
        --(primitive)--
        +Level levelForByte(byte level)
    }
    
    Comparable <|-- Percent
    class Percent
    {
        --
        +long scale(long value)
        +double scale(double value)
        +int scale(int value)
        --(checks)--
        +boolean isGreaterThan(Percent that)
        +boolean isGreaterThanOrEqualTo(Percent that)
        +boolean isLessThan(Percent that)
        +boolean isLessThanOrEqualTo(Percent that)
        --(collection)--
        +double value()
        --(conversion)--
        +int asInt()
        +Level asLevel()
        +double asUnitValue()
        +double asZeroToOne()
        --(math)--
        +Percent dividedBy(double divisor)
        +Percent inverse()
        +Percent minus(Percent that)
        +Percent of(double percent)
        +Percent parsePercent(Listener, String value)
        +Percent plus(Percent that)
        +Percent times(double scaleFactor)
    }
    
    Level <|-- Weight
    class Weight
    {
        --(constructors)--
        #Weight()
        --
        +Weight weight(double value)
    }
    
@enduml

