@startuml

    !include lexakai.theme
    
    title "diagram-test"
    
    interface RepeaterMixin
    interface FailureReporter
    interface ProjectTrait
    interface JavaTrait
    interface NamedObject
    interface LanguageTrait
    interface Repeater
    interface RegistryTrait
    interface RandomNumeric
    
    TestWatcher <|-- CoreUnitTest
    RepeaterMixin <|-- CoreUnitTest
    JavaTrait <|-- CoreUnitTest
    ProjectTrait <|-- CoreUnitTest
    RegistryTrait <|-- CoreUnitTest
    LanguageTrait <|-- CoreUnitTest
    Repeater <|-- CoreUnitTest
    NamedObject <|-- CoreUnitTest
    CoreUnitTest --> JUnitFailureReporter : "reports validation failures with"
    CoreUnitTest --> RandomValueFactory : "uses"
    abstract class CoreUnitTest
    {
        --(constructors)--
        #CoreUnitTest()
        --
        +void testBeforeUnitTest()
        +void testSetup()
        #boolean ensure(boolean condition)
        #T ensure(boolean condition, String message, Object... arguments)
        #T ensure(boolean condition, Throwable, String message, Object... arguments)
        #T ensure(Supplier<Boolean> valid, String message, Object... arguments)
        #void ensureEqual(T given, T expected)
        #void ensureEqual(T given, T expected, String message, Object... arguments)
        #void ensureFalse(boolean condition, String message, Object... arguments)
        #void ensureNonZero(Number value)
        #void ensureThrows(Runnable code)
        #void ensureWithin(double expected, double actual, double maximumDifference)
        #void ensureZero(Number value)
        --(checks)--
        #double ensureBetween(double actual, double low, double high)
        #long ensureBetweenExclusive(long value, long minimum, long maximum, String message, Object... arguments)
        #long ensureBetweenExclusive(long value, long minimum, long maximum)
        #long ensureBetweenInclusive(long value, long minimum, long maximum)
        #long ensureBetweenInclusive(long value, long minimum, long maximum, String message, Object... arguments)
        #boolean ensureClose(Duration given, Duration expected)
        #boolean ensureFalse(boolean condition)
        #T ensureNotEqual(T given, T expected, String message, Object... objects)
        #T ensureNotEqual(T given, T expected)
        #T ensureNotNull(T object, String message, Object... objects)
        #T ensureNotNull(T object)
        #T ensureNull(T object, String message, Object... arguments)
        #T ensureNull(T object)
        #boolean isMac()
        #boolean isQuickTest()
        #boolean isRandomTest()
        #boolean isWindows()
        --(collection)--
        #Count count(long value)
        #Count count(Collection<?> value)
        #void ensureEqualArray(T[] a, T[] b)
        #void ensureEqualArray(byte[] a, byte[])
        --(factory)--
        #RandomValueFactory newRandomValueFactory()
        #RandomValueFactory random()
        --(io)--
        #void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)
        --(lifecycle)--
        #void initializeProject(Class<T> project)
        --(math)--
        #Maximum maximum(long minimum)
        #Minimum minimum(long minimum)
        --(messaging)--
        #void ensureBroadcastsNoProblem(T broadcaster, Consumer<T> code)
        #void ensureBroadcastsProblem(T broadcaster, Consumer<T> code)
        --(status)--
        #void fail(String message, Object... arguments)
    }
    
    FailureReporter <|-- JUnitFailureReporter
    class JUnitFailureReporter
    {
    }
    
    interface QuickTest
    {
    }
    
    RandomNumeric <|-- RandomValueFactory
    class RandomValueFactory
    {
        --(constructors)--
        +RandomValueFactory()
        +RandomValueFactory(long)
        --
        +Confidence confidence()
        +T from(T[] values)
        +T from(Collection<T> values)
        +void indexes(Repeats, long maximum, Consumer<Integer>)
        +void indexes(long maximum, Consumer<Integer>)
        +char letter()
        +String letters(int minLength, int maxLength)
        +String letters()
        +Range<Count> rangeExclusive(long minimum, long exclusiveMaximum)
        +Range<T> rangeExclusive(T minimum, T exclusiveMaximum)
        +Range<T> rangeExclusive(T minimum, T exclusiveMaximum, long minimumWidth)
        +Range<Count> rangeExclusive(long minimum, long exclusiveMaximum, long minimumWidth)
        +Range<Count> rangeInclusive(long minimum, long inclusiveMaximum)
        +Range<T> rangeInclusive(T minimum, T inclusiveMaximum, long minimumWidth)
        +Range<Count> rangeInclusive(long minimum, long inclusiveMaximum, long minimumWidth)
        +long seed()
        +void seed(long seed)
        +void sequence(Repeats, Class<T> type, Matcher<T> include, Consumer<T>)
        +void sequence(Repeats, Count, Class<T> type, Consumer<T>)
        +void sequence(Repeats, Count, long minimum, long maximum, Class<T> type, Consumer<T>)
        +void sequence(Repeats, Count, long minimum, long exclusiveMaximum, Class<T> type, Matcher<T> include, Consumer<T>)
        +void sequence(Class<T> type, Consumer<T>)
        +void sequence(Repeats, long minimum, long maximum, Class<T> type, Consumer<T>)
        +void sequence(Repeats, long maximum, Class<T> type, Consumer<T>)
        +void sequence(Repeats, Count, Class<T> type, Matcher<T> include, Consumer<T>)
        +void sequence(Repeats, Class<T> type, Consumer<T>)
        +String string()
        +String string(int maximum)
        +String string(int minimum, int maximum)
        --(collection)--
        +Count iterations()
        +List<T> list(Repeats, Count, long minimum, long maximum, Class<T> type, Matcher<T> include)
        +List<T> list(Repeats, Count, long minimum, long maximum, Class<T> type)
        +List<T> list(Repeats, Class<T> type)
        +List<T> list(Class<T> type)
        +List<T> list(Repeats, Class<T> type, Matcher<T> include)
        +List<T> list(Repeats, Count, Class<T> type, Matcher<T> include)
        +List<T> list(Repeats, Count, Class<T> type)
        +Count randomCount(long maximum)
        +Count randomCount(long minimum, long maximum)
        --(identity)--
        +Identifier identifierExclusive(long maximum)
        --(iteration)--
        +void loop(Runnable code)
        --(primitive)--
        +void byteSequence(Consumer<Byte>)
        +void byteSequence(Matcher<Byte> include, Consumer<Byte>)
        +void byteSequence(Repeats, Matcher<Byte> include, Consumer<Byte>)
        +void byteSequence(Repeats, Consumer<Byte>)
        +void intSequence(Consumer<Integer>)
        +void intSequence(Repeats, Consumer<Integer>)
        +void intSequence(Repeats, Matcher<Integer> include, Consumer<Integer>)
        +void intSequence(Matcher<Integer> include, Consumer<Integer>)
        +void longSequence(Consumer<Long>)
        +void longSequence(Matcher<Long> include, Consumer<Long>)
        +void longSequence(Repeats, Matcher<Long> include, Consumer<Long>)
        +void longSequence(Repeats, Consumer<Long>)
        +void shortSequence(Matcher<Short> include, Consumer<Short>)
        +void shortSequence(Repeats, Matcher<Short> include, Consumer<Short>)
        +void shortSequence(Consumer<Short>)
        +void shortSequence(Repeats, Consumer<Short>)
    }
    
    interface SlowTest
    {
    }
    
    TestWatcher <|-- UnitTestWatcher
    UnitTestWatcher o-- CoreUnitTest : "watches for failures in"
    class UnitTestWatcher
    {
        --(constructors)--
        +UnitTestWatcher(CoreUnitTest)
    }
    
@enduml

