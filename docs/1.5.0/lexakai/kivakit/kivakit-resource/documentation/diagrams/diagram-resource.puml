@startuml

    !include lexakai.theme
    
    title "Resources"
    
    abstract BaseRepeater
    abstract BaseReadableResource
    abstract BaseResourceList
    
    interface WritableResource
    interface UriIdentified
    interface Resource
    
    BaseRepeater <|-- BaseReadableResource
    Resource <|-- BaseReadableResource
    abstract class BaseReadableResource
    {
        --(constructors)--
        #BaseReadableResource()
        #BaseReadableResource(BaseReadableResource)
        #BaseReadableResource(ResourcePath)
        --
        +BaseReadableResource codec(Codec)
        #void charset(Charset)
    }
    
    BaseReadableResource <|-- BaseWritableResource
    WritableResource <|-- BaseWritableResource
    abstract class BaseWritableResource
    {
        --(constructors)--
        #BaseWritableResource()
        #BaseWritableResource(BaseWritableResource)
        #BaseWritableResource(ResourcePath)
        --
        +Resource print(String text)
        +Resource println(String text)
        --(filesystem)--
        +void copyFrom(Resource, CopyMode, ProgressReporter)
        +boolean delete()
        --(write)--
        +void save(InputStream, ProgressReporter)
    }
    
    ResourcePath <|-- PackagePath
    class PackagePath
    {
        --
        +Class<?> packageType()
        --(checks)--
        +boolean hasPackageType()
        --(conversion)--
        +Package asPackage(Listener)
        +PackageReference asPackageReference()
        --(path)--
        +Set<PackagePath> directorySubPackages()
        +boolean isPackagePath(String path)
        +Set<PackagePath> jarSubPackages()
        +PackagePath packagePath(PackageReference)
        +PackagePath packagePath(Class<?> type, StringPath)
        +PackagePath packagePath(StringPath)
        +PackagePath packagePath(Class<?> type)
        +PackagePath parsePackagePath(Listener, String path)
        +PackagePath parsePackagePath(Listener, Class<?> type, String relativePath)
        +PackagePath withPackageType(Class<?> type)
    }
    
    interface Readable
    Readable <|-- ReadableResource
    ReadableResource --> ResourceReader : "provides"
    interface ReadableResource
    {
        --
        +Charset charset()
        +Resource resource()
        --(conversion)--
        +StringResource asStringResource()
        --(filesystem)--
        +void copyTo(WritableResource destination, CopyMode, ProgressReporter)
        --(read)--
        +ResourceReader reader(ProgressReporter)
        +ResourceReader reader(ProgressReporter, Charset)
        +ResourceReader reader()
    }
    
    interface ByteSized
    interface CreatedAt
    interface LastModifiedAt
    interface Modifiable
    interface ReadableResource
    interface Repeater
    interface ResourcePathed
    interface Resourceful
    interface StringSource
    interface UriIdentified
    ResourcePathed <|-- Resource
    Modifiable <|-- Resource
    LastModifiedAt <|-- Resource
    CreatedAt <|-- Resource
    ByteSized <|-- Resource
    StringSource <|-- Resource
    ReadableResource <|-- Resource
    Repeater <|-- Resource
    Resourceful <|-- Resource
    UriIdentified <|-- Resource
    Resource --> Codec : "uses"
    interface Resource
    {
        --
        +Codec codec()
        +void dematerialize()
        +Resource resolve(Listener, ResourcePath)
        +Resource resolve(Listener, String identifier)
        +Resource resolve(Listener, ResourceIdentifier)
        --(checks)--
        +boolean endsWith(String end)
        +boolean hasParent()
        +boolean isEmpty()
        +boolean isLocal()
        +boolean isMaterializable()
        +boolean isOlderThan(Resource that)
        +boolean isPackaged()
        +boolean isRemote()
        +boolean isSame(Resource that)
        --(command line parsing)--
        +ArgumentParser.Builder<Resource> argumentParser(Listener, String description)
        +SwitchParser.Builder<Resource> resourceSwitchParser(Listener, String name, String description)
        --(filesystem)--
        +void ensureExists()
        +boolean exists()
        +ResourceFolder<?> parent()
        +void safeCopyTo(File destination, CopyMode)
        +void safeCopyTo(Folder destination, CopyMode, ProgressReporter)
        +void safeCopyTo(Folder destination, CopyMode)
        +void safeCopyTo(File destination, CopyMode, ProgressReporter)
        --(functional)--
        +Resource materialized(ProgressReporter)
        --(identity)--
        +ResourceIdentifier identifier(String identifier)
    }
    
    BaseResourceList <|-- ResourceList
    ResourceList --> Resource : "contains"
    class ResourceList
    {
        --(constructors)--
        +ResourceList()
        +ResourceList(Iterable<? extends Resource>)
        --(collection)--
        +ResourceList resourceList(Resource... resources)
        +ResourceList resourceList(Iterable<? extends Resource> resources)
    }
    
    StringPath <|-- ResourcePath
    UriIdentified <|-- ResourcePath
    class ResourcePath
    {
        --(constructors)--
        #ResourcePath(ResourcePath)
        #ResourcePath(StringList, List<String>)
        #ResourcePath(StringList, String, List<String>)
        --(checks)--
        +boolean hasScheme()
        --(collection)--
        +StringList schemes()
        --(filesystem)--
        +File asFile()
        +Extension extension()
        +FileName fileName()
        --(path)--
        +ResourcePath absolute()
        +FilePath asFilePath()
        +ResourcePath normalized()
        +ResourcePath parseResourcePath(Listener, String path)
        +ResourcePath parseUnixResourcePath(Listener, String path)
        +ResourcePath relativeTo(ResourcePath)
        +ResourcePath resourcePath(StringPath)
        +SwitchParser.Builder<ResourcePath> resourcePathSwitchParser(Listener, String name, String description)
        +FilePath withExtension(Extension)
        +ResourcePath withSchemes(StringList schemes)
        +ResourcePath withoutSchemes()
    }
    
    interface UriIdentified
    UriIdentified <|-- ResourcePathed
    ResourcePathed --> ResourcePath : "supplies"
    interface ResourcePathed
    {
        --
        +boolean matches(Matcher<String>)
        --(filesystem)--
        +FileName baseName()
        +Extension compoundExtension()
        +Extension extension()
        +FileName fileName()
        +boolean hasExtension(Extension)
        --(path)--
        +ResourcePath path()
    }
    
    class ResourceReader
    {
        --(constructors)--
        +ResourceReader(Resource, ProgressReporter, Charset)
        --
        +Set<T> objectSet(Converter<String,T>, ProgressReporter)
        +String string(ProgressReporter)
        --(collection)--
        +Iterable<String> lines(ProgressReporter)
        +Iterable<String> lines()
        +StringList linesAsStringList()
        +StringList linesAsStringList(ProgressReporter)
        +List<T> objectList(Converter<String,T>, ProgressReporter)
        +Iterable<T> objects(Converter<String,T>, ProgressReporter)
        --(primitive)--
        +byte[] bytes()
        --(read)--
        +Reader textReader()
    }
    
    class ResourceWriter
    {
        --(constructors)--
        +ResourceWriter(WritableResource)
        +ResourceWriter(WritableResource, Charset)
        --
        +Charset charset()
        --(write)--
        +PrintWriter printWriter()
        +void save(String)
        +Writer textWriter()
    }
    
    interface Resource
    interface Writable
    Resource <|-- WritableResource
    Writable <|-- WritableResource
    WritableResource --> ResourceWriter : "provides"
    interface WritableResource
    {
        --(write)--
        +PrintWriter printWriter()
        +ResourceWriter writer()
        +ResourceWriter writer(Charset)
    }
    
@enduml

