@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.core.kernel.language.collections.map.count"
    
    class ConcurrentCountMap<Key>
    {
        --
        +void mergeIn(ConcurrentCountMap<Key> that)
        +long total()
        --(collection)--
        +ConcurrentCountMap<Key> add(Key, Count value)
        +ConcurrentCountMap<Key> add(Key, Countable value)
        +Count add(Key, long value)
        +boolean contains(Key)
        +Count count(Key)
        +ConcurrentCountMap<Key> decrement(Key)
        +List<Map.Entry<Key,AtomicLong>> descendingEntries(Count maximum, Comparator<Map.Entry<Key,AtomicLong>>)
        +ConcurrentCountMap<Key> increment(Key)
        +Collection<Key> keySet()
        +Key minimum()
        +ConcurrentCountMap<T> parse(Factory<ConcurrentCountMap<T>> mapFactory, MapFactory<String,T> keyFactory, String text)
        +ConcurrentCountMap<Key> prune(Count minimum)
        +void remove(Key)
        +int size()
        +List<Key> sortedByDescendingCount()
        +List<Key> sortedKeys(Comparator<Key>)
        +List<Key> sortedKeys()
        +ConcurrentCountMap<Key> top(Count maximum)
        +ConcurrentCountMap<Key> top(Count maximum, Comparator<Map.Entry<Key,AtomicLong>>)
    }
    
    class CountMap<T>
    {
        --(constructors)--
        +CountMap()
        +CountMap(Count)
        +CountMap(CountMap<T>)
        --
        +void mergeIn(CountMap<T> that)
        +long total()
        --(collection)--
        +Count add(T key, long value)
        +CountMap<T> add(T key, Countable value)
        +List<Map.Entry<T,MutableCount>> ascendingEntries(Count maximum, Comparator<Map.Entry<T,MutableCount>>)
        +CountMap<T> bottom(Count maximum, Comparator<Map.Entry<T,MutableCount>>)
        +CountMap<T> bottom(Count maximum)
        +boolean contains(T key)
        +Count count(T key)
        +CountMap<T> decrement(T key)
        +List<Map.Entry<T,MutableCount>> descendingEntries(Count maximum, Comparator<Map.Entry<T,MutableCount>>)
        +CountMap<T> increment(T key)
        +Collection<T> keySet()
        +CountMap<T> prune(Count minimum)
        +void remove(T key)
        +void removeAll(CountMap<T>)
        +int size()
        +List<T> sortedByDescendingCount()
        +List<T> sortedKeys()
        +List<T> sortedKeys(Comparator<T>)
        +CountMap<T> top(Count maximum)
        +CountMap<T> top(Count maximum, Comparator<Map.Entry<T,MutableCount>>)
        --(math)--
        +T minimum()
    }
    
@enduml

