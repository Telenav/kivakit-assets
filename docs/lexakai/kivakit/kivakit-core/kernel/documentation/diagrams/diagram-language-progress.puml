@startuml

    !include lexakai.theme
    
    title "Language - Progress Reporting"
    
    interface ProgressReporter
    
    Progress <|-- ConcurrentProgress
    class ConcurrentProgress
    {
        --(constructors)--
        #ConcurrentProgress()
        +ConcurrentProgress(Progress)
    }
    
    Multicaster <|-- Progress
    ProgressReporter <|-- Progress
    class Progress
    {
        --(constructors)--
        #Progress()
        #Progress(Progress)
        --
        +long at()
        +Progress create(Listener, String itemName, Count steps)
        +Progress create(Listener)
        +Progress create()
        +Progress create(Listener, String itemName)
        +Progress createConcurrent(Listener, String itemName)
        +Progress createConcurrent(Listener)
        +Progress createConcurrent(Listener, String itemName, Count steps)
        +void feedback(String message)
        #void at(long at)
        #long increase(long increase)
        --(factory)--
        #Progress newInstance()
        --(functional)--
        +Progress withItemName(String itemName)
        +Progress withPhase(String phase)
        +Progress withSteps(Count steps)
        --(iteration)--
        +void next(long increase)
        --(math)--
        #long increment()
    }
    
    interface ProgressListener
    {
        --
        +void at(Percent at)
    }
    
    interface Resettable
    Resettable <|-- ProgressReporter
    ProgressReporter --> ProgressListener : "reports progress to"
    interface ProgressReporter
    {
        --
        +ProgressReporter phase(String phase)
        +ProgressReporter steps(Count steps)
        --(checks)--
        +boolean isIndefinite()
        --(collection)--
        +Count steps()
        --(iteration)--
        +void next()
        +void next(Count steps)
        +void next(int steps)
        --(lifecycle)--
        +void end()
        +void end(String label)
        +ProgressReporter start()
        +ProgressReporter start(String label)
        --(messaging)--
        +ProgressReporter listener(ProgressListener)
    }
    
@enduml

