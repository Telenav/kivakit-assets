@startuml

    !include lexakai.theme
    
    title "Messaging - Listening"
    
    interface Receiver
    interface Transceiver
    Transceiver <|-- Listener
    Receiver <|-- Listener
    interface Listener
    {
        --(messaging)--
        +T listenTo(T broadcaster, MessageFilter)
        +T listenTo(T broadcaster)
        +Listener none()
        +void onMessage(Message)
    }
    
    interface Transmittable
    interface Triaged
    Transmittable <|-- Message
    Triaged <|-- Message
    Message --> Importance : "message importance"
    Message --> Message.OperationStatus : "operation status"
    Message --> Severity : "message severity"
    Message --> Message.Status : "message status"
    interface Message
    {
        --
        +Throwable cause()
        +CodeContext context()
        +String description()
        +String escape(String text)
        +String format(String message, Object... arguments)
        +String formatted(MessageFormatter.Format)
        +Importance importance()
        +void println(String message, Object... arguments)
        +String text()
        +^Severity severity()
        --(command line parsing)--
        +Object[] arguments()
        --(conversion)--
        +RuntimeException asException()
        --(messaging)--
        +OperationStatus operationStatus()
        +StackTrace stackTrace()
        +Status status()
        --(time)--
        +Time created()
        +Frequency maximumFrequency()
    }
    
    Receiver --> Transmittable : "receives"
    interface Receiver<T>
    {
        --(messaging)--
        +void receive(T value)
    }
    
    Transceiver --> Debug : "delegates to"
    note right of Transceiver
        Functionality common to transmitters and receivers
    endnote
    interface Transceiver
    {
        --
        +Debug debug()
        +void halt(Throwable cause, String text, Object... arguments)
        +void halt(String text, Object... arguments)
        +void ifDebug(Runnable code)
        --(checks)--
        +boolean isDebugOn()
        +boolean isOn()
        --(messaging)--
        +void announce(String text, Object... arguments)
        +void information(String text, Object... arguments)
        +void narrate(String text, Object... arguments)
        +void problem(Throwable cause, String text, Object... arguments)
        +void problem(Frequency maximumFrequency, String text, Object... arguments)
        +void problem(String text, Object... arguments)
        +void problem(Frequency maximumFrequency, Throwable cause, String text, Object... arguments)
        +void quibble(Frequency maximumFrequency, Throwable cause, String text, Object... arguments)
        +void quibble(Throwable cause, String text, Object... arguments)
        +void quibble(String text, Object... arguments)
        +void quibble(Frequency maximumFrequency, String text, Object... arguments)
        +void throwProblem(Throwable cause, String text, Object... arguments)
        +void throwProblem(String text, Object... arguments)
        +void trace(String text, Object... arguments)
        +void trace(Throwable cause, String text, Object... arguments)
        +void trace(Frequency maximumFrequency, Throwable cause, String text, Object... arguments)
        +void trace(Frequency maximumFrequency, String text, Object... arguments)
        +void warning(String text, Object... arguments)
        +void warning(Frequency maximumFrequency, Throwable cause, String text, Object... arguments)
        +void warning(Throwable cause, String text, Object... arguments)
        +void warning(Frequency maximumFrequency, String text, Object... arguments)
    }
    
@enduml

