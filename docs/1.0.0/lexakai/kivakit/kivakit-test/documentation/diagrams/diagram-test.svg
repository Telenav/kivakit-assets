<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3046.875px" preserveAspectRatio="none" style="width:917px;height:3046px;background:#333333;" version="1.1" viewBox="0 0 917 3046" width="917.7083px" zoomAndPan="magnify"><defs/><g><rect fill="#48494B" height="41.2028" rx="8.3333" ry="8.3333" style="stroke:#545454;stroke-width:1.0416666666666667;" width="96.875" x="403.3854" y="2.0833"/><text fill="#C0C0C0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="20.8333" lengthAdjust="spacing" textLength="73.9583" x="414.8438" y="30.5583">Testing</text><!--MD5=[7a535da8fcaee73e58309ace831a7bb5]
class BaseFailureReporter--><rect codeLine="6" fill="#282828" height="48.055" id="BaseFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="166.6667" x="7.2917" y="1217.2445"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="166.6667" x="7.2917" y="1217.2445"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="166.6667" x="7.2917" y="1240.2995"/><rect codeLine="6" fill="none" height="48.055" id="BaseFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="166.6667" x="7.2917" y="1217.2445"/><ellipse cx="21.875" cy="1232.9386" fill="#C8AC00" rx="10.4167" ry="10.4167" style="stroke:#D8BC00;stroke-width:1.0416666666666667;"/><path d="M21.4681,1229.6407 L20.6197,1233.37 L22.3226,1233.37 Z M20.3695,1227.9928 L22.5728,1227.9928 L25.0326,1237.1053 L23.232,1237.1053 L22.6705,1234.8531 L20.2596,1234.8531 L19.7103,1237.1053 L17.9097,1237.1053 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="129.1667" x="38.5417" y="1237.6628">BaseFailureReporter</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="172.9167" y1="1248.6328" y2="1248.6328"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="172.9167" y1="1256.9661" y2="1256.9661"/><!--MD5=[085076096658226fe7d3ac7a26d9b629]
class Listener--><rect codeLine="8" fill="#282828" height="48.055" id="Listener" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="89.5833" x="400" y="182.8695"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="89.5833" x="400" y="182.8695"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="89.5833" x="400" y="205.9245"/><rect codeLine="8" fill="none" height="48.055" id="Listener" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="89.5833" x="400" y="182.8695"/><ellipse cx="414.5833" cy="198.5636" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M411.9873,195.7255 L411.9873,194.1386 L417.4133,194.1386 L417.4133,195.7255 L415.6006,195.7255 L415.6006,201.6642 L417.4133,201.6642 L417.4133,203.2511 L411.9873,203.2511 L411.9873,201.6642 L413.8,201.6642 L413.8,195.7255 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="52.0833" x="431.25" y="203.2878">Listener</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="401.0417" x2="488.5417" y1="214.2578" y2="214.2578"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="401.0417" x2="488.5417" y1="222.5911" y2="222.5911"/><!--MD5=[9a622fad8a13b5b20e3ac43fd2b84d0a]
class JUnitFailureReporter--><rect codeLine="11" fill="#282828" height="48.055" id="JUnitFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="168.75" x="62.5" y="2613.0778"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="168.75" x="62.5" y="2613.0778"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="168.75" x="62.5" y="2636.1328"/><rect codeLine="11" fill="none" height="48.055" id="JUnitFailureReporter" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="168.75" x="62.5" y="2613.0778"/><ellipse cx="77.0833" cy="2628.772" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M78.9937,2633.197 Q78.5665,2633.4167 78.0965,2633.5266 Q77.6265,2633.6365 77.1077,2633.6365 Q75.2645,2633.6365 74.294,2632.4219 Q73.3236,2631.2073 73.3236,2628.9124 Q73.3236,2626.6113 74.294,2625.3967 Q75.2645,2624.1821 77.1077,2624.1821 Q77.6265,2624.1821 78.1026,2624.292 Q78.5787,2624.4019 78.9937,2624.6216 L78.9937,2626.6235 Q78.5299,2626.1963 78.0935,2625.9979 Q77.6571,2625.7996 77.1932,2625.7996 Q76.2044,2625.7996 75.7009,2626.5839 Q75.1973,2627.3682 75.1973,2628.9124 Q75.1973,2630.4504 75.7009,2631.2347 Q76.2044,2632.019 77.1932,2632.019 Q77.6571,2632.019 78.0935,2631.8207 Q78.5299,2631.6223 78.9937,2631.1951 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="131.25" x="93.75" y="2633.4961">JUnitFailureReporter</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="63.5417" x2="230.2083" y1="2644.4661" y2="2644.4661"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="63.5417" x2="230.2083" y1="2652.7995" y2="2652.7995"/><!--MD5=[740984313bc1b0154b827b0771452201]
class QuickTests--><rect codeLine="15" fill="#282828" height="48.055" id="QuickTests" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="110.4167" x="660.4167" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="110.4167" x="660.4167" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="110.4167" x="660.4167" y="76.7578"/><rect codeLine="15" fill="none" height="48.055" id="QuickTests" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="110.4167" x="660.4167" y="53.7028"/><ellipse cx="675" cy="69.397" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M672.404,66.5588 L672.404,64.9719 L677.83,64.9719 L677.83,66.5588 L676.0173,66.5588 L676.0173,72.4976 L677.83,72.4976 L677.83,74.0845 L672.404,74.0845 L672.404,72.4976 L674.2167,72.4976 L674.2167,66.5588 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="72.9167" x="691.6667" y="74.1211">QuickTests</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="661.4583" x2="769.7917" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="661.4583" x2="769.7917" y1="93.4245" y2="93.4245"/><!--MD5=[48199313adf418ae9233b27dfacc45fd]
class RandomValueFactory--><rect codeLine="19" fill="#282828" height="806.6935" id="RandomValueFactory" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="441.6667" x="323.9583" y="2233.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="441.6667" x="323.9583" y="2233.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="441.6667" x="323.9583" y="2256.9661"/><rect codeLine="19" fill="none" height="806.6935" id="RandomValueFactory" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="441.6667" x="323.9583" y="2233.9111"/><ellipse cx="469.7917" cy="2249.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M471.7021,2254.0304 Q471.2748,2254.2501 470.8049,2254.3599 Q470.3349,2254.4698 469.8161,2254.4698 Q467.9728,2254.4698 467.0024,2253.2552 Q466.0319,2252.0406 466.0319,2249.7457 Q466.0319,2247.4447 467.0024,2246.2301 Q467.9728,2245.0155 469.8161,2245.0155 Q470.3349,2245.0155 470.811,2245.1253 Q471.287,2245.2352 471.7021,2245.4549 L471.7021,2247.4569 Q471.2382,2247.0296 470.8018,2246.8313 Q470.3654,2246.6329 469.9015,2246.6329 Q468.9128,2246.6329 468.4092,2247.4172 Q467.9057,2248.2015 467.9057,2249.7457 Q467.9057,2251.2838 468.4092,2252.0681 Q468.9128,2252.8524 469.9015,2252.8524 Q470.3654,2252.8524 470.8018,2252.654 Q471.2382,2252.4556 471.7021,2252.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="135.4167" x="492.7083" y="2254.3294">RandomValueFactory</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="325" x2="764.5833" y1="2265.2995" y2="2265.2995"/><ellipse cx="335.4167" cy="2300.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="126.0417" x="346.875" y="2307.5806">RandomValueFactory()</text><ellipse cx="335.4167" cy="2320.4142" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="151.0417" x="346.875" y="2327.3254">RandomValueFactory(long)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="325" x2="501.0417" y1="2283.5052" y2="2283.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="504.1667" y="2287.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="588.5417" x2="764.5833" y1="2283.5052" y2="2283.5052"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="325" x2="764.5833" y1="2337.0341" y2="2337.0341"/><ellipse cx="335.4167" cy="2348.4924" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="346.875" y="2355.4036">long seed()</text><ellipse cx="335.4167" cy="2368.2373" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="115.625" x="346.875" y="2375.1485">void seed(long seed)</text><ellipse cx="335.4167" cy="2411.8937" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="112.5" x="346.875" y="2418.8049">char newAsciiChar()</text><ellipse cx="335.4167" cy="2431.6386" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="127.0833" x="346.875" y="2438.5498">String newAsciiString()</text><ellipse cx="335.4167" cy="2451.3835" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="290.625" x="346.875" y="2458.2947">String newAsciiString(int minLength, int maxLength)</text><ellipse cx="335.4167" cy="2471.1283" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="121.875" x="346.875" y="2478.0396">boolean newBoolean()</text><ellipse cx="335.4167" cy="2490.8732" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="80.2083" x="346.875" y="2497.7844">byte newByte()</text><ellipse cx="335.4167" cy="2510.6181" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="247.9167" x="346.875" y="2517.5293">byte newByte(byte minimum, byte maximum)</text><ellipse cx="335.4167" cy="2530.363" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="376.0417" x="346.875" y="2537.2742">byte newByte(byte minimum, byte maximum, Predicate&lt;Byte&gt; filter)</text><ellipse cx="335.4167" cy="2550.1078" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="85.4167" x="346.875" y="2557.019">char newChar()</text><ellipse cx="335.4167" cy="2569.8527" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="160.4167" x="346.875" y="2576.7639">Confidence newConfidence()</text><ellipse cx="335.4167" cy="2589.5976" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="231.25" x="346.875" y="2596.5088">int newCount(int minimum, int maximum)</text><ellipse cx="335.4167" cy="2609.3424" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="308.3333" x="346.875" y="2616.2537">double newDouble(double minimum, double maximum)</text><ellipse cx="335.4167" cy="2629.0873" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="111.4583" x="346.875" y="2635.9985">double newDouble()</text><ellipse cx="335.4167" cy="2648.8322" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="175" x="346.875" y="2655.7434">double newDoubleZeroToOne()</text><ellipse cx="335.4167" cy="2668.5771" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="190.625" x="346.875" y="2675.4883">T newFrom(Collection&lt;T&gt; values)</text><ellipse cx="335.4167" cy="2688.3219" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="123.9583" x="346.875" y="2695.2332">T newFrom(T[] values)</text><ellipse cx="335.4167" cy="2708.0668" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="216.6667" x="346.875" y="2714.978">Identifier newIdentifier(long maximum)</text><ellipse cx="335.4167" cy="2727.8117" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="152.0833" x="346.875" y="2734.7229">int newIndex(int maximum)</text><ellipse cx="335.4167" cy="2747.5566" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="356.25" x="346.875" y="2754.4678">int newInt(int minimum, int maximum, Predicate&lt;Integer&gt; filter)</text><ellipse cx="335.4167" cy="2767.3014" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="346.875" y="2774.2126">int newInt()</text><ellipse cx="335.4167" cy="2787.0463" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="211.4583" x="346.875" y="2793.9575">int newInt(int minimum, int maximum)</text><ellipse cx="335.4167" cy="2806.7912" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="256.25" x="346.875" y="2813.7024">long newLong(long minimum, long maximum)</text><ellipse cx="335.4167" cy="2826.5361" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="389.5833" x="346.875" y="2833.4473">long newLong(long minimum, long maximum, Predicate&lt;Long&gt; filter)</text><ellipse cx="335.4167" cy="2846.2809" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="86.4583" x="346.875" y="2853.1921">long newLong()</text><ellipse cx="335.4167" cy="2866.0258" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="273.9583" x="346.875" y="2872.937">short newShort(short minimum, short maximum)</text><ellipse cx="335.4167" cy="2885.7707" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="93.75" x="346.875" y="2892.6819">short newShort()</text><ellipse cx="335.4167" cy="2905.5155" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="409.375" x="346.875" y="2912.4268">short newShort(short minimum, short maximum, Predicate&lt;Short&gt; filter)</text><ellipse cx="335.4167" cy="2925.2604" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="100" x="346.875" y="2932.1716">String newString()</text><ellipse cx="335.4167" cy="2945.0053" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="263.5417" x="346.875" y="2951.9165">String newString(int minLength, int maxLength)</text><ellipse cx="335.4167" cy="2964.7502" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="261.4583" x="346.875" y="2971.6614">double newUnsignedDouble(double maximum)</text><ellipse cx="335.4167" cy="2984.495" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="164.5833" x="346.875" y="2991.4063">double newUnsignedDouble()</text><ellipse cx="335.4167" cy="3004.2399" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="115.625" x="346.875" y="3011.1511">int newUnsignedInt()</text><ellipse cx="335.4167" cy="3023.9848" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="139.5833" x="346.875" y="3030.896">long newUnsignedLong()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="325" x2="517.7083" y1="2394.7296" y2="2394.7296"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="47.9167" x="520.8333" y="2398.5392">(factory)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="571.875" x2="764.5833" y1="2394.7296" y2="2394.7296"/><!--MD5=[89db34bc33795ffaa231991df862abd8]
class SlowTests--><rect codeLine="62" fill="#282828" height="48.055" id="SlowTests" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="103.125" x="807.8125" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="103.125" x="807.8125" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="103.125" x="807.8125" y="76.7578"/><rect codeLine="62" fill="none" height="48.055" id="SlowTests" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="103.125" x="807.8125" y="53.7028"/><ellipse cx="822.3958" cy="69.397" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M819.7998,66.5588 L819.7998,64.9719 L825.2258,64.9719 L825.2258,66.5588 L823.4131,66.5588 L823.4131,72.4976 L825.2258,72.4976 L825.2258,74.0845 L819.7998,74.0845 L819.7998,72.4976 L821.6125,72.4976 L821.6125,66.5588 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="65.625" x="839.0625" y="74.1211">SlowTests</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="808.8542" x2="909.8958" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="808.8542" x2="909.8958" y1="93.4245" y2="93.4245"/><!--MD5=[b5200ea67374d4881b46d20c0bf2076b]
class TestWatcher--><rect fill="#282828" height="48.055" id="TestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="116.6667" x="507.2917" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="116.6667" x="507.2917" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="116.6667" x="507.2917" y="76.7578"/><rect fill="none" height="48.055" id="TestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="116.6667" x="507.2917" y="53.7028"/><ellipse cx="521.875" cy="69.397" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M523.7854,73.822 Q523.3582,74.0417 522.8882,74.1516 Q522.4182,74.2615 521.8994,74.2615 Q520.0562,74.2615 519.0857,73.0469 Q518.1152,71.8323 518.1152,69.5374 Q518.1152,67.2363 519.0857,66.0217 Q520.0562,64.8071 521.8994,64.8071 Q522.4182,64.8071 522.8943,64.917 Q523.3704,65.0269 523.7854,65.2466 L523.7854,67.2485 Q523.3215,66.8213 522.8851,66.6229 Q522.4487,66.4246 521.9849,66.4246 Q520.9961,66.4246 520.4926,67.2089 Q519.989,67.9932 519.989,69.5374 Q519.989,71.0754 520.4926,71.8597 Q520.9961,72.644 521.9849,72.644 Q522.4487,72.644 522.8851,72.4457 Q523.3215,72.2473 523.7854,71.8201 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="79.1667" x="538.5417" y="74.1211">TestWatcher</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="508.3333" x2="622.9167" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="508.3333" x2="622.9167" y1="93.4245" y2="93.4245"/><!--MD5=[1c1e497a52719d36c77368d67b52be7b]
class UnitTest--><rect codeLine="70" fill="#282828" height="1814.7705" id="UnitTest" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="667.7083" x="210.9375" y="333.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="667.7083" x="210.9375" y="333.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="667.7083" x="210.9375" y="356.9661"/><rect codeLine="70" fill="none" height="1814.7705" id="UnitTest" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="667.7083" x="210.9375" y="333.9111"/><ellipse cx="509.8958" cy="349.6053" fill="#C8AC00" rx="10.4167" ry="10.4167" style="stroke:#D8BC00;stroke-width:1.0416666666666667;"/><path d="M509.4889,346.3074 L508.6405,350.0366 L510.3434,350.0366 Z M508.3903,344.6594 L510.5937,344.6594 L513.0534,353.772 L511.2528,353.772 L510.6913,351.5198 L508.2804,351.5198 L507.7311,353.772 L505.9306,353.772 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="55.2083" x="532.8125" y="354.3294">UnitTest</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="211.9792" x2="877.6042" y1="365.2995" y2="365.2995"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="877.6042" y1="373.6328" y2="373.6328"/><ellipse cx="222.3958" cy="385.0911" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="138.5417" x="233.8542" y="392.0024">void testBeforeUnitTest()</text><ellipse cx="222.3958" cy="404.836" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="87.5" x="233.8542" y="411.7472">void testSetup()</text><polygon fill="#FFFF44" points="222.3958,419.3726,226.5625,423.5392,222.3958,427.7059,218.2292,423.5392" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="233.8542" y="431.4921">boolean ensure(boolean condition)</text><polygon fill="#FFFF44" points="222.3958,439.1174,226.5625,443.2841,222.3958,447.4508,218.2292,443.2841" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="382.2917" x="233.8542" y="451.237">void ensure(boolean condition, String message, Object... arguments)</text><polygon fill="#FFFF44" points="222.3958,458.8623,226.5625,463.029,222.3958,467.1956,218.2292,463.029" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="333.3333" x="233.8542" y="470.9819">void ensureBetween(double actual, double low, double high)</text><polygon fill="#FFFF44" points="222.3958,478.6072,226.5625,482.7738,222.3958,486.9405,218.2292,482.7738" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="212.5" x="233.8542" y="490.7267">void ensureEqual(T given, T expected)</text><polygon fill="#FFFF44" points="222.3958,498.3521,226.5625,502.5187,222.3958,506.6854,218.2292,502.5187" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="419.7917" x="233.8542" y="510.4716">void ensureEqual(T given, T expected, String message, Object... arguments)</text><polygon fill="#FFFF44" points="222.3958,518.0969,226.5625,522.2636,222.3958,526.4303,218.2292,522.2636" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="203.125" x="233.8542" y="530.2165">void ensureFalse(boolean condition)</text><polygon fill="#FFFF44" points="222.3958,537.8418,226.5625,542.0085,222.3958,546.1751,218.2292,542.0085" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="410.4167" x="233.8542" y="549.9613">void ensureFalse(boolean condition, String message, Object... arguments)</text><polygon fill="#FFFF44" points="222.3958,557.5867,226.5625,561.7533,222.3958,565.92,218.2292,561.7533" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="164.5833" x="233.8542" y="569.7062">void ensureNotEqual(T a, T b)</text><polygon fill="#FFFF44" points="222.3958,577.3315,226.5625,581.4982,222.3958,585.6649,218.2292,581.4982" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="132.2917" x="233.8542" y="589.4511">void ensureNull(Object)</text><polygon fill="#FFFF44" points="222.3958,597.0764,226.5625,601.2431,222.3958,605.4097,218.2292,601.2431" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="197.9167" x="233.8542" y="609.196">void ensureThrows(Runnable code)</text><polygon fill="#FFFF44" points="222.3958,616.8213,226.5625,620.988,222.3958,625.1546,218.2292,620.988" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="442.7083" x="233.8542" y="628.9408">void ensureWithin(double expected, double actual, double maximumDifference)</text><polygon fill="#FFFF44" points="222.3958,636.5662,226.5625,640.7328,222.3958,644.8995,218.2292,640.7328" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="177.0833" x="233.8542" y="648.6857">void ensureZero(Number value)</text><polygon fill="#FFFF44" points="222.3958,656.311,226.5625,660.4777,222.3958,664.6444,218.2292,660.4777" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="231.25" x="233.8542" y="668.4306">void iterateIndexes(Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,676.0559,226.5625,680.2226,222.3958,684.3892,218.2292,680.2226" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="179.1667" x="233.8542" y="688.1755">void iterations(Count iterations)</text><polygon fill="#FFFF44" points="222.3958,695.8008,226.5625,699.9674,222.3958,704.1341,218.2292,699.9674" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="159.375" x="233.8542" y="707.9203">void iterations(int iterations)</text><polygon fill="#FFFF44" points="222.3958,715.5457,226.5625,719.7123,222.3958,723.879,218.2292,719.7123" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="297.9167" x="233.8542" y="727.6652">String randomAsciiString(int minimum, int maximum)</text><polygon fill="#FFFF44" points="222.3958,735.2905,226.5625,739.4572,222.3958,743.6239,218.2292,739.4572" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="148.9583" x="233.8542" y="747.4101">String randomAsciiString()</text><polygon fill="#FFFF44" points="222.3958,755.0354,226.5625,759.2021,222.3958,763.3687,218.2292,759.2021" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="330.2083" x="233.8542" y="767.1549">void randomIndexes(Repeats, Count, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,774.7803,226.5625,778.9469,222.3958,783.1136,218.2292,778.9469" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="289.5833" x="233.8542" y="786.8998">void randomIndexes(Repeats, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,794.5251,226.5625,798.6918,222.3958,802.8585,218.2292,798.6918" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="409.375" x="233.8542" y="806.6447">void randomIndexes(Repeats, Count, int maximum, Consumer&lt;Integer&gt;)</text><ellipse cx="222.3958" cy="843.3899" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="135.4167" x="233.8542" y="850.3011">boolean isRandomTest()</text><polygon fill="#FFFF44" points="222.3958,857.9264,226.5625,862.0931,222.3958,866.2598,218.2292,862.0931" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="317.7083" x="233.8542" y="870.046">boolean ensureClose(Duration given, Duration expected)</text><polygon fill="#FFFF44" points="222.3958,877.6713,226.5625,881.838,222.3958,886.0046,218.2292,881.838" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="143.75" x="233.8542" y="889.7909">T ensureNotNull(T object)</text><polygon fill="#FFFF44" points="222.3958,897.4162,226.5625,901.5828,222.3958,905.7495,218.2292,901.5828" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="121.875" x="233.8542" y="909.5357">boolean isQuickTest()</text><polygon fill="#FFFF44" points="222.3958,917.1611,226.5625,921.3277,222.3958,925.4944,218.2292,921.3277" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="114.5833" x="233.8542" y="929.2806">boolean isWindows()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="518.2292" y1="826.2258" y2="826.2258"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="46.875" x="521.3542" y="830.0354">(checks)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="571.3542" x2="877.6042" y1="826.2258" y2="826.2258"/><polygon fill="#FFFF44" points="222.3958,960.8175,226.5625,964.9841,222.3958,969.1508,218.2292,964.9841" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="192.7083" x="233.8542" y="972.937">void ensureEqualArray(T[] a, T[] b)</text><polygon fill="#FFFF44" points="222.3958,980.5623,226.5625,984.729,222.3958,988.8957,218.2292,984.729" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="215.625" x="233.8542" y="992.6819">void ensureEqualArray(byte[] a, byte[])</text><polygon fill="#FFFF44" points="222.3958,1000.3072,226.5625,1004.4739,222.3958,1008.6405,218.2292,1004.4739" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="57.2917" x="233.8542" y="1012.4268">int index()</text><polygon fill="#FFFF44" points="222.3958,1020.0521,226.5625,1024.2188,222.3958,1028.3854,218.2292,1024.2188" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="98.9583" x="233.8542" y="1032.1716">Count iterations()</text><polygon fill="#FFFF44" points="222.3958,1039.797,226.5625,1043.9636,222.3958,1048.1303,218.2292,1043.9636" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="101.0417" x="233.8542" y="1051.9165">int randomIndex()</text><polygon fill="#FFFF44" points="222.3958,1059.5418,226.5625,1063.7085,222.3958,1067.8752,218.2292,1063.7085" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="94.7917" x="233.8542" y="1071.6614">void resetIndex()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="510.4167" y1="948.8617" y2="948.8617"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="513.5417" y="952.6713">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="579.1667" x2="877.6042" y1="948.8617" y2="948.8617"/><polygon fill="#FFFF44" points="222.3958,1103.1982,226.5625,1107.3649,222.3958,1111.5316,218.2292,1107.3649" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="265.625" x="233.8542" y="1115.3178">T newRandomValueFactory(Source&lt;T&gt; factory)</text><polygon fill="#FFFF44" points="222.3958,1122.9431,226.5625,1127.1098,222.3958,1131.2764,218.2292,1127.1098" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="244.7917" x="233.8542" y="1135.0627">RandomValueFactory randomValueFactory()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="517.7083" y1="1091.2425" y2="1091.2425"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="47.9167" x="520.8333" y="1095.0521">(factory)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="571.875" x2="877.6042" y1="1091.2425" y2="1091.2425"/><polygon fill="#FFFF44" points="222.3958,1166.5995,226.5625,1170.7662,222.3958,1174.9329,218.2292,1170.7662" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="470.8333" x="233.8542" y="1178.7191">void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="532.2917" y1="1154.6438" y2="1154.6438"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="18.75" x="535.4167" y="1158.4534">(io)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="557.2917" x2="877.6042" y1="1154.6438" y2="1154.6438"/><polygon fill="#FFFF44" points="222.3958,1210.2559,226.5625,1214.4226,222.3958,1218.5893,218.2292,1214.4226" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="141.6667" x="233.8542" y="1222.3755">void loop(Loopable code)</text><polygon fill="#FFFF44" points="222.3958,1230.0008,226.5625,1234.1675,222.3958,1238.3341,218.2292,1234.1675" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="196.875" x="233.8542" y="1242.1204">void loop(int times, Runnable code)</text><polygon fill="#FFFF44" points="222.3958,1249.7457,226.5625,1253.9124,222.3958,1258.079,218.2292,1253.9124" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="296.875" x="233.8542" y="1261.8652">void loop(int minimum, int maximum, Loopable code)</text><polygon fill="#FFFF44" points="222.3958,1269.4906,226.5625,1273.6572,222.3958,1277.8239,218.2292,1273.6572" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="297.9167" x="233.8542" y="1281.6101">void loop(int minimum, int maximum, Runnable code)</text><polygon fill="#FFFF44" points="222.3958,1289.2354,226.5625,1293.4021,222.3958,1297.5688,218.2292,1293.4021" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="142.7083" x="233.8542" y="1301.355">void loop(Runnable code)</text><polygon fill="#FFFF44" points="222.3958,1308.9803,226.5625,1313.147,222.3958,1317.3136,218.2292,1313.147" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="233.8542" y="1321.0999">void loop(int times, Loopable code)</text><polygon fill="#FFFF44" points="222.3958,1328.7252,226.5625,1332.8918,222.3958,1337.0585,218.2292,1332.8918" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="82.2917" x="233.8542" y="1340.8447">int nextIndex()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="514.0625" y1="1198.3002" y2="1198.3002"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="55.2083" x="517.1875" y="1202.1098">(iteration)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="575.5208" x2="877.6042" y1="1198.3002" y2="1198.3002"/><polygon fill="#FFFF44" points="222.3958,1372.3816,226.5625,1376.5483,222.3958,1380.7149,218.2292,1376.5483" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="200" x="233.8542" y="1384.5011">void iterateBytes(Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1392.1265,226.5625,1396.2931,222.3958,1400.4598,218.2292,1396.2931" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="233.3333" x="233.8542" y="1404.246">void iterateIntegers(Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1411.8713,226.5625,1416.038,222.3958,1420.2047,218.2292,1416.038" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="210.4167" x="233.8542" y="1423.9909">void iterateLongs(Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1431.6162,226.5625,1435.7829,222.3958,1439.9495,218.2292,1435.7829" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="214.5833" x="233.8542" y="1443.7358">void iterateShorts(Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="222.3958,1451.3611,226.5625,1455.5278,222.3958,1459.6944,218.2292,1455.5278" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="134.375" x="233.8542" y="1463.4806">char randomAsciiChar()</text><polygon fill="#FFFF44" points="222.3958,1471.106,226.5625,1475.2726,222.3958,1479.4393,218.2292,1475.2726" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="377.0833" x="233.8542" y="1483.2255">List&lt;Byte&gt; randomByteList(Repeats, byte minimum, byte maximum)</text><polygon fill="#FFFF44" points="222.3958,1490.8508,226.5625,1495.0175,222.3958,1499.1842,218.2292,1495.0175" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="203.125" x="233.8542" y="1502.9704">List&lt;Byte&gt; randomByteList(Repeats)</text><polygon fill="#FFFF44" points="222.3958,1510.5957,226.5625,1514.7624,222.3958,1518.929,218.2292,1514.7624" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="601.0417" x="233.8542" y="1522.7153">void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1530.3406,226.5625,1534.5072,222.3958,1538.6739,218.2292,1534.5072" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="298.9583" x="233.8542" y="1542.4601">void randomBytes(Repeats, Count, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1550.0854,226.5625,1554.2521,222.3958,1558.4188,218.2292,1554.2521" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="258.3333" x="233.8542" y="1562.205">void randomBytes(Repeats, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1569.8303,226.5625,1573.997,222.3958,1578.1637,218.2292,1573.997" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="560.4167" x="233.8542" y="1581.9499">void randomBytes(Repeats, byte minimum, byte maximum, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1589.5752,226.5625,1593.7419,222.3958,1597.9085,218.2292,1593.7419" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="386.4583" x="233.8542" y="1601.6947">void randomBytes(Repeats, Predicate&lt;Byte&gt; filter, Consumer&lt;Byte&gt;)</text><polygon fill="#FFFF44" points="222.3958,1609.3201,226.5625,1613.4867,222.3958,1617.6534,218.2292,1613.4867" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="378.125" x="233.8542" y="1621.4396">int randomInt(int minimum, int maximum, Predicate&lt;Integer&gt; filter)</text><polygon fill="#FFFF44" points="222.3958,1629.0649,226.5625,1633.2316,222.3958,1637.3983,218.2292,1633.2316" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="233.3333" x="233.8542" y="1641.1845">int randomInt(int minimum, int maximum)</text><polygon fill="#FFFF44" points="222.3958,1648.8098,226.5625,1652.9765,222.3958,1657.1431,218.2292,1652.9765" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="84.375" x="233.8542" y="1660.9294">int randomInt()</text><polygon fill="#FFFF44" points="222.3958,1668.5547,226.5625,1672.7214,222.3958,1676.888,218.2292,1672.7214" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="366.6667" x="233.8542" y="1680.6742">List&lt;Integer&gt; randomIntList(Repeats, int minimum, int maximum)</text><polygon fill="#FFFF44" points="222.3958,1688.2996,226.5625,1692.4662,222.3958,1696.6329,218.2292,1692.4662" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="211.4583" x="233.8542" y="1700.4191">List&lt;Integer&gt; randomIntList(Repeats)</text><polygon fill="#FFFF44" points="222.3958,1708.0444,226.5625,1712.2111,222.3958,1716.3778,218.2292,1712.2111" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="407.2917" x="233.8542" y="1720.164">List&lt;Integer&gt; randomIntList(Repeats, Count, int minimum, int maximum)</text><polygon fill="#FFFF44" points="222.3958,1727.7893,226.5625,1731.956,222.3958,1736.1226,218.2292,1731.956" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="566.6667" x="233.8542" y="1739.9089">void randomInts(Repeats, int minimum, int maximum, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1747.5342,226.5625,1751.7008,222.3958,1755.8675,218.2292,1751.7008" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="266.6667" x="233.8542" y="1759.6537">void randomInts(Repeats, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1767.2791,226.5625,1771.4457,222.3958,1775.6124,218.2292,1771.4457" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="307.2917" x="233.8542" y="1779.3986">void randomInts(Repeats, Count, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1787.0239,226.5625,1791.1906,222.3958,1795.3573,218.2292,1791.1906" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="607.2917" x="233.8542" y="1799.1435">void randomInts(Repeats, Count, int minimum, int maximum, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1806.7688,226.5625,1810.9355,222.3958,1815.1021,218.2292,1810.9355" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="411.4583" x="233.8542" y="1818.8883">void randomInts(Repeats, Predicate&lt;Integer&gt; filter, Consumer&lt;Integer&gt;)</text><polygon fill="#FFFF44" points="222.3958,1826.5137,226.5625,1830.6803,222.3958,1834.847,218.2292,1830.6803" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="213.5417" x="233.8542" y="1838.6332">List&lt;Long&gt; randomLongList(Repeats)</text><polygon fill="#FFFF44" points="222.3958,1846.2585,226.5625,1850.4252,222.3958,1854.5919,218.2292,1850.4252" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="389.5833" x="233.8542" y="1858.3781">List&lt;Long&gt; randomLongList(Repeats, long minimum, long maximum)</text><polygon fill="#FFFF44" points="222.3958,1866.0034,226.5625,1870.1701,222.3958,1874.3368,218.2292,1870.1701" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="309.375" x="233.8542" y="1878.123">void randomLongs(Repeats, Count, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1885.7483,226.5625,1889.915,222.3958,1894.0816,218.2292,1889.915" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="578.125" x="233.8542" y="1897.8678">void randomLongs(Repeats, long minimum, long maximum, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1905.4932,226.5625,1909.6598,222.3958,1913.8265,218.2292,1909.6598" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="268.75" x="233.8542" y="1917.6127">void randomLongs(Repeats, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1925.238,226.5625,1929.4047,222.3958,1933.5714,218.2292,1929.4047" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="618.75" x="233.8542" y="1937.3576">void randomLongs(Repeats, Count, long minimum, long maximum, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1944.9829,226.5625,1949.1496,222.3958,1953.3162,218.2292,1949.1496" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="402.0833" x="233.8542" y="1957.1025">void randomLongs(Repeats, Predicate&lt;Long&gt; filter, Consumer&lt;Long&gt;)</text><polygon fill="#FFFF44" points="222.3958,1964.7278,226.5625,1968.8944,222.3958,1973.0611,218.2292,1968.8944" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="217.7083" x="233.8542" y="1976.8473">List&lt;Short&gt; randomShortList(Repeats)</text><polygon fill="#FFFF44" points="222.3958,1984.4727,226.5625,1988.6393,222.3958,1992.806,218.2292,1988.6393" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="404.1667" x="233.8542" y="1996.5922">List&lt;Short&gt; randomShortList(Repeats, short minimum, short maximum)</text><polygon fill="#FFFF44" points="222.3958,2004.2175,226.5625,2008.3842,222.3958,2012.5509,218.2292,2008.3842" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="272.9167" x="233.8542" y="2016.3371">void randomShorts(Repeats, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="222.3958,2023.9624,226.5625,2028.1291,222.3958,2032.2957,218.2292,2028.1291" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="313.5417" x="233.8542" y="2036.0819">void randomShorts(Repeats, Count, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="222.3958,2043.7073,226.5625,2047.8739,222.3958,2052.0406,218.2292,2047.8739" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="635.4167" x="233.8542" y="2055.8268">void randomShorts(Repeats, Count, short minimum, short maximum, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="222.3958,2063.4521,226.5625,2067.6188,222.3958,2071.7855,218.2292,2067.6188" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="408.3333" x="233.8542" y="2075.5717">void randomShorts(Repeats, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><polygon fill="#FFFF44" points="222.3958,2083.197,226.5625,2087.3637,222.3958,2091.5304,218.2292,2087.3637" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="594.7917" x="233.8542" y="2095.3166">void randomShorts(Repeats, short minimum, short maximum, Predicate&lt;Short&gt; filter, Consumer&lt;Short&gt;)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="513.0208" y1="1360.4258" y2="1360.4258"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="57.2917" x="516.1458" y="1364.2354">(primitive)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="576.5625" x2="877.6042" y1="1360.4258" y2="1360.4258"/><polygon fill="#FFFF44" points="222.3958,2126.8534,226.5625,2131.0201,222.3958,2135.1868,218.2292,2131.0201" style="stroke:#B38D22;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="253.125" x="233.8542" y="2138.973">void fail(String message, Object... arguments)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="211.9792" x2="520.3125" y1="2114.8977" y2="2114.8977"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="42.7083" x="523.4375" y="2118.7073">(status)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="569.2708" x2="877.6042" y1="2114.8977" y2="2114.8977"/><!--MD5=[0a1b7af288e15ace6ac643bcac805833]
class UnitTestWatcher--><rect codeLine="165" fill="#282828" height="83.3781" id="UnitTestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="179.1667" x="600" y="165.1611"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="179.1667" x="600" y="165.1611"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="179.1667" x="600" y="188.2161"/><rect codeLine="165" fill="none" height="83.3781" id="UnitTestWatcher" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="179.1667" x="600" y="165.1611"/><ellipse cx="630.5208" cy="180.8553" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M632.4312,185.2804 Q632.004,185.5001 631.534,185.6099 Q631.064,185.7198 630.5452,185.7198 Q628.702,185.7198 627.7315,184.5052 Q626.7611,183.2906 626.7611,180.9957 Q626.7611,178.6947 627.7315,177.4801 Q628.702,176.2655 630.5452,176.2655 Q631.064,176.2655 631.5401,176.3753 Q632.0162,176.4852 632.4312,176.7049 L632.4312,178.7069 Q631.9674,178.2796 631.531,178.0813 Q631.0946,177.8829 630.6307,177.8829 Q629.6419,177.8829 629.1384,178.6672 Q628.6348,179.4515 628.6348,180.9957 Q628.6348,182.5338 629.1384,183.3181 Q629.6419,184.1024 630.6307,184.1024 Q631.0946,184.1024 631.531,183.904 Q631.9674,183.7056 632.4312,183.2784 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="106.25" x="650.7292" y="185.5794">UnitTestWatcher</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="601.0417" x2="778.125" y1="196.5495" y2="196.5495"/><ellipse cx="611.4583" cy="231.9194" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="146.875" x="622.9167" y="238.8306">UnitTestWatcher(UnitTest)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="601.0417" x2="645.8333" y1="214.7552" y2="214.7552"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="648.9583" y="218.5649">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="733.3333" x2="778.125" y1="214.7552" y2="214.7552"/><!--MD5=[5ae4101d91959fb15b50b34216640ae6]
reverse link BaseFailureReporter to JUnitFailureReporter--><path codeLine="10" d="M92.3958,1286.2132 C101.1458,1502.8174 139.4688,2452.4736 145.9479,2612.932 " fill="none" id="BaseFailureReporter-backto-JUnitFailureReporter" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="85.1042,1286.3799,91.5521,1265.2757,99.6771,1285.7965,85.1042,1286.3799" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[d6b3a6e0532d2fae8e8d79d7367f1965]
reverse link TestWatcher to UnitTest--><path codeLine="66" d="M564.8333,122.9215 C564.0313,167.5778 562.6771,242.8382 561.0521,333.8695 " fill="none" id="TestWatcher-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="557.5417,122.5986,565.2083,101.9007,572.125,122.859,557.5417,122.5986" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[863c56546d36886e13c506b8229b01f0]
reverse link Listener to UnitTest--><path codeLine="67" d="M449.0313,251.6507 C451.0729,272.6924 453.7708,300.557 456.9688,333.5361 " fill="none" id="Listener-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="441.7708,252.3174,447.0208,230.8799,456.2917,250.9111,441.7708,252.3174" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[99270df24ca43f779150328e3699accb]
link UnitTest to JUnitFailureReporter--><path codeLine="68" d="M286.0521,2148.5257 C226.1563,2358.3174 174.2292,2540.1924 154.9063,2607.859 " fill="none" id="UnitTest-to-JUnitFailureReporter" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#545454" points="153.4688,2612.9111,160.0506,2605.0415,154.8996,2607.9032,152.0379,2602.7522,153.4688,2612.9111" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="201.0417" x="280.2083" y="2195.9961">reports validation failures with</text><!--MD5=[6e51e05319cfef764cb163df1beb41b3]
link UnitTest to RandomValueFactory--><path codeLine="69" d="M544.7917,2148.5257 C544.7917,2175.5882 544.7917,2202.182 544.7917,2228.1299 " fill="none" id="UnitTest-to-RandomValueFactory" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#545454" points="544.7917,2233.6611,548.9583,2224.2861,544.7917,2228.4528,540.625,2224.2861,544.7917,2233.6611" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="30.2083" x="548.9583" y="2195.9961">uses</text><!--MD5=[e61d0cd2b87cd82b1ebef6380084820f]
reverse link TestWatcher to UnitTestWatcher--><path codeLine="163" d="M603.0208,117.0361 C617.7813,132.1715 634.7604,149.5882 649.75,164.9528 " fill="none" id="TestWatcher-backto-UnitTestWatcher" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="597.3958,121.7236,588.0729,101.7132,607.8438,111.5361,597.3958,121.7236" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[652a750b4ee846095a9b28266edb574e]
reverse link UnitTestWatcher to UnitTest--><path codeLine="164" d="M681.9479,262.3382 C679.2083,281.8382 675.8229,305.9736 671.9271,333.7236 " fill="none" id="UnitTestWatcher-backto-UnitTest" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="#333333" points="683.8646,248.6507,678.8725,254.2634,682.1334,261.0303,687.1255,255.4176,683.8646,248.6507" style="stroke:#545454;stroke-width:1.5625;"/><text fill="#A0A0A0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="144.7917" x="681.25" y="295.9961">watches for failures in</text><!--MD5=[596295187a5586b1533697b843404771]
@startuml

    !include lexakai.theme
    
    title "Testing"
    
    abstract BaseFailureReporter
    
    interface Listener
    
    BaseFailureReporter <|- - JUnitFailureReporter
    class JUnitFailureReporter
    {
    }
    
    interface QuickTests
    {
    }
    
    class RandomValueFactory
    {
        - -(constructors)- -
        +RandomValueFactory()
        +RandomValueFactory(long)
        - -
        +long seed()
        +void seed(long seed)
        - -(factory)- -
        +char newAsciiChar()
        +String newAsciiString()
        +String newAsciiString(int minLength, int maxLength)
        +boolean newBoolean()
        +byte newByte()
        +byte newByte(byte minimum, byte maximum)
        +byte newByte(byte minimum, byte maximum, Predicate<Byte> filter)
        +char newChar()
        +Confidence newConfidence()
        +int newCount(int minimum, int maximum)
        +double newDouble(double minimum, double maximum)
        +double newDouble()
        +double newDoubleZeroToOne()
        +T newFrom(Collection<T> values)
        +T newFrom(T[] values)
        +Identifier newIdentifier(long maximum)
        +int newIndex(int maximum)
        +int newInt(int minimum, int maximum, Predicate<Integer> filter)
        +int newInt()
        +int newInt(int minimum, int maximum)
        +long newLong(long minimum, long maximum)
        +long newLong(long minimum, long maximum, Predicate<Long> filter)
        +long newLong()
        +short newShort(short minimum, short maximum)
        +short newShort()
        +short newShort(short minimum, short maximum, Predicate<Short> filter)
        +String newString()
        +String newString(int minLength, int maxLength)
        +double newUnsignedDouble(double maximum)
        +double newUnsignedDouble()
        +int newUnsignedInt()
        +long newUnsignedLong()
    }
    
    interface SlowTests
    {
    }
    
    TestWatcher <|- - UnitTest
    Listener <|- - UnitTest
    UnitTest - -> JUnitFailureReporter : "reports validation failures with"
    UnitTest - -> RandomValueFactory : "uses"
    abstract class UnitTest
    {
        - -
        +void testBeforeUnitTest()
        +void testSetup()
        #boolean ensure(boolean condition)
        #void ensure(boolean condition, String message, Object... arguments)
        #void ensureBetween(double actual, double low, double high)
        #void ensureEqual(T given, T expected)
        #void ensureEqual(T given, T expected, String message, Object... arguments)
        #void ensureFalse(boolean condition)
        #void ensureFalse(boolean condition, String message, Object... arguments)
        #void ensureNotEqual(T a, T b)
        #void ensureNull(Object)
        #void ensureThrows(Runnable code)
        #void ensureWithin(double expected, double actual, double maximumDifference)
        #void ensureZero(Number value)
        #void iterateIndexes(Consumer<Integer>)
        #void iterations(Count iterations)
        #void iterations(int iterations)
        #String randomAsciiString(int minimum, int maximum)
        #String randomAsciiString()
        #void randomIndexes(Repeats, Count, Consumer<Integer>)
        #void randomIndexes(Repeats, Consumer<Integer>)
        #void randomIndexes(Repeats, Count, int maximum, Consumer<Integer>)
        - -(checks)- -
        +boolean isRandomTest()
        #boolean ensureClose(Duration given, Duration expected)
        #T ensureNotNull(T object)
        #boolean isQuickTest()
        #boolean isWindows()
        - -(collection)- -
        #void ensureEqualArray(T[] a, T[] b)
        #void ensureEqualArray(byte[] a, byte[])
        #int index()
        #Count iterations()
        #int randomIndex()
        #void resetIndex()
        - -(factory)- -
        #T newRandomValueFactory(Source<T> factory)
        #RandomValueFactory randomValueFactory()
        - -(io)- -
        #void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)
        - -(iteration)- -
        #void loop(Loopable code)
        #void loop(int times, Runnable code)
        #void loop(int minimum, int maximum, Loopable code)
        #void loop(int minimum, int maximum, Runnable code)
        #void loop(Runnable code)
        #void loop(int times, Loopable code)
        #int nextIndex()
        - -(primitive)- -
        #void iterateBytes(Consumer<Byte>)
        #void iterateIntegers(Consumer<Integer>)
        #void iterateLongs(Consumer<Long>)
        #void iterateShorts(Consumer<Short>)
        #char randomAsciiChar()
        #List<Byte> randomByteList(Repeats, byte minimum, byte maximum)
        #List<Byte> randomByteList(Repeats)
        #void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Count, Consumer<Byte>)
        #void randomBytes(Repeats, Consumer<Byte>)
        #void randomBytes(Repeats, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Predicate<Byte> filter, Consumer<Byte>)
        #int randomInt(int minimum, int maximum, Predicate<Integer> filter)
        #int randomInt(int minimum, int maximum)
        #int randomInt()
        #List<Integer> randomIntList(Repeats, int minimum, int maximum)
        #List<Integer> randomIntList(Repeats)
        #List<Integer> randomIntList(Repeats, Count, int minimum, int maximum)
        #void randomInts(Repeats, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Consumer<Integer>)
        #void randomInts(Repeats, Count, Consumer<Integer>)
        #void randomInts(Repeats, Count, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Predicate<Integer> filter, Consumer<Integer>)
        #List<Long> randomLongList(Repeats)
        #List<Long> randomLongList(Repeats, long minimum, long maximum)
        #void randomLongs(Repeats, Count, Consumer<Long>)
        #void randomLongs(Repeats, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Consumer<Long>)
        #void randomLongs(Repeats, Count, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Predicate<Long> filter, Consumer<Long>)
        #List<Short> randomShortList(Repeats)
        #List<Short> randomShortList(Repeats, short minimum, short maximum)
        #void randomShorts(Repeats, Consumer<Short>)
        #void randomShorts(Repeats, Count, Consumer<Short>)
        #void randomShorts(Repeats, Count, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        - -(status)- -
        #void fail(String message, Object... arguments)
    }
    
    TestWatcher <|- - UnitTestWatcher
    UnitTestWatcher o- - UnitTest : "watches for failures in"
    class UnitTestWatcher
    {
        - -(constructors)- -
        +UnitTestWatcher(UnitTest)
    }
    
@enduml

@startuml









skinparam backgroundColor #333333






skinparam  {
    defaultFontName   "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
    defaultFontSize   12
    defaultTextAlignment left
    shadowing false
    RoundCorner 10
    TitleFontSize 18
}

skinparam defaultFontName       "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
skinparam defaultFontSize       12
skinparam dpi                   100
skinparam shadowing             false
skinparam roundcorner           16
skinparam ParticipantPadding    40
skinparam BoxPadding            40
skinparam Padding               3
skinparam ArrowColor            #545454
skinparam stereotype {
    CBackgroundColor #0066cf
    CBorderColor #0086ef
    ABackgroundColor #C8Ac00
    ABorderColor #D8Bc00
    IBackgroundColor #008400
    IBorderColor #239c23
    EBackgroundColor #cf6300
    EBorderColor #ef8300
    NBackgroundColor #3380b9
    NBorderColor #004d86
}
skinparam title {
	FontColor	                 #c0c0c0
 	BorderColor                  #545454
	FontSize	    	         20
	BorderRoundCorner            16
	BorderThickness 	         1
	BackgroundColor              #48494b
}


skinparam legend {
	BackgroundColor #303030
	BorderColor #404040
	FontColor #a0a0a0
}

	skinparam swimlane {
	BorderColor #5e5e5e
	BorderThickness 2
	TitleBackgroundColor  #6d6d6d-#484848
	TitleFontColor #303030
}

skinparam activity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BarColor #00FF00
	StartColor #0060a8
	EndColor #0060a8
	DiamondBackgroundColor #6d6d6d-#3a3a3a
  	DiamondBorderColor #3a3a3a
  	DiamondFontColor #fefefe
}


skinparam participant {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	ParticipantBorderThickness 2
}


skinparam actor {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam arrow {
	Thickness 1.5
	Color #545454
	FontColor #a0a0a0
    FontStyle bold
    MessageAlignment center
}



skinparam sequence {
	BorderColor #303030
	TitleFontColor #303030
	BackgroundColor #333333
	StartColor #303030
	EndColor #303030
	BoxBackgroundColor #333333
	BoxBorderColor #484848
	BoxFontColor #484848
	LifeLineBorderColor #484848
	LifeLineBorderThickness 2
	LifeLineBackgroundColor #3a3a3a
	GroupBorderColor #484848
	GroupFontColor #484848
	GroupHeaderFontColor #0060a8
	GroupBackgroundColor #484848
	GroupHeaderBackgroundColor #333333
	DividerBackgroundColor #484848
    DividerBorderColor #484848
    DividerBorderThickness 2
    DividerFontColor #D8Bc00
	ReferenceBackgroundColor #333333
	ReferenceBorderColor #484848
	ReferenceFontColor #fefefe
	ReferenceHeaderBackgroundColor #484848
}


skinparam partition {
	BorderColor #303030
	FontColor #333333
	BackgroundColor #333333
}


skinparam collections {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam control {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam entity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam boundary {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam agent {
	BackgroundColor #ff8000
	BorderColor #ff9933
	FontColor #484848
}


skinparam note {
	BorderThickness 1
	BackgroundColor #1b1b1a
	BorderColor #5e5e5e
	FontSize 11
	FontColor #a0a0a0
}


skinparam artifact {
	BorderThickness 10
	BorderColor #5e5e5e
	BackgroundColor #1b1b1a
	FontColor #D8Bc00
}


skinparam component {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam interface {
	BackgroundColor  #008400
	BorderColor  #007F00
	FontColor #484848
}


skinparam storage {
	BackgroundColor #ff8000
  	BorderColor #cc6600
	FontColor #222222
}


skinparam node {
	BackgroundColor #333333
	BorderColor #333333
	FontColor #C8Ac00
}


skinparam cloud {
	BackgroundColor #484848-black
	BorderColor #484848
	FontColor #D8Bc00
}


skinparam database {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor  #333333
}


skinparam class {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	HeaderBackgroundColor #1b1b1a
    BackgroundColor #282828
    BorderColor #5e5e5e
 	StereotypeFontColor #a0a0a0
    StereotypeFontStyle bold
	BorderThickness 1
	AttributeFontColor #D8Bc00
	AttributeFontSize 11
    FontColor #D8Bc00
    FontStyle bold
}


skinparam object {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StereotypeFontColor #484848
	BorderThickness 1
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam usecase {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam rectangle {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam package {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
}


skinparam folder {
	BackgroundColor #6d6d6d
  	BorderColor #ff8000
	FontColor #ff8000
	BorderThickness 2
}


skinparam frame {
	BackgroundColor #6d6d6d
  	BorderColor #0060a8
	FontColor #0060a8
	BorderThickness 2
}


skinparam state {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StartColor #0060a8
	EndColor #0060a8
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam queue {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam card {
	BackgroundColor #0060a8
	BorderColor #004d86
	FontColor $INFO_TEXT
}


skinparam file {
	BackgroundColor #6d6d6d-#484848
	BorderColor #0060a8
	FontColor #fefefe
}


skinparam stack {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}

    
    title "Testing"
    
    abstract BaseFailureReporter
    
    interface Listener
    
    BaseFailureReporter <|- - JUnitFailureReporter
    class JUnitFailureReporter
    {
    }
    
    interface QuickTests
    {
    }
    
    class RandomValueFactory
    {
        - -(constructors)- -
        +RandomValueFactory()
        +RandomValueFactory(long)
        - -
        +long seed()
        +void seed(long seed)
        - -(factory)- -
        +char newAsciiChar()
        +String newAsciiString()
        +String newAsciiString(int minLength, int maxLength)
        +boolean newBoolean()
        +byte newByte()
        +byte newByte(byte minimum, byte maximum)
        +byte newByte(byte minimum, byte maximum, Predicate<Byte> filter)
        +char newChar()
        +Confidence newConfidence()
        +int newCount(int minimum, int maximum)
        +double newDouble(double minimum, double maximum)
        +double newDouble()
        +double newDoubleZeroToOne()
        +T newFrom(Collection<T> values)
        +T newFrom(T[] values)
        +Identifier newIdentifier(long maximum)
        +int newIndex(int maximum)
        +int newInt(int minimum, int maximum, Predicate<Integer> filter)
        +int newInt()
        +int newInt(int minimum, int maximum)
        +long newLong(long minimum, long maximum)
        +long newLong(long minimum, long maximum, Predicate<Long> filter)
        +long newLong()
        +short newShort(short minimum, short maximum)
        +short newShort()
        +short newShort(short minimum, short maximum, Predicate<Short> filter)
        +String newString()
        +String newString(int minLength, int maxLength)
        +double newUnsignedDouble(double maximum)
        +double newUnsignedDouble()
        +int newUnsignedInt()
        +long newUnsignedLong()
    }
    
    interface SlowTests
    {
    }
    
    TestWatcher <|- - UnitTest
    Listener <|- - UnitTest
    UnitTest - -> JUnitFailureReporter : "reports validation failures with"
    UnitTest - -> RandomValueFactory : "uses"
    abstract class UnitTest
    {
        - -
        +void testBeforeUnitTest()
        +void testSetup()
        #boolean ensure(boolean condition)
        #void ensure(boolean condition, String message, Object... arguments)
        #void ensureBetween(double actual, double low, double high)
        #void ensureEqual(T given, T expected)
        #void ensureEqual(T given, T expected, String message, Object... arguments)
        #void ensureFalse(boolean condition)
        #void ensureFalse(boolean condition, String message, Object... arguments)
        #void ensureNotEqual(T a, T b)
        #void ensureNull(Object)
        #void ensureThrows(Runnable code)
        #void ensureWithin(double expected, double actual, double maximumDifference)
        #void ensureZero(Number value)
        #void iterateIndexes(Consumer<Integer>)
        #void iterations(Count iterations)
        #void iterations(int iterations)
        #String randomAsciiString(int minimum, int maximum)
        #String randomAsciiString()
        #void randomIndexes(Repeats, Count, Consumer<Integer>)
        #void randomIndexes(Repeats, Consumer<Integer>)
        #void randomIndexes(Repeats, Count, int maximum, Consumer<Integer>)
        - -(checks)- -
        +boolean isRandomTest()
        #boolean ensureClose(Duration given, Duration expected)
        #T ensureNotNull(T object)
        #boolean isQuickTest()
        #boolean isWindows()
        - -(collection)- -
        #void ensureEqualArray(T[] a, T[] b)
        #void ensureEqualArray(byte[] a, byte[])
        #int index()
        #Count iterations()
        #int randomIndex()
        #void resetIndex()
        - -(factory)- -
        #T newRandomValueFactory(Source<T> factory)
        #RandomValueFactory randomValueFactory()
        - -(io)- -
        #void ensureClose(Number expected, Number actual, int numberOfDecimalsToMatch)
        - -(iteration)- -
        #void loop(Loopable code)
        #void loop(int times, Runnable code)
        #void loop(int minimum, int maximum, Loopable code)
        #void loop(int minimum, int maximum, Runnable code)
        #void loop(Runnable code)
        #void loop(int times, Loopable code)
        #int nextIndex()
        - -(primitive)- -
        #void iterateBytes(Consumer<Byte>)
        #void iterateIntegers(Consumer<Integer>)
        #void iterateLongs(Consumer<Long>)
        #void iterateShorts(Consumer<Short>)
        #char randomAsciiChar()
        #List<Byte> randomByteList(Repeats, byte minimum, byte maximum)
        #List<Byte> randomByteList(Repeats)
        #void randomBytes(Repeats, Count, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Count, Consumer<Byte>)
        #void randomBytes(Repeats, Consumer<Byte>)
        #void randomBytes(Repeats, byte minimum, byte maximum, Predicate<Byte> filter, Consumer<Byte>)
        #void randomBytes(Repeats, Predicate<Byte> filter, Consumer<Byte>)
        #int randomInt(int minimum, int maximum, Predicate<Integer> filter)
        #int randomInt(int minimum, int maximum)
        #int randomInt()
        #List<Integer> randomIntList(Repeats, int minimum, int maximum)
        #List<Integer> randomIntList(Repeats)
        #List<Integer> randomIntList(Repeats, Count, int minimum, int maximum)
        #void randomInts(Repeats, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Consumer<Integer>)
        #void randomInts(Repeats, Count, Consumer<Integer>)
        #void randomInts(Repeats, Count, int minimum, int maximum, Predicate<Integer> filter, Consumer<Integer>)
        #void randomInts(Repeats, Predicate<Integer> filter, Consumer<Integer>)
        #List<Long> randomLongList(Repeats)
        #List<Long> randomLongList(Repeats, long minimum, long maximum)
        #void randomLongs(Repeats, Count, Consumer<Long>)
        #void randomLongs(Repeats, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Consumer<Long>)
        #void randomLongs(Repeats, Count, long minimum, long maximum, Predicate<Long> filter, Consumer<Long>)
        #void randomLongs(Repeats, Predicate<Long> filter, Consumer<Long>)
        #List<Short> randomShortList(Repeats)
        #List<Short> randomShortList(Repeats, short minimum, short maximum)
        #void randomShorts(Repeats, Consumer<Short>)
        #void randomShorts(Repeats, Count, Consumer<Short>)
        #void randomShorts(Repeats, Count, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, Predicate<Short> filter, Consumer<Short>)
        #void randomShorts(Repeats, short minimum, short maximum, Predicate<Short> filter, Consumer<Short>)
        - -(status)- -
        #void fail(String message, Object... arguments)
    }
    
    TestWatcher <|- - UnitTestWatcher
    UnitTestWatcher o- - UnitTest : "watches for failures in"
    class UnitTestWatcher
    {
        - -(constructors)- -
        +UnitTestWatcher(UnitTest)
    }
    
@enduml

PlantUML version 1.2021.01(Tue Feb 02 00:55:08 MST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>