<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="436.4583px" preserveAspectRatio="none" style="width:2663px;height:436px;background:#333333;" version="1.1" viewBox="0 0 2663 436" width="2663.5417px" zoomAndPan="magnify"><defs/><g><rect fill="#48494B" height="41.2028" rx="8.3333" ry="8.3333" style="stroke:#545454;stroke-width:1.0416666666666667;" width="607.2917" x="1020.8333" y="2.0833"/><text fill="#C0C0C0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="20.8333" lengthAdjust="spacing" textLength="584.375" x="1032.2917" y="30.5583">com.telenav.kivakit.primitive.collections.map.scalars.fixed</text><!--MD5=[4b74817909f2df5a21a89f40177dcefd]
class PrimitiveScalarMultiMap--><rect codeLine="7" fill="#282828" height="48.055" id="PrimitiveScalarMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="192.7083" x="1142.1875" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="192.7083" x="1142.1875" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="192.7083" x="1142.1875" y="76.7578"/><rect codeLine="7" fill="none" height="48.055" id="PrimitiveScalarMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="192.7083" x="1142.1875" y="53.7028"/><ellipse cx="1156.7708" cy="69.397" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M1154.1748,66.5588 L1154.1748,64.9719 L1159.6008,64.9719 L1159.6008,66.5588 L1157.7881,66.5588 L1157.7881,72.4976 L1159.6008,72.4976 L1159.6008,74.0845 L1154.1748,74.0845 L1154.1748,72.4976 L1155.9875,72.4976 L1155.9875,66.5588 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="155.2083" x="1173.4375" y="74.1211">PrimitiveScalarMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1143.2292" x2="1333.8542" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1143.2292" x2="1333.8542" y1="93.4245" y2="93.4245"/><!--MD5=[4a7d52b0cad6b45b436e1f956697a54c]
class IntMultiMap--><rect codeLine="8" fill="#282828" height="48.055" id="IntMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="115.625" x="921.3542" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="115.625" x="921.3542" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="115.625" x="921.3542" y="76.7578"/><rect codeLine="8" fill="none" height="48.055" id="IntMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="115.625" x="921.3542" y="53.7028"/><ellipse cx="935.9375" cy="69.397" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M933.3415,66.5588 L933.3415,64.9719 L938.7675,64.9719 L938.7675,66.5588 L936.9548,66.5588 L936.9548,72.4976 L938.7675,72.4976 L938.7675,74.0845 L933.3415,74.0845 L933.3415,72.4976 L935.1542,72.4976 L935.1542,66.5588 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="78.125" x="952.6042" y="74.1211">IntMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="922.3958" x2="1035.9375" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="922.3958" x2="1035.9375" y1="93.4245" y2="93.4245"/><!--MD5=[48dd5ec133c92f0a147a857e74e30812]
class LongMultiMap--><rect codeLine="9" fill="#282828" height="48.055" id="LongMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="130.2083" x="277.6042" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="130.2083" x="277.6042" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="130.2083" x="277.6042" y="76.7578"/><rect codeLine="9" fill="none" height="48.055" id="LongMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="130.2083" x="277.6042" y="53.7028"/><ellipse cx="292.1875" cy="69.397" fill="#008400" rx="10.4167" ry="10.4167" style="stroke:#239C23;stroke-width:1.0416666666666667;"/><path d="M289.5915,66.5588 L289.5915,64.9719 L295.0175,64.9719 L295.0175,66.5588 L293.2048,66.5588 L293.2048,72.4976 L295.0175,72.4976 L295.0175,74.0845 L289.5915,74.0845 L289.5915,72.4976 L291.4042,72.4976 L291.4042,66.5588 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-style="italic" font-weight="bold" lengthAdjust="spacing" textLength="92.7083" x="308.8542" y="74.1211">LongMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="278.6458" x2="406.7708" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="278.6458" x2="406.7708" y1="93.4245" y2="93.4245"/><!--MD5=[a5cc76553a2d1b24632df0d2f7f0bb23]
class PrimitiveMultiMap--><rect fill="#282828" height="48.055" id="PrimitiveMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="155.2083" x="1371.3542" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="155.2083" x="1371.3542" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="155.2083" x="1371.3542" y="76.7578"/><rect fill="none" height="48.055" id="PrimitiveMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="155.2083" x="1371.3542" y="53.7028"/><ellipse cx="1385.9375" cy="69.397" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M1387.8479,73.822 Q1387.4207,74.0417 1386.9507,74.1516 Q1386.4807,74.2615 1385.9619,74.2615 Q1384.1187,74.2615 1383.1482,73.0469 Q1382.1777,71.8323 1382.1777,69.5374 Q1382.1777,67.2363 1383.1482,66.0217 Q1384.1187,64.8071 1385.9619,64.8071 Q1386.4807,64.8071 1386.9568,64.917 Q1387.4329,65.0269 1387.8479,65.2466 L1387.8479,67.2485 Q1387.384,66.8213 1386.9476,66.6229 Q1386.5112,66.4246 1386.0474,66.4246 Q1385.0586,66.4246 1384.5551,67.2089 Q1384.0515,67.9932 1384.0515,69.5374 Q1384.0515,71.0754 1384.5551,71.8597 Q1385.0586,72.644 1386.0474,72.644 Q1386.5112,72.644 1386.9476,72.4457 Q1387.384,72.2473 1387.8479,71.8201 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="117.7083" x="1402.6042" y="74.1211">PrimitiveMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1372.3958" x2="1525.5208" y1="85.0911" y2="85.0911"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1372.3958" x2="1525.5208" y1="93.4245" y2="93.4245"/><!--MD5=[7995b2c959e8c01f457074ea15d83b1b]
class IntToByteFixedMultiMap--><rect codeLine="13" fill="#282828" height="225.7589" id="IntToByteFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1520.8333" y="183.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1520.8333" y="183.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1520.8333" y="206.9661"/><rect codeLine="13" fill="none" height="225.7589" id="IntToByteFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1520.8333" y="183.9111"/><ellipse cx="1611.9792" cy="199.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M1613.8896,204.0304 Q1613.4623,204.2501 1612.9924,204.3599 Q1612.5224,204.4698 1612.0036,204.4698 Q1610.1603,204.4698 1609.1899,203.2552 Q1608.2194,202.0406 1608.2194,199.7457 Q1608.2194,197.4447 1609.1899,196.2301 Q1610.1603,195.0155 1612.0036,195.0155 Q1612.5224,195.0155 1612.9985,195.1253 Q1613.4745,195.2352 1613.8896,195.4549 L1613.8896,197.4569 Q1613.4257,197.0296 1612.9893,196.8313 Q1612.5529,196.6329 1612.089,196.6329 Q1611.1003,196.6329 1610.5967,197.4172 Q1610.0932,198.2015 1610.0932,199.7457 Q1610.0932,201.2838 1610.5967,202.0681 Q1611.1003,202.8524 1612.089,202.8524 Q1612.5529,202.8524 1612.9893,202.654 Q1613.4257,202.4556 1613.8896,202.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="157.2917" x="1634.8958" y="204.3294">IntToByteFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="1521.875" x2="1873.9583" y1="215.2995" y2="215.2995"/><ellipse cx="1532.2917" cy="250.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="173.9583" x="1543.75" y="257.5806">IntToByteFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1521.875" x2="1654.1667" y1="233.5052" y2="233.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="1657.2917" y="237.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1741.6667" x2="1873.9583" y1="233.5052" y2="233.5052"/><ellipse cx="1532.2917" cy="294.3258" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="160.4167" x="1543.75" y="301.237">boolean containsKey(int key)</text><ellipse cx="1532.2917" cy="314.0706" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="119.7917" x="1543.75" y="320.9819">ByteArray get(int key)</text><ellipse cx="1532.2917" cy="333.8155" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="92.7083" x="1543.75" y="340.7267">IntIterator keys()</text><ellipse cx="1532.2917" cy="353.5604" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="204.1667" x="1543.75" y="360.4716">void putAll(int key, ByteArray values)</text><ellipse cx="1532.2917" cy="373.3053" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="182.2917" x="1543.75" y="380.2165">void putAll(int key, byte[] values)</text><ellipse cx="1532.2917" cy="393.0501" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="321.875" x="1543.75" y="399.9613">void putAll(long key, List&lt;? extends Quantizable&gt; values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1521.875" x2="1663.5417" y1="277.1617" y2="277.1617"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="1666.6667" y="280.9713">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1732.2917" x2="1873.9583" y1="277.1617" y2="277.1617"/><!--MD5=[0c99b87e1465ab30b0b6d2d6a13d9fa0]
class IntToIntFixedMultiMap--><rect codeLine="29" fill="#282828" height="206.014" id="IntToIntFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="228.125" x="865.1042" y="193.807"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="228.125" x="865.1042" y="193.807"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="228.125" x="865.1042" y="216.862"/><rect codeLine="29" fill="none" height="206.014" id="IntToIntFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="228.125" x="865.1042" y="193.807"/><ellipse cx="899.375" cy="209.5011" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M901.2854,213.9262 Q900.8582,214.1459 900.3882,214.2558 Q899.9182,214.3656 899.3994,214.3656 Q897.5562,214.3656 896.5857,213.151 Q895.6152,211.9364 895.6152,209.6415 Q895.6152,207.3405 896.5857,206.1259 Q897.5562,204.9113 899.3994,204.9113 Q899.9182,204.9113 900.3943,205.0212 Q900.8704,205.131 901.2854,205.3507 L901.2854,207.3527 Q900.8215,206.9255 900.3851,206.7271 Q899.9487,206.5287 899.4849,206.5287 Q898.4961,206.5287 897.9926,207.313 Q897.489,208.0973 897.489,209.6415 Q897.489,211.1796 897.9926,211.9639 Q898.4961,212.7482 899.4849,212.7482 Q899.9487,212.7482 900.3851,212.5498 Q900.8215,212.3515 901.2854,211.9242 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="146.875" x="920.4167" y="214.2253">IntToIntFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="866.1458" x2="1092.1875" y1="225.1953" y2="225.1953"/><ellipse cx="876.5625" cy="260.5652" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="165.625" x="888.0208" y="267.4764">IntToIntFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="866.1458" x2="935.4167" y1="243.4011" y2="243.4011"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="938.5417" y="247.2107">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1022.9167" x2="1092.1875" y1="243.4011" y2="243.4011"/><ellipse cx="876.5625" cy="304.2216" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="160.4167" x="888.0208" y="311.1328">boolean containsKey(int key)</text><ellipse cx="876.5625" cy="323.9665" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="111.4583" x="888.0208" y="330.8777">IntArray get(int key)</text><ellipse cx="876.5625" cy="343.7113" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="92.7083" x="888.0208" y="350.6226">IntIterator keys()</text><ellipse cx="876.5625" cy="363.4562" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="195.8333" x="888.0208" y="370.3674">void putAll(int key, IntArray values)</text><ellipse cx="876.5625" cy="383.2011" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="172.9167" x="888.0208" y="390.1123">void putAll(int key, int[] values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="866.1458" x2="944.7917" y1="287.0575" y2="287.0575"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="947.9167" y="290.8671">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1013.5417" x2="1092.1875" y1="287.0575" y2="287.0575"/><!--MD5=[3f4bc82daf44942da3f53ac3b6d5365d]
class IntToLongFixedMultiMap--><rect codeLine="44" fill="#282828" height="206.014" id="IntToLongFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="241.6667" x="7.2917" y="193.807"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="241.6667" x="7.2917" y="193.807"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="241.6667" x="7.2917" y="216.862"/><rect codeLine="44" fill="none" height="206.014" id="IntToLongFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="241.6667" x="7.2917" y="193.807"/><ellipse cx="41.0938" cy="209.5011" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M43.0042,213.9262 Q42.5769,214.1459 42.1069,214.2558 Q41.637,214.3656 41.1182,214.3656 Q39.2749,214.3656 38.3044,213.151 Q37.334,211.9364 37.334,209.6415 Q37.334,207.3405 38.3044,206.1259 Q39.2749,204.9113 41.1182,204.9113 Q41.637,204.9113 42.113,205.0212 Q42.5891,205.131 43.0042,205.3507 L43.0042,207.3527 Q42.5403,206.9255 42.1039,206.7271 Q41.6675,206.5287 41.2036,206.5287 Q40.2148,206.5287 39.7113,207.313 Q39.2078,208.0973 39.2078,209.6415 Q39.2078,211.1796 39.7113,211.9639 Q40.2148,212.7482 41.2036,212.7482 Q41.6675,212.7482 42.1039,212.5498 Q42.5403,212.3515 43.0042,211.9242 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="161.4583" x="62.0313" y="214.2253">IntToLongFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="8.3333" x2="247.9167" y1="225.1953" y2="225.1953"/><ellipse cx="18.75" cy="260.5652" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="179.1667" x="30.2083" y="267.4764">IntToLongFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="84.375" y1="243.4011" y2="243.4011"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="87.5" y="247.2107">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="171.875" x2="247.9167" y1="243.4011" y2="243.4011"/><ellipse cx="18.75" cy="304.2216" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="160.4167" x="30.2083" y="311.1328">boolean containsKey(int key)</text><ellipse cx="18.75" cy="323.9665" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="125" x="30.2083" y="330.8777">LongArray get(int key)</text><ellipse cx="18.75" cy="343.7113" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="92.7083" x="30.2083" y="350.6226">IntIterator keys()</text><ellipse cx="18.75" cy="363.4562" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="183.3333" x="30.2083" y="370.3674">void putAll(int key, long[] values)</text><ellipse cx="18.75" cy="383.2011" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="209.375" x="30.2083" y="390.1123">void putAll(int key, LongArray values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="93.75" y1="287.0575" y2="287.0575"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="96.875" y="290.8671">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="162.5" x2="247.9167" y1="287.0575" y2="287.0575"/><!--MD5=[1c02724945c6df932588753ceecaf5f0]
class IntToPackedArrayFixedMultiMap--><rect codeLine="59" fill="#282828" height="265.2486" id="IntToPackedArrayFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="542.7083" x="285.9375" y="164.1195"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="542.7083" x="285.9375" y="164.1195"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="542.7083" x="285.9375" y="187.1745"/><rect codeLine="59" fill="none" height="265.2486" id="IntToPackedArrayFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="542.7083" x="285.9375" y="164.1195"/><ellipse cx="445.8333" cy="179.8136" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M447.7437,184.2387 Q447.3165,184.4584 446.8465,184.5683 Q446.3765,184.6781 445.8577,184.6781 Q444.0145,184.6781 443.044,183.4635 Q442.0736,182.2489 442.0736,179.954 Q442.0736,177.653 443.044,176.4384 Q444.0145,175.2238 445.8577,175.2238 Q446.3765,175.2238 446.8526,175.3337 Q447.3287,175.4435 447.7437,175.6632 L447.7437,177.6652 Q447.2799,177.238 446.8435,177.0396 Q446.4071,176.8412 445.9432,176.8412 Q444.9544,176.8412 444.4509,177.6255 Q443.9473,178.4098 443.9473,179.954 Q443.9473,181.4921 444.4509,182.2764 Q444.9544,183.0607 445.9432,183.0607 Q446.4071,183.0607 446.8435,182.8623 Q447.2799,182.664 447.7437,182.2367 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="208.3333" x="468.75" y="184.5378">IntToPackedArrayFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="286.9792" x2="827.6042" y1="195.5078" y2="195.5078"/><ellipse cx="297.3958" cy="230.8777" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="220.8333" x="308.8542" y="237.7889">IntToPackedArrayFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="286.9792" x2="513.5417" y1="213.7136" y2="213.7136"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="516.6667" y="217.5232">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="601.0417" x2="827.6042" y1="213.7136" y2="213.7136"/><ellipse cx="297.3958" cy="274.5341" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="510.4167" x="308.8542" y="281.4453">IntToPackedArrayFixedMultiMap bits(BitCount bits, PackedPrimitiveArray.OverflowHandling)</text><ellipse cx="297.3958" cy="294.279" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="160.4167" x="308.8542" y="301.1902">boolean containsKey(int key)</text><ellipse cx="297.3958" cy="314.0238" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="125" x="308.8542" y="320.9351">LongArray get(int key)</text><ellipse cx="297.3958" cy="333.7687" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="162.5" x="308.8542" y="340.6799">LongArray getSigned(int key)</text><ellipse cx="297.3958" cy="353.5136" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="92.7083" x="308.8542" y="360.4248">IntIterator keys()</text><ellipse cx="297.3958" cy="373.2585" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="377.0833" x="308.8542" y="380.1697">IntToPackedArrayFixedMultiMap listTerminator(long listTerminator)</text><ellipse cx="297.3958" cy="393.0033" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="183.3333" x="308.8542" y="399.9146">void putAll(int key, long[] values)</text><ellipse cx="297.3958" cy="412.7482" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="209.375" x="308.8542" y="419.6594">void putAll(int key, LongArray values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="286.9792" x2="522.9167" y1="257.37" y2="257.37"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="526.0417" y="261.1796">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="591.6667" x2="827.6042" y1="257.37" y2="257.37"/><!--MD5=[473ca2dc791c307a8457cba60dc406cc]
class LongToByteFixedMultiMap--><rect codeLine="76" fill="#282828" height="225.7589" id="LongToByteFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1911.4583" y="183.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1911.4583" y="183.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1911.4583" y="206.9661"/><rect codeLine="76" fill="none" height="225.7589" id="LongToByteFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1911.4583" y="183.9111"/><ellipse cx="1995.3125" cy="199.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M1997.2229,204.0304 Q1996.7957,204.2501 1996.3257,204.3599 Q1995.8557,204.4698 1995.3369,204.4698 Q1993.4937,204.4698 1992.5232,203.2552 Q1991.5527,202.0406 1991.5527,199.7457 Q1991.5527,197.4447 1992.5232,196.2301 Q1993.4937,195.0155 1995.3369,195.0155 Q1995.8557,195.0155 1996.3318,195.1253 Q1996.8079,195.2352 1997.2229,195.4549 L1997.2229,197.4569 Q1996.759,197.0296 1996.3226,196.8313 Q1995.8862,196.6329 1995.4224,196.6329 Q1994.4336,196.6329 1993.9301,197.4172 Q1993.4265,198.2015 1993.4265,199.7457 Q1993.4265,201.2838 1993.9301,202.0681 Q1994.4336,202.8524 1995.4224,202.8524 Q1995.8862,202.8524 1996.3226,202.654 Q1996.759,202.4556 1997.2229,202.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="171.875" x="2018.2292" y="204.3294">LongToByteFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="1912.5" x2="2264.5833" y1="215.2995" y2="215.2995"/><ellipse cx="1922.9167" cy="250.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="187.5" x="1934.375" y="257.5806">LongToByteFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1912.5" x2="2044.7917" y1="233.5052" y2="233.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="2047.9167" y="237.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2132.2917" x2="2264.5833" y1="233.5052" y2="233.5052"/><ellipse cx="1922.9167" cy="294.3258" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="170.8333" x="1934.375" y="301.237">boolean containsKey(long key)</text><ellipse cx="1922.9167" cy="314.0706" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="130.2083" x="1934.375" y="320.9819">ByteArray get(long key)</text><ellipse cx="1922.9167" cy="333.8155" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="106.25" x="1934.375" y="340.7267">LongIterator keys()</text><ellipse cx="1922.9167" cy="353.5604" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="321.875" x="1934.375" y="360.4716">void putAll(long key, List&lt;? extends Quantizable&gt; values)</text><ellipse cx="1922.9167" cy="373.3053" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="192.7083" x="1934.375" y="380.2165">void putAll(long key, byte[] values)</text><ellipse cx="1922.9167" cy="393.0501" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="214.5833" x="1934.375" y="399.9613">void putAll(long key, ByteArray values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1912.5" x2="2054.1667" y1="277.1617" y2="277.1617"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="2057.2917" y="280.9713">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2122.9167" x2="2264.5833" y1="277.1617" y2="277.1617"/><!--MD5=[4920d5307010b5c3664756a173cd7c76]
class LongToIntFixedMultiMap--><rect codeLine="91" fill="#282828" height="225.7589" id="LongToIntFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="2302.0833" y="183.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="2302.0833" y="183.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="2302.0833" y="206.9661"/><rect codeLine="91" fill="none" height="225.7589" id="LongToIntFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="2302.0833" y="183.9111"/><ellipse cx="2391.1458" cy="199.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M2393.0562,204.0304 Q2392.629,204.2501 2392.159,204.3599 Q2391.689,204.4698 2391.1702,204.4698 Q2389.327,204.4698 2388.3565,203.2552 Q2387.3861,202.0406 2387.3861,199.7457 Q2387.3861,197.4447 2388.3565,196.2301 Q2389.327,195.0155 2391.1702,195.0155 Q2391.689,195.0155 2392.1651,195.1253 Q2392.6412,195.2352 2393.0562,195.4549 L2393.0562,197.4569 Q2392.5924,197.0296 2392.156,196.8313 Q2391.7196,196.6329 2391.2557,196.6329 Q2390.2669,196.6329 2389.7634,197.4172 Q2389.2598,198.2015 2389.2598,199.7457 Q2389.2598,201.2838 2389.7634,202.0681 Q2390.2669,202.8524 2391.2557,202.8524 Q2391.7196,202.8524 2392.156,202.654 Q2392.5924,202.4556 2393.0562,202.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="161.4583" x="2414.0625" y="204.3294">LongToIntFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="2303.125" x2="2655.2083" y1="215.2995" y2="215.2995"/><ellipse cx="2313.5417" cy="250.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="179.1667" x="2325" y="257.5806">LongToIntFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2303.125" x2="2435.4167" y1="233.5052" y2="233.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="2438.5417" y="237.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2522.9167" x2="2655.2083" y1="233.5052" y2="233.5052"/><ellipse cx="2313.5417" cy="294.3258" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="170.8333" x="2325" y="301.237">boolean containsKey(long key)</text><ellipse cx="2313.5417" cy="314.0706" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="121.875" x="2325" y="320.9819">IntArray get(long key)</text><ellipse cx="2313.5417" cy="333.8155" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="106.25" x="2325" y="340.7267">LongIterator keys()</text><ellipse cx="2313.5417" cy="353.5604" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="206.25" x="2325" y="360.4716">void putAll(long key, IntArray values)</text><ellipse cx="2313.5417" cy="373.3053" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="321.875" x="2325" y="380.2165">void putAll(long key, List&lt;? extends Quantizable&gt; values)</text><ellipse cx="2313.5417" cy="393.0501" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="183.3333" x="2325" y="399.9613">void putAll(long key, int[] values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2303.125" x2="2444.7917" y1="277.1617" y2="277.1617"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="2447.9167" y="280.9713">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="2513.5417" x2="2655.2083" y1="277.1617" y2="277.1617"/><!--MD5=[3d6da11c5d686df0fe655d1f9f470d58]
class LongToLongFixedMultiMap--><rect codeLine="106" fill="#282828" height="225.7589" id="LongToLongFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1130.2083" y="183.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1130.2083" y="183.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="354.1667" x="1130.2083" y="206.9661"/><rect codeLine="106" fill="none" height="225.7589" id="LongToLongFixedMultiMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="354.1667" x="1130.2083" y="183.9111"/><ellipse cx="1211.9792" cy="199.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M1213.8896,204.0304 Q1213.4623,204.2501 1212.9924,204.3599 Q1212.5224,204.4698 1212.0036,204.4698 Q1210.1603,204.4698 1209.1899,203.2552 Q1208.2194,202.0406 1208.2194,199.7457 Q1208.2194,197.4447 1209.1899,196.2301 Q1210.1603,195.0155 1212.0036,195.0155 Q1212.5224,195.0155 1212.9985,195.1253 Q1213.4745,195.2352 1213.8896,195.4549 L1213.8896,197.4569 Q1213.4257,197.0296 1212.9893,196.8313 Q1212.5529,196.6329 1212.089,196.6329 Q1211.1003,196.6329 1210.5967,197.4172 Q1210.0932,198.2015 1210.0932,199.7457 Q1210.0932,201.2838 1210.5967,202.0681 Q1211.1003,202.8524 1212.089,202.8524 Q1212.5529,202.8524 1212.9893,202.654 Q1213.4257,202.4556 1213.8896,202.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="176.0417" x="1234.8958" y="204.3294">LongToLongFixedMultiMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="1131.25" x2="1483.3333" y1="215.2995" y2="215.2995"/><ellipse cx="1141.6667" cy="250.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="192.7083" x="1153.125" y="257.5806">LongToLongFixedMultiMap(String)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1131.25" x2="1263.5417" y1="233.5052" y2="233.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="1266.6667" y="237.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1351.0417" x2="1483.3333" y1="233.5052" y2="233.5052"/><ellipse cx="1141.6667" cy="294.3258" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="170.8333" x="1153.125" y="301.237">boolean containsKey(long key)</text><ellipse cx="1141.6667" cy="314.0706" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="135.4167" x="1153.125" y="320.9819">LongArray get(long key)</text><ellipse cx="1141.6667" cy="333.8155" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="106.25" x="1153.125" y="340.7267">LongIterator keys()</text><ellipse cx="1141.6667" cy="353.5604" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="321.875" x="1153.125" y="360.4716">void putAll(long key, List&lt;? extends Quantizable&gt; values)</text><ellipse cx="1141.6667" cy="373.3053" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="219.7917" x="1153.125" y="380.2165">void putAll(long key, LongArray values)</text><ellipse cx="1141.6667" cy="393.0501" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="193.75" x="1153.125" y="399.9613">void putAll(long key, long[] values)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1131.25" x2="1272.9167" y1="277.1617" y2="277.1617"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="1276.0417" y="280.9713">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="1341.6667" x2="1483.3333" y1="277.1617" y2="277.1617"/><!--MD5=[770650b6aa5dc9033e07e0c3b0aa7834]
reverse link PrimitiveMultiMap to IntToByteFixedMultiMap--><path codeLine="11" d="M1491.3958,115.7236 C1513.2813,134.8174 1541.2604,159.2236 1569.5208,183.8799 " fill="none" id="PrimitiveMultiMap-backto-IntToByteFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1486.5104,121.1403,1475.6042,101.9424,1496.0938,110.1507,1486.5104,121.1403" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[dfe75cc93891e215cab385e322d933a5]
reverse link PrimitiveScalarMultiMap to IntToByteFixedMultiMap--><path codeLine="12" d="M1351.0833,107.4007 C1399.1354,121.5778 1455.0938,140.7132 1503.125,164.1195 C1515.4167,170.109 1527.8333,176.7965 1540.125,183.8799 " fill="none" id="PrimitiveScalarMultiMap-backto-IntToByteFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1349.0313,114.3903,1331.0208,101.6195,1353.0625,100.3799,1349.0313,114.3903" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[40e566c2ad01f56e72d1dfc432edcffd]
reverse link PrimitiveMultiMap to IntToIntFixedMultiMap--><path codeLine="26" d="M1350.6667,102.3174 C1255.2083,125.4632 1123.1354,158.1195 1112.5,164.1195 C1097.9063,172.359 1083.7917,182.6195 1070.5417,193.7445 " fill="none" id="PrimitiveMultiMap-backto-IntToIntFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1349.0625,95.2132,1371.0208,97.4007,1352.4896,109.3799,1349.0625,95.2132" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[b74cfb8c1523d3d80b86cd2cbb5c95b3]
reverse link IntMultiMap to IntToIntFixedMultiMap--><path codeLine="27" d="M979.1667,123.109 C979.1667,143.557 979.1667,168.7445 979.1667,193.5049 " fill="none" id="IntMultiMap-backto-IntToIntFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="971.875,122.7757,979.1667,101.9424,986.4583,122.7757,971.875,122.7757" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[ca7d41135a34a5c01f19527588a0cc1f]
reverse link PrimitiveScalarMultiMap to IntToIntFixedMultiMap--><path codeLine="28" d="M1183.2083,113.0257 C1160.6146,127.8486 1134.6354,145.9424 1112.5,164.1195 C1101.3125,173.307 1089.9792,183.2861 1078.8958,193.5049 " fill="none" id="PrimitiveScalarMultiMap-backto-IntToIntFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1179.3958,106.8174,1200.8646,101.6611,1187.2917,119.0674,1179.3958,106.8174" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[3857c396d8df5291198e30b6d54db019]
reverse link PrimitiveMultiMap to IntToLongFixedMultiMap--><path codeLine="41" d="M1350.5625,101.2653 C1082.0417,133.3695 483.8229,70.9424 267.7083,164.1195 C250.5729,171.5049 234.25,181.9736 219.2083,193.807 " fill="none" id="PrimitiveMultiMap-backto-IntToLongFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1349.6354,94.0361,1371.25,98.5049,1351.5729,108.484,1349.6354,94.0361" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[b208f5301ffb6aa1d0864148c88413a3]
reverse link LongMultiMap to IntToLongFixedMultiMap--><path codeLine="42" d="M304.9063,116.9632 C283.75,138.3799 256.25,166.2028 229.2813,193.5049 " fill="none" id="LongMultiMap-backto-IntToLongFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="299.9167,111.6403,319.7396,101.9424,310.2917,121.8903,299.9167,111.6403" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[9e29c53af3e023a1cc72b386db0c1677]
reverse link PrimitiveScalarMultiMap to IntToLongFixedMultiMap--><path codeLine="43" d="M1121.3333,94.1507 C1099.375,96.8174 1076.6146,99.432 1055.2083,101.6195 C880.5625,119.4528 428.1458,92.8695 267.7083,164.1195 C250.9583,171.557 234.9583,181.8799 220.1667,193.5153 " fill="none" id="PrimitiveScalarMultiMap-backto-IntToLongFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1120.4896,86.9111,1142.0625,91.5882,1122.2813,101.3799,1120.4896,86.9111" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[0a9b88a08c1b70fdd1382184510f9c97]
reverse link PrimitiveMultiMap to IntToPackedArrayFixedMultiMap--><path codeLine="56" d="M1350.4375,101.7132 C1126.0938,139.7132 1058.6771,104.3799 846.875,164.1195 C840.8958,165.807 834.8854,167.5986 828.8438,169.484 " fill="none" id="PrimitiveMultiMap-backto-IntToPackedArrayFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1349.4063,94.4945,1371.1771,98.0674,1351.9271,108.859,1349.4063,94.4945" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[739e3bc5dd5521c98c7ebbf11aa9bab5]
reverse link LongMultiMap to IntToPackedArrayFixedMultiMap--><path codeLine="57" d="M380.6563,117.1195 C394.0729,130.6924 410.0104,146.8278 426.75,163.7653 " fill="none" id="LongMultiMap-backto-IntToPackedArrayFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="375.125,121.8903,365.6771,101.9424,385.5,111.6403,375.125,121.8903" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[1814b039795f1d96cf6a4878df1f11c8]
reverse link PrimitiveScalarMultiMap to IntToPackedArrayFixedMultiMap--><path codeLine="58" d="M1121.0938,97.5778 C1042.375,111.8695 937.0104,134.1611 846.875,164.1195 C840.8438,166.1195 834.7813,168.2132 828.6771,170.3799 " fill="none" id="PrimitiveScalarMultiMap-backto-IntToPackedArrayFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1120.25,90.3278,1142.0417,93.859,1122.8125,104.682,1120.25,90.3278" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[464a3c0904bac3ae1c62d95220e1b4a7]
reverse link PrimitiveMultiMap to LongToByteFixedMultiMap--><path codeLine="74" d="M1547.7917,86.1715 C1640.1563,95.7861 1780.4583,117.2549 1893.75,164.1195 C1907.4271,169.7757 1921.1354,176.4736 1934.5938,183.807 " fill="none" id="PrimitiveMultiMap-backto-LongToByteFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1546.8438,93.4007,1526.8229,84.109,1548.2708,78.8903,1546.8438,93.4007" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[dcf07fe2b95df686e43efa64177c11db]
reverse link PrimitiveScalarMultiMap to LongToByteFixedMultiMap--><path codeLine="75" d="M1355.7083,101.7028 C1596.2708,136.1299 1673.1458,82.359 1893.75,164.1195 C1908.3958,169.5465 1923.0104,176.2965 1937.2813,183.8486 " fill="none" id="PrimitiveScalarMultiMap-backto-LongToByteFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1354.5417,108.9007,1335.0313,98.5882,1356.7188,94.484,1354.5417,108.9007" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[b6127586369a48f529fa8b0b8768bc87]
reverse link PrimitiveMultiMap to LongToIntFixedMultiMap--><path codeLine="89" d="M1547.7083,82.7549 C1738.5938,91.5882 2151.1875,115.7549 2284.375,164.1195 C2299.1458,169.484 2313.8854,176.2132 2328.2604,183.7861 " fill="none" id="PrimitiveMultiMap-backto-LongToIntFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1547.1354,90.0361,1526.6458,81.807,1547.7917,75.4632,1547.1354,90.0361" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[5ba56ab4753696a05af8ee779fdc3a81]
reverse link PrimitiveScalarMultiMap to LongToIntFixedMultiMap--><path codeLine="90" d="M1355.7708,101.4424 C1589.9688,127.1299 2094.0625,98.7445 2284.375,164.1195 C2299.625,169.359 2314.8125,176.1195 2329.5833,183.807 " fill="none" id="PrimitiveScalarMultiMap-backto-LongToIntFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1354.7813,108.6715,1334.9792,98.9215,1356.5417,94.1924,1354.7813,108.6715" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[3c0bce9bbf3284ca7c87272c80f02058]
reverse link PrimitiveMultiMap to LongToLongFixedMultiMap--><path codeLine="104" d="M1422.375,119.4528 C1410.3229,137.9424 1395.4063,160.807 1380.3542,183.8799 " fill="none" id="PrimitiveMultiMap-backto-LongToLongFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1416.3125,115.4111,1433.8021,101.9424,1428.5208,123.3799,1416.3125,115.4111" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[ff0ad0b37dad764f0dc7a89862a469b3]
reverse link PrimitiveScalarMultiMap to LongToLongFixedMultiMap--><path codeLine="105" d="M1252.1875,121.807 C1257.9063,139.8695 1264.8438,161.7757 1271.8333,183.8799 " fill="none" id="PrimitiveScalarMultiMap-backto-LongToLongFixedMultiMap" style="stroke:#545454;stroke-width:1.5625;"/><polygon fill="none" points="1245.2396,124.0049,1245.8958,101.9424,1259.1354,119.609,1245.2396,124.0049" style="stroke:#545454;stroke-width:1.5625;"/><!--MD5=[70d19bf106062b3f180ad53311d6112d]
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.primitive.collections.map.scalars.fixed"
    
    interface PrimitiveScalarMultiMap
    interface IntMultiMap
    interface LongMultiMap
    
    PrimitiveMultiMap <|- - IntToByteFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToByteFixedMultiMap
    class IntToByteFixedMultiMap
    {
        - -(constructors)- -
        +IntToByteFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +ByteArray get(int key)
        +IntIterator keys()
        +void putAll(int key, ByteArray values)
        +void putAll(int key, byte[] values)
        +void putAll(long key, List<? extends Quantizable> values)
    }
    
    PrimitiveMultiMap <|- - IntToIntFixedMultiMap
    IntMultiMap <|- - IntToIntFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToIntFixedMultiMap
    class IntToIntFixedMultiMap
    {
        - -(constructors)- -
        +IntToIntFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +IntArray get(int key)
        +IntIterator keys()
        +void putAll(int key, IntArray values)
        +void putAll(int key, int[] values)
    }
    
    PrimitiveMultiMap <|- - IntToLongFixedMultiMap
    LongMultiMap <|- - IntToLongFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToLongFixedMultiMap
    class IntToLongFixedMultiMap
    {
        - -(constructors)- -
        +IntToLongFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +LongArray get(int key)
        +IntIterator keys()
        +void putAll(int key, long[] values)
        +void putAll(int key, LongArray values)
    }
    
    PrimitiveMultiMap <|- - IntToPackedArrayFixedMultiMap
    LongMultiMap <|- - IntToPackedArrayFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToPackedArrayFixedMultiMap
    class IntToPackedArrayFixedMultiMap
    {
        - -(constructors)- -
        +IntToPackedArrayFixedMultiMap(String)
        - -(collection)- -
        +IntToPackedArrayFixedMultiMap bits(BitCount bits, PackedPrimitiveArray.OverflowHandling)
        +boolean containsKey(int key)
        +LongArray get(int key)
        +LongArray getSigned(int key)
        +IntIterator keys()
        +IntToPackedArrayFixedMultiMap listTerminator(long listTerminator)
        +void putAll(int key, long[] values)
        +void putAll(int key, LongArray values)
    }
    
    PrimitiveMultiMap <|- - LongToByteFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToByteFixedMultiMap
    class LongToByteFixedMultiMap
    {
        - -(constructors)- -
        +LongToByteFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +ByteArray get(long key)
        +LongIterator keys()
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, byte[] values)
        +void putAll(long key, ByteArray values)
    }
    
    PrimitiveMultiMap <|- - LongToIntFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToIntFixedMultiMap
    class LongToIntFixedMultiMap
    {
        - -(constructors)- -
        +LongToIntFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +IntArray get(long key)
        +LongIterator keys()
        +void putAll(long key, IntArray values)
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, int[] values)
    }
    
    PrimitiveMultiMap <|- - LongToLongFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToLongFixedMultiMap
    class LongToLongFixedMultiMap
    {
        - -(constructors)- -
        +LongToLongFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +LongArray get(long key)
        +LongIterator keys()
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, LongArray values)
        +void putAll(long key, long[] values)
    }
    
@enduml

@startuml









skinparam backgroundColor #333333






skinparam  {
    defaultFontName   "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
    defaultFontSize   12
    defaultTextAlignment left
    shadowing false
    RoundCorner 10
    TitleFontSize 18
}

skinparam defaultFontName       "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
skinparam defaultFontSize       12
skinparam dpi                   100
skinparam shadowing             false
skinparam roundcorner           16
skinparam ParticipantPadding    40
skinparam BoxPadding            40
skinparam Padding               3
skinparam ArrowColor            #545454
skinparam stereotype {
    CBackgroundColor #0066cf
    CBorderColor #0086ef
    ABackgroundColor #C8Ac00
    ABorderColor #D8Bc00
    IBackgroundColor #008400
    IBorderColor #239c23
    EBackgroundColor #cf6300
    EBorderColor #ef8300
    NBackgroundColor #3380b9
    NBorderColor #004d86
}
skinparam title {
	FontColor	                 #c0c0c0
 	BorderColor                  #545454
	FontSize	    	         20
	BorderRoundCorner            16
	BorderThickness 	         1
	BackgroundColor              #48494b
}


skinparam legend {
	BackgroundColor #303030
	BorderColor #404040
	FontColor #a0a0a0
}

	skinparam swimlane {
	BorderColor #5e5e5e
	BorderThickness 2
	TitleBackgroundColor  #6d6d6d-#484848
	TitleFontColor #303030
}

skinparam activity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BarColor #00FF00
	StartColor #0060a8
	EndColor #0060a8
	DiamondBackgroundColor #6d6d6d-#3a3a3a
  	DiamondBorderColor #3a3a3a
  	DiamondFontColor #fefefe
}


skinparam participant {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	ParticipantBorderThickness 2
}


skinparam actor {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam arrow {
	Thickness 1.5
	Color #545454
	FontColor #a0a0a0
    FontStyle bold
    MessageAlignment center
}



skinparam sequence {
	BorderColor #303030
	TitleFontColor #303030
	BackgroundColor #333333
	StartColor #303030
	EndColor #303030
	BoxBackgroundColor #333333
	BoxBorderColor #484848
	BoxFontColor #484848
	LifeLineBorderColor #484848
	LifeLineBorderThickness 2
	LifeLineBackgroundColor #3a3a3a
	GroupBorderColor #484848
	GroupFontColor #484848
	GroupHeaderFontColor #0060a8
	GroupBackgroundColor #484848
	GroupHeaderBackgroundColor #333333
	DividerBackgroundColor #484848
    DividerBorderColor #484848
    DividerBorderThickness 2
    DividerFontColor #D8Bc00
	ReferenceBackgroundColor #333333
	ReferenceBorderColor #484848
	ReferenceFontColor #fefefe
	ReferenceHeaderBackgroundColor #484848
}


skinparam partition {
	BorderColor #303030
	FontColor #333333
	BackgroundColor #333333
}


skinparam collections {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam control {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam entity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam boundary {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam agent {
	BackgroundColor #ff8000
	BorderColor #ff9933
	FontColor #484848
}


skinparam note {
	BorderThickness 1
	BackgroundColor #1b1b1a
	BorderColor #5e5e5e
	FontSize 11
	FontColor #a0a0a0
}


skinparam artifact {
	BorderThickness 10
	BorderColor #5e5e5e
	BackgroundColor #1b1b1a
	FontColor #D8Bc00
}


skinparam component {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam interface {
	BackgroundColor  #008400
	BorderColor  #007F00
	FontColor #484848
}


skinparam storage {
	BackgroundColor #ff8000
  	BorderColor #cc6600
	FontColor #222222
}


skinparam node {
	BackgroundColor #333333
	BorderColor #333333
	FontColor #C8Ac00
}


skinparam cloud {
	BackgroundColor #484848-black
	BorderColor #484848
	FontColor #D8Bc00
}


skinparam database {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor  #333333
}


skinparam class {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	HeaderBackgroundColor #1b1b1a
    BackgroundColor #282828
    BorderColor #5e5e5e
 	StereotypeFontColor #a0a0a0
    StereotypeFontStyle bold
	BorderThickness 1
	AttributeFontColor #D8Bc00
	AttributeFontSize 11
    FontColor #D8Bc00
    FontStyle bold
}


skinparam object {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StereotypeFontColor #484848
	BorderThickness 1
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam usecase {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam rectangle {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam package {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
}


skinparam folder {
	BackgroundColor #6d6d6d
  	BorderColor #ff8000
	FontColor #ff8000
	BorderThickness 2
}


skinparam frame {
	BackgroundColor #6d6d6d
  	BorderColor #0060a8
	FontColor #0060a8
	BorderThickness 2
}


skinparam state {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StartColor #0060a8
	EndColor #0060a8
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam queue {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam card {
	BackgroundColor #0060a8
	BorderColor #004d86
	FontColor $INFO_TEXT
}


skinparam file {
	BackgroundColor #6d6d6d-#484848
	BorderColor #0060a8
	FontColor #fefefe
}


skinparam stack {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}

    
    title "com.telenav.kivakit.primitive.collections.map.scalars.fixed"
    
    interface PrimitiveScalarMultiMap
    interface IntMultiMap
    interface LongMultiMap
    
    PrimitiveMultiMap <|- - IntToByteFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToByteFixedMultiMap
    class IntToByteFixedMultiMap
    {
        - -(constructors)- -
        +IntToByteFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +ByteArray get(int key)
        +IntIterator keys()
        +void putAll(int key, ByteArray values)
        +void putAll(int key, byte[] values)
        +void putAll(long key, List<? extends Quantizable> values)
    }
    
    PrimitiveMultiMap <|- - IntToIntFixedMultiMap
    IntMultiMap <|- - IntToIntFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToIntFixedMultiMap
    class IntToIntFixedMultiMap
    {
        - -(constructors)- -
        +IntToIntFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +IntArray get(int key)
        +IntIterator keys()
        +void putAll(int key, IntArray values)
        +void putAll(int key, int[] values)
    }
    
    PrimitiveMultiMap <|- - IntToLongFixedMultiMap
    LongMultiMap <|- - IntToLongFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToLongFixedMultiMap
    class IntToLongFixedMultiMap
    {
        - -(constructors)- -
        +IntToLongFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(int key)
        +LongArray get(int key)
        +IntIterator keys()
        +void putAll(int key, long[] values)
        +void putAll(int key, LongArray values)
    }
    
    PrimitiveMultiMap <|- - IntToPackedArrayFixedMultiMap
    LongMultiMap <|- - IntToPackedArrayFixedMultiMap
    PrimitiveScalarMultiMap <|- - IntToPackedArrayFixedMultiMap
    class IntToPackedArrayFixedMultiMap
    {
        - -(constructors)- -
        +IntToPackedArrayFixedMultiMap(String)
        - -(collection)- -
        +IntToPackedArrayFixedMultiMap bits(BitCount bits, PackedPrimitiveArray.OverflowHandling)
        +boolean containsKey(int key)
        +LongArray get(int key)
        +LongArray getSigned(int key)
        +IntIterator keys()
        +IntToPackedArrayFixedMultiMap listTerminator(long listTerminator)
        +void putAll(int key, long[] values)
        +void putAll(int key, LongArray values)
    }
    
    PrimitiveMultiMap <|- - LongToByteFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToByteFixedMultiMap
    class LongToByteFixedMultiMap
    {
        - -(constructors)- -
        +LongToByteFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +ByteArray get(long key)
        +LongIterator keys()
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, byte[] values)
        +void putAll(long key, ByteArray values)
    }
    
    PrimitiveMultiMap <|- - LongToIntFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToIntFixedMultiMap
    class LongToIntFixedMultiMap
    {
        - -(constructors)- -
        +LongToIntFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +IntArray get(long key)
        +LongIterator keys()
        +void putAll(long key, IntArray values)
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, int[] values)
    }
    
    PrimitiveMultiMap <|- - LongToLongFixedMultiMap
    PrimitiveScalarMultiMap <|- - LongToLongFixedMultiMap
    class LongToLongFixedMultiMap
    {
        - -(constructors)- -
        +LongToLongFixedMultiMap(String)
        - -(collection)- -
        +boolean containsKey(long key)
        +LongArray get(long key)
        +LongIterator keys()
        +void putAll(long key, List<? extends Quantizable> values)
        +void putAll(long key, LongArray values)
        +void putAll(long key, long[] values)
    }
    
@enduml

PlantUML version 1.2021.01(Tue Feb 02 00:55:08 MST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>