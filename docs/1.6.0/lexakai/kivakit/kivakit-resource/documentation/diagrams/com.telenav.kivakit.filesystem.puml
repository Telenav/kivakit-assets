
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.filesystem"
    
    abstract BaseRepeater
    abstract BaseStringConverter
    abstract BaseResourceList
    abstract BaseWritableResource
    
    interface FileSystemObject
    interface Comparable
    interface Iterable
    interface ResourceFolder
    interface ResourceResolver
    interface List
    interface TryTrait
    interface ResourceFolderResolver
    
    BaseStringConverter <|-- FileList.Converter
    class FileList.Converter
    {
        --(constructors)--
        +Converter(Listener, Extension)
    }
    
    BaseStringConverter <|-- FolderList.Converter
    class FolderList.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- File.Converter
    class File.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- FilePath.Converter
    class FilePath.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- Folder.Converter
    class Folder.Converter
    {
        --(constructors)--
        +Converter(Listener)
        +Converter(Listener, boolean)
    }
    
    class Disk
    {
        --(filesystem)--
        +Folder root()
        --(math)--
        +Percent percentFree()
        +Percent percentUsable()
        --(primitive)--
        +Bytes free()
        +Bytes size()
        +Bytes usable()
    }
    
    BaseWritableResource <|-- File
    FileSystemObject <|-- File
    File o-- FileService : "delegates to"
    class File
    {
        --(checks)--
        +boolean isNewerThan(File that)
        +boolean isNewerThan(Duration)
        +boolean isNonEmpty()
        +boolean isOlderThan(Duration)
        +boolean isOlderThan(File that)
        --(filesystem)--
        +File absolute()
        +Folder asFolder()
        +java.nio.file.Path asJavaPath()
        +boolean chmod(PosixFilePermission... permissions)
        +File ensureReadable()
        +File ensureWritable()
        +File file(java.io.File)
        +File file(Listener, URI)
        +File file(FilePath)
        +ArgumentParser.Builder<File> fileArgumentParser(Listener, String description)
        +ArgumentParser.Builder<FileList> fileListArgumentParser(Listener, String description, Extension)
        +SwitchParser.Builder<FileList> fileListSwitchParser(Listener, String name, String description, Extension)
        +SwitchParser.Builder<FilePath> filePathSwitchParser(Listener, String name, String description)
        +SwitchParser.Builder<File> fileSwitchParser(Listener, String name, String description)
        +SwitchParser.Builder<File> inputFileSwitchParser(Listener)
        +boolean isFile()
        +boolean isFolder()
        +File normalized()
        +SwitchParser.Builder<File> outputFile(Listener)
        +File parseFile(Listener, String path, VariableMap<String> variables)
        +File parseFile(Listener, String path)
        +Folder root()
        +void safeCopyFrom(Resource, CopyMode, ProgressReporter)
        +File temporary(Extension)
        +File withBaseName(String name)
        +File withCharset(Charset)
        +File withCodec(Codec)
        +File withExtension(Extension)
        +File withoutExtension()
        +File withoutOverwriting()
    }
    
    BaseRepeater <|-- FileCache
    class FileCache
    {
        --(constructors)--
        +FileCache(Folder)
        --(filesystem)--
        +File add(Resource, CopyMode)
        +File add(Resource, CopyMode, ProgressReporter)
        +File addAs(Resource, FileName, CopyMode, ProgressReporter)
        +File addAs(Resource, FileName, CopyMode)
        +File file(FileName)
        +Folder folder(String name)
        --(lifecycle)--
        +void startPruner()
    }
    
    BaseResourceList <|-- FileList
    Iterable <|-- FileList
    class FileList
    {
        --(constructors)--
        #FileList(Iterable<File>)
        +FileList()
        --(filesystem)--
        +FileList fileList(File... files)
        +FileList fileList(Iterable<File> files)
    }
    
    ResourcePath <|-- FilePath
    class FilePath
    {
        --(constructors)--
        #FilePath(FilePath)
        #FilePath(StringList, String, List<String>)
        #FilePath(StringList, StringPath)
        --
        +boolean matches(Matcher<String>)
        --(collection)--
        +String last()
        --(conversion)--
        +StringPath asStringPath()
        +String asUnixString()
        +URI asUri()
        --(filesystem)--
        +FilePath absolute()
        +FilePath file(FileName child)
        +FilePath filePath(FileName)
        +FilePath filePath(java.nio.file.Path)
        +FilePath filePath(URI)
        +FilePath filePath(java.io.File)
        +FilePath filePath(StringPath)
        +boolean hasExtension(Extension)
        +boolean isCurrentFolder()
        +FilePath parseFilePath(Listener, String path, Object... arguments)
        +FilePath withPrefix(String prefix)
        +FilePath withScheme(String scheme)
        +FilePath withSchemes(StringList scheme)
        +FilePath withTrailingSlash()
        +FilePath withoutFileScheme()
        +FilePath withoutPrefix(String prefix)
        +FilePath withoutSchemes()
        +FilePath withoutTrailingSlash()
    }
    
    interface CreatedAt
    interface ModifiedAt
    ModifiedAt <|-- FileSystemObject
    CreatedAt <|-- FileSystemObject
    interface FileSystemObject
    {
    }
    
    BaseRepeater <|-- Folder
    FileSystemObject <|-- Folder
    Comparable <|-- Folder
    ResourceFolder <|-- Folder
    TryTrait <|-- Folder
    Folder --> Disk : "exists on"
    Folder o-- FolderService : "delegates to"
    class Folder
    {
        --(constructors)--
        +Folder(FilePath)
        --(checks)--
        +boolean hasChanged()
        +boolean isLocal()
        +boolean isRemote()
        --(filesystem)--
        +boolean chmod(PosixFilePermission... permissions)
        +void chmodNested(PosixFilePermission... permissions)
        +Folder clearAll()
        +Folder clearAllAndDelete()
        +void copyTo(Folder destination, CopyMode, ProgressReporter)
        +void copyTo(Folder destination, CopyMode, Matcher<File>, ProgressReporter)
        +Folder current()
        +Folder desktop()
        +Disk disk()
        +Folder ensureExists()
        +File file(File)
        +File file(FileName)
        +File file(String path, Object... arguments)
        +File file(ResourcePathed)
        +FileList files(Extension)
        +FileList files(Pattern)
        +FileList files(Matcher<File>, Traversal recurse)
        +FileList files(String globPattern)
        +FileList files()
        +FileList files(Matcher<File>)
        +Folder folder(java.io.File)
        +Folder folder(Path)
        +Folder folder(FileName child)
        +Folder folder(StringPath)
        +Folder folder(URI)
        +Folder folder(URL)
        +Folder folder(Folder child)
        +ArgumentParser.Builder<Folder> folderArgumentParser(Listener, String description)
        +ArgumentParser.Builder<FolderList> folderListArgumentParser(Listener, String description)
        +SwitchParser.Builder<FolderList> folderListSwitchParser(Listener, String name, String description)
        +SwitchParser.Builder<Folder> folderSwitchParser(Listener, String name, String description)
        +List<Folder> folders(Matcher<Folder>)
        +SwitchParser.Builder<Folder> inputFolderSwitchParser(Listener)
        +boolean isFolder()
        +boolean isFolder(FilePath)
        +Folder kivakitCache()
        +Folder kivakitExtensionsHome()
        +Folder kivakitHome()
        +Folder kivakitTemporary()
        +Folder kivakitTest(Class<?> type)
        +Folder last()
        +FileName name()
        +FileList nestedFiles(Matcher<File>)
        +FileList nestedFiles()
        +Folder of(FilePath)
        +File oldest()
        +File oldest(Matcher<File>)
        +SwitchParser.Builder<Folder> outputFolderSwitchParser(Listener)
        +Folder parseFolder(String path, Object... arguments)
        +Folder parseFolder(Listener, String path, Object... arguments)
        +FilePath relativePath(Folder)
        +Folder relativeTo(Folder)
        +Folder root()
        +void safeCopyTo(ResourceFolder<?> destination, CopyMode, Matcher<File>, ProgressReporter)
        +Folder scheduleCleanUpOnExit()
        +Folder temporaryForProcess(Type)
        +Folder userHome()
        +Folder withoutTrailingSlash()
        --(network)--
        +URI asUri()
        +URL asUrl()
        --(primitive)--
        +Bytes size()
    }
    
    PeriodicCollectionChangeWatcher <|-- FolderChangeWatcher
    FolderChangeWatcher --> Folder : "watches"
    class FolderChangeWatcher
    {
        --(constructors)--
        +FolderChangeWatcher(Folder, Frequency)
    }
    
    List <|-- FolderList
    FolderList "1" o-- "*" Folder
    class FolderList
    {
        --(constructors)--
        +FolderList()
        --(filesystem)--
        +Set<Folder> asSet()
        +FolderList forVirtual(List<? extends FolderService> virtualFolders)
        +FolderList matching(Matcher<Folder>)
    }
    
    FolderPruner --> Folder : "prunes old files from"
    class FolderPruner
    {
        --(constructors)--
        +FolderPruner(Folder, Frequency)
        --
        +void capacity(Bytes capacity)
        --(collection)--
        #boolean canRemove(File candidate, FileList files)
        --(filesystem)--
        #void onFileRemoved(File)
        --(lifecycle)--
        +boolean isRunning()
        +void start()
        +void stop(Duration maximumWaitTime)
        --(matching)--
        +void matcher(Matcher<File>)
        #Matcher<File> matcher()
        --(math)--
        +void maximumAge(Duration maximumAge)
        +void minimumUsableDiskSpace(Percent minimumUsableDiskSpace)
        #Duration maximumAge()
        #Percent minimumUsableDiskSpace()
        --(primitive)--
        #Bytes capacity()
        --(time)--
        #Duration age(File)
    }
    
    ResourceResolver <|-- File.Resolver
    class File.Resolver
    {
    }
    
    ResourceFolderResolver <|-- Folder.Resolver
    class Folder.Resolver
    {
    }
    
    enum Folder.Traversal
    {
        FLAT
        RECURSE
    }
    
    enum Folder.Type
    {
        CLEAN_UP_ON_EXIT
        NORMAL
    }
    
@enduml

