
@startuml

    !include lexakai.theme
    
    title "diagram-thread"
    
    abstract BaseRepeater
    
    interface Startable
    interface Named
    interface Runnable
    interface Stoppable
    interface Pausable
    
    BaseRepeater <|-- Batcher
    class Batcher<Element>
    {
        --(constructors)--
        #Batcher()
        #Batcher(Batcher<Element>)
        --
        +BatchAdder adder()
        +Batcher<Element> create()
        #void onBatch(Batch)
        --(filesystem)--
        #Batcher<Element> copy()
        --(functional)--
        +Batcher<Element> withBatchFullPredicate(Predicate<Batch>)
        +Batcher<Element> withBatchSize(Count size)
        +Batcher<Element> withConsumer(Consumer<Batch>)
        +Batcher<Element> withName(String name)
        +Batcher<Element> withQueueSize(BaseCount<?> size)
        --(lifecycle)--
        +void start(Count workers)
        +void stop()
    }
    
    class CodeContext
    {
        --(constructors)--
        #CodeContext()
        +CodeContext(Class<?>)
        +CodeContext(Method)
        +CodeContext(String)
        --
        +Class<?> type()
        --(naming)--
        +String fullTypeName()
        +String typeName()
        --(network)--
        +String host()
        +void hostResolver(Source<String> resolver)
        --(path)--
        +PackageReference packagePath()
    }
    
    CompletionLatch --> WakeState : "waits until"
    class CompletionLatch
    {
        --(constructors)--
        +CompletionLatch()
        +CompletionLatch(Count)
        --(lifecycle)--
        +void completed()
        +boolean hasCompleted()
        +void reset()
        --(thread)--
        +WakeState waitForCompletion()
        +WakeState waitForCompletion(Duration)
    }
    
    class InitializationLatch
    {
        --
        +void ready()
        --(checks)--
        +boolean isReady()
        --(lifecycle)--
        +void reset()
        --(thread)--
        +boolean await(Duration)
        +boolean await()
    }
    
    BaseRepeater <|-- KivaKitThread
    Startable <|-- KivaKitThread
    Runnable <|-- KivaKitThread
    Stoppable <|-- KivaKitThread
    Named <|-- KivaKitThread
    class KivaKitThread
    {
        --(constructors)--
        +KivaKitThread(String)
        +KivaKitThread(String, Runnable)
        --
        +KivaKitThread daemon(boolean daemon)
        +KivaKitThread highPriority()
        +boolean is(State)
        +KivaKitThread lowPriority()
        +KivaKitThread repeat(Listener, String name, Frequency every, UncheckedVoidCode)
        +KivaKitThread repeat(String name, Frequency every, UncheckedVoidCode)
        +StateMachine<State> stateMachine()
        +void whileLocked(Runnable code)
        #void onExited()
        #void onRan()
        #void onWaiting()
        #Thread thread()
        #State transition(State to)
        --(functional)--
        +Time startedAt()
        +T whileLocked(Code<T>)
        --(lifecycle)--
        +KivaKitThread initialDelay(Duration initialDelay)
        +KivaKitThread interrupt()
        +void join()
        +KivaKitThread run(Listener, String name, Runnable code)
        +KivaKitThread run(String name, Runnable code)
        +KivaKitThread startSynchronously()
        #void onRun()
        #void onRunning()
        #void waitForInitialDelayPeriod()
        --(thread)--
        +void waitFor(State, Duration maximumWait)
        +WakeState waitFor(State)
    }
    
    ReentrantLock <|-- Lock
    class Lock
    {
        --
        +void whileLocked(Runnable code)
        --(functional)--
        +T whileLocked(Code<T>)
    }
    
    class Monitor
    {
        --(lifecycle)--
        +void done()
        --(thread)--
        +void await()
        +void signal()
    }
    
    ReentrantReadWriteLock <|-- ReadWriteLock
    class ReadWriteLock
    {
        --(constructors)--
        +ReadWriteLock()
        --(read)--
        +void read(Runnable code)
        +T read(Source<T> code)
        --(write)--
        +void write(Runnable code)
        +T write(Source<T> code)
    }
    
    class ReentrancyTracker
    {
        --
        +Reentrancy enter()
        --(checks)--
        +boolean hasReentered()
        --(lifecycle)--
        +Reentrancy exit()
    }
    
    KivaKitThread <|-- RepeatingThread
    Pausable <|-- RepeatingThread
    class RepeatingThread
    {
        --(constructors)--
        +RepeatingThread(Listener, String)
        +RepeatingThread(Listener, String, Frequency)
        +RepeatingThread(Listener, String, Runnable)
        --(lifecycle)--
        +RepeatingThread run(Listener, String name, Runnable code)
        +RepeatingThread run(Listener, String name, Frequency every, Runnable code)
        --(time)--
        +Frequency frequency()
        +RepeatingThread frequency(Frequency)
    }
    
    BaseRepeater <|-- Retry
    class Retry
    {
        --(constructors)--
        +Retry(Listener)
        +Retry(Listener, int, Duration, Class<? extends Throwable>, String)
        --
        +UncheckedCode<T> retry(UncheckedCode<T>, int times, Duration delay, Runnable... beforeRetry)
        --(lifecycle)--
        +T run(UncheckedCode<T> runnable, Runnable... stepsBeforeRetry)
    }
    
    BaseRepeater <|-- StateMachine
    class StateMachine<State>
    {
        --(constructors)--
        +StateMachine(State)
        +StateMachine(State, Consumer<State>)
        --
        +State at()
        +boolean is(State)
        +boolean is(Predicate<State>)
        +Optional<State> toggle(State one, State two)
        +boolean transition(State from, State to, State waitFor, Duration maximumWait, Runnable before)
        +boolean transition(State from, State to, State waitFor, Runnable before)
        +boolean transition(State from, State to)
        +State transitionTo(State)
        +void whileLocked(Runnable code)
        --(checks)--
        +boolean isNot(Predicate<State>)
        +boolean isNot(State)
        --(functional)--
        +T whileLocked(Code<T>)
        --(thread)--
        +void transitionAndWaitForNot(State)
        +WakeState waitFor(Predicate<State>, Duration maximumWait)
        +WakeState waitFor(State, Duration maximumWait)
        +WakeState waitFor(Predicate<State>)
        +WakeState waitFor(Predicate<State>, Duration maximumWait, Runnable beforeWaiting)
        +WakeState waitFor(State)
        +WakeState waitForNot(State)
        +WakeState waitForNot(State, Duration maximumWait)
    }
    
    class StateWatcher<State>
    {
        --(constructors)--
        +StateWatcher(State)
        --
        +void whileLocked(Runnable code)
        --(functional)--
        +T whileLocked(Code<T>)
        --(thread)--
        +void signal(State)
        +WakeState waitFor(State desired, Duration maximumWaitTime)
        +WakeState waitFor(Predicate<State>)
        +WakeState waitFor(State desired)
        +WakeState waitFor(Predicate<State>, Duration maximumWaitTime)
    }
    
    ThreadSnapshot "1" o-- "*" ThreadStatus
    class ThreadSnapshot
    {
        --(constructors)--
        +ThreadSnapshot()
        --
        +ThreadSnapshot update()
        --(collection)--
        +List<ThreadStatus> snapshot()
        --(time)--
        +Time capturedAt()
        +Duration cpuTime()
        +Duration cpuTime(Thread)
        +Duration totalCpuTime()
    }
    
    class ThreadStatus
    {
        --
        +Thread.State state()
        --(checks)--
        +boolean isDaemon()
        +boolean isKivaKit()
        --(identity)--
        +long identifier()
        --(naming)--
        +String name()
        --(time)--
        +Duration cpuTime()
    }
    
    class Threads
    {
        --
        +ThreadGroup rootGroup()
        --(collection)--
        +Iterable<Thread> all()
        --(thread)--
        +void await(ExecutorService)
        +void shutdownAndAwait(ExecutorService)
        +ExecutorService threadPool(String name)
        +ExecutorService threadPool(String name, Count threads)
    }
    
@enduml

